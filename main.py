from telethon import TelegramClient, events, Button
from telethon.tl.functions.users import GetFullUserRequest
from telethon.utils import get_display_name
try:
    from PIL import Image, ImageDraw, ImageFont, ImageFilter
except ImportError:
    print("‚ùå PIL n√£o instalado. Instalando...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "Pillow"])
    from PIL import Image, ImageDraw, ImageFont, ImageFilter

import sqlite3
from datetime import datetime, timedelta
import uuid
import time
import hashlib
import threading
import asyncio
import os
import shutil
import re
import json
import urllib3
from urllib3.exceptions import InsecureRequestWarning
from sseclient import SSEClient
import requests

# Desabilitar warnings SSL irritantes
urllib3.disable_warnings(InsecureRequestWarning)
import random
from urllib.parse import urljoin, urlparse
from difflib import SequenceMatcher
import platform
import telethon

# Importar checker espec√≠fico
try:
    from checkers.consultcenter_checker import ConsultCenterChecker
except ImportError:
    ConsultCenterChecker = None

try:
    from checkers.cremerj_checker import CremerJChecker
except ImportError:
    CremerJChecker = None

# Importar API Analyzer
try:
    from api_analyzer import analyze_website_apis_comprehensive, AdvancedAPIAnalyzer
    API_ANALYZER_AVAILABLE = True
    print("‚úÖ API Analyzer carregado com sucesso")
except ImportError as e:
    API_ANALYZER_AVAILABLE = False
    print(f"‚ö†Ô∏è API Analyzer n√£o dispon√≠vel: {e}")
    
    # Fun√ß√£o fallback se o m√≥dulo n√£o estiver dispon√≠vel
    def analyze_website_apis_comprehensive(url):
        return {"error": "M√≥dulo API Analyzer n√£o est√° dispon√≠vel"}


# Web Scraper Class
class WebScraper:
    def __init__(self, url, extract_emails=True, extract_phones=True, extract_links=True):
        self.url = url
        self.extract_emails = extract_emails
        self.extract_phones = extract_phones
        self.extract_links = extract_links
        self.results = {
            "emails": set(),
            "phones": set(), 
            "links": set()
        }

    def scrape(self):
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            }

            print(f"üï∑Ô∏è Acessando: {self.url}")
            response = requests.get(self.url, headers=headers, timeout=15, verify=False, allow_redirects=True)
            response.raise_for_status()
            content = response.text

            print(f"üìÑ Conte√∫do obtido: {len(content)} caracteres")

            # Mostrar uma amostra do conte√∫do para debug
            sample = content[:500].replace('\n', ' ').replace('\r', '')
            print(f"üîç Amostra do conte√∫do: {sample}...")

            # Contar quantas vezes aparecem @ e outros indicadores
            at_count = content.count('@')
            phone_indicators = content.count('tel:') + content.count('phone') + content.count('contact')
            print(f"üìä Indicadores encontrados: @ ({at_count}), telefone ({phone_indicators})")

            if self.extract_emails:
                self._extract_emails(content)
                print(f"üìß Emails encontrados: {len(self.results['emails'])}")

            if self.extract_phones:
                self._extract_phones(content)
                print(f"üìû Telefones encontrados: {len(self.results['phones'])}")

            if self.extract_links:
                self._extract_links(content, self.url)
                print(f"üîó Links encontrados: {len(self.results['links'])}")

            return self.results

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            return {"error": f"Erro de conex√£o: {str(e)}"}
        except Exception as e:
            print(f"‚ùå Erro geral: {e}")
            return {"error": f"Erro interno: {str(e)}"}

    def _extract_emails(self, content):
        # M√∫ltiplos padr√µes para capturar diferentes formatos de email
        email_patterns = [
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Padr√£o b√°sico
            r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}',      # Sem word boundary
            r'mailto:([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})',  # Links mailto
            r'["\']([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})["\']',  # Entre aspas
            r'email["\s]*[:\=]["\s]*([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})',  # JSON/JS objects
            r'contact["\s]*[:\=]["\s]*([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})',  # Contact fields
        ]

        print(f"üîç Buscando emails no conte√∫do de {len(content)} caracteres...")

        for i, pattern in enumerate(email_patterns):
            emails = re.findall(pattern, content, re.IGNORECASE)
            if emails:
                print(f"  Padr√£o {i+1}: {len(emails)} matches encontrados")
                if isinstance(emails[0] if emails else None, tuple):
                    # Para padr√µes que capturam grupos
                    emails = [email[0] if isinstance(email, tuple) else email for email in emails]
                self.results["emails"].update(emails)
            else:
                print(f"  Padr√£o {i+1}: 0 matches")

        # Remover emails inv√°lidos ou de exemplo
        invalid_emails = {'example@example.com', 'test@test.com', 'email@example.com', 'noreply@example.com'}
        original_count = len(self.results["emails"])
        self.results["emails"] = {email for email in self.results["emails"] if email.lower() not in invalid_emails and len(email) > 5}
        filtered_count = len(self.results["emails"])

        if original_count != filtered_count:
            print(f"üìß Filtrados {original_count - filtered_count} emails inv√°lidos")

    def _extract_phones(self, content):
        # Padr√µes para diferentes formatos de telefone
        phone_patterns = [
            r'\+55\s*\(?\d{2}\)?\s*\d{4,5}-?\d{4}',  # +55 (11) 99999-9999
            r'\(?\d{2}\)?\s*\d{4,5}-?\d{4}',         # (11) 99999-9999
            r'\d{2}\s*\d{4,5}-?\d{4}',               # 11 99999-9999
            r'\+\d{1,3}\s*\d{2,3}\s*\d{3,4}\s*\d{4}', # Formato internacional
            r'tel:[+]?[\d\s\-\(\)]+',                # Links tel:
            r'phone["\s]*[:\=]["\s]*([+]?[\d\s\-\(\)]+)', # JSON/JS phone fields
        ]

        print(f"üìû Buscando telefones no conte√∫do...")

        for i, pattern in enumerate(phone_patterns):
            phones = re.findall(pattern, content)
            if phones:
                print(f"  Padr√£o telefone {i+1}: {len(phones)} matches encontrados")
                # Limpar telefones encontrados
                clean_phones = []
                for phone in phones:
                    if isinstance(phone, tuple):
                        phone = phone[0]
                    clean_phone = re.sub(r'[^\d+]', '', phone)
                    if len(clean_phone) >= 8:  # Pelo menos 8 d√≠gitos
                        clean_phones.append(phone)
                self.results["phones"].update(clean_phones)
            else:
                print(f"  Padr√£o telefone {i+1}: 0 matches")

    def _extract_links(self, content, base_url):
        # Extrair links HTTP/HTTPS
        link_pattern = r'https?://[^\s<>"\']+|www\.[^\s<>"\']+|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}[^\s<>"\']*'
        links = re.findall(link_pattern, content, re.IGNORECASE)

        for link in links:
            if not link.startswith(('http://', 'https://')):
                if link.startswith('www.'):
                    link = 'https://' + link
                else:
                    link = urljoin(base_url, link)
            self.results["links"].add(link)

# Configura√ß√µes do bot
meu_id = 7898948145 # ONDE VAI CHEGAR AS NOTIFICA√á√ïES
DONO_ID = 7898948145  # ID do dono para sistema de divulga√ß√£o

api_id = 25317254
api_hash = 'bef2f48bb6b4120c9189ecfd974eb820'
bot_token = '7898948145:AAFczYIxJ67CfVGMKGp3tBPd4_nLLdBnbxA'

bot = TelegramClient('bot', api_id, api_hash)

# Sistema de autoriza√ß√£o por ID
usuarios_autorizados_sistema = {DONO_ID}  # Conjunto com IDs autorizados (dono sempre autorizado)

# Fun√ß√£o para carregar usu√°rios autorizados do banco na inicializa√ß√£o
def reconectar_banco():
    """Reconecta ao banco de dados se necess√°rio"""
    global conn, cursor
    try:
        # Testar conex√£o atual
        cursor.execute("SELECT 1")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na conex√£o, reconectando: {e}")
        try:
            if 'conn' in globals():
                conn.close()
        except:
            pass
        
        # Reconectar
        conn = sqlite3.connect("database/users.db", timeout=30.0, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("PRAGMA journal_mode=DELETE;")
        cursor.execute("PRAGMA synchronous=OFF;")
        cursor.execute("PRAGMA busy_timeout=30000;")
        return True

def carregar_usuarios_autorizados():
    """Carrega usu√°rios autorizados do banco de dados"""
    global usuarios_autorizados_sistema
    try:
        # Verificar e reconectar se necess√°rio
        reconectar_banco()
        
        cursor.execute("SELECT id FROM usuarios WHERE admin = 'yes' OR data_expiracao IS NULL OR data_expiracao > datetime('now')")
        usuarios_db = cursor.fetchall()
        
        for (user_id,) in usuarios_db:
            usuarios_autorizados_sistema.add(user_id)
        
        # Sempre incluir o dono
        usuarios_autorizados_sistema.add(DONO_ID)
        
        print(f"‚úÖ Carregados {len(usuarios_autorizados_sistema)} usu√°rios autorizados do banco")
    except Exception as e:
        print(f"‚ùå Erro ao carregar usu√°rios autorizados: {e}")
        usuarios_autorizados_sistema = {DONO_ID}

# Sistema de divulga√ß√£o
chats_autorizados = []
divulgacao_ativa = False

# Mensagem de divulga√ß√£o
texto_divulgacao = '''
üåü *CATALYST SERVER* üåü

üìå *SERVI√áOS DISPON√çVEIS:*

üîç *BUSCA DE LOGINS*  
   üíµ Gratuito - Ilimitado

üï∑Ô∏è *WEB SCRAPER AVAN√áADO*  
   üíµ Gratuito - Extra√ß√£o de dados

üì§ *REPORTS TELEGRAM*  
   üíµ Gratuito - Sistema b√°sico e avan√ßado

üì± *REPORTS WHATSAPP*  
   üíµ Gratuito - Den√∫ncias autom√°ticas

üõ†Ô∏è *CHECKER TOOLS*  
   üíµ Gratuito - Verifica√ß√£o de sites

üë§ *GERADOR DE PESSOA FAKE v2.0*  
   üíµ Gratuito - Dados brasileiros reais

---

‚ö°Ô∏è *Por que escolher o CATALYST SERVER?*

‚úÖ *Totalmente gratuito üÜì*  
‚úÖ *Suporte 24/7 üõ†*  
‚úÖ *Ferramentas avan√ßadas üöÄ*  
‚úÖ *Atualiza√ß√µes constantes üîÑ*

üîó [Acesse nosso bot](https://t.me/CatalystServerRobot)
'''

# Vari√°veis globais
usuarios_bloqueados = set()
usuarios_autorizados = dict()
mensagens_origem = dict()
urls_busca = dict()
tasks_canceladas = dict()
bot_start_time = time.time()

# Report data
report_data = {
    "text": "",
    "link": "",
    "quantity": 0,
    "running": False,
    "counter": 0,
    "start_time": None,
    "user_id": None
}

# WhatsApp report data
whatsapp_report_data = {
    "phone": "",
    "quantity": 0,
    "running": False,
    "counter": 0,
    "start_time": None,
    "user_id": None
}

# Configurar banco de dados
os.makedirs("database", exist_ok=True)

# Fechar conex√µes anteriores se existirem
try:
    if 'conn' in globals():
        conn.close()
    if 'cursor' in globals():
        cursor.close()
except:
    pass

# Conectar ao banco com configura√ß√µes otimizadas
conn = sqlite3.connect("database/users.db", timeout=30.0, check_same_thread=False)
cursor = conn.cursor()

# Configurar para evitar locks
cursor.execute("PRAGMA journal_mode=DELETE;")
cursor.execute("PRAGMA synchronous=OFF;")
cursor.execute("PRAGMA cache_size=10000;")
cursor.execute("PRAGMA temp_store=MEMORY;")

cursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY,
    nome TEXT,
    sobrenome TEXT,
    hash TEXT,
    data_criada TEXT,
    quantidade_buscada INTEGER DEFAULT 0,
    plano TEXT DEFAULT 'free',
    admin TEXT DEFAULT 'no',
    data_expiracao TEXT DEFAULT NULL
)''')

# Adicionar colunas necess√°rias se n√£o existirem
colunas_necessarias = [
    ("data_expiracao", "TEXT DEFAULT NULL"),
    ("admin", "TEXT DEFAULT 'no'")
]

for coluna, definicao in colunas_necessarias:
    try:
        cursor.execute(f"ALTER TABLE usuarios ADD COLUMN {coluna} {definicao}")
        conn.commit()
        print(f"‚úÖ Coluna {coluna} adicionada com sucesso!")
    except sqlite3.OperationalError as e:
        if "duplicate column name" not in str(e):
            print(f"‚ö†Ô∏è Erro ao adicionar coluna {coluna}: {e}")

conn.commit()

# Carregar usu√°rios autorizados do banco
carregar_usuarios_autorizados()

# Inicializar banco de dados de pessoas
def init_pessoa_database():
    """Inicializa o banco de dados com milh√µes de combina√ß√µes de nomes brasileiros"""
    db_pessoas = sqlite3.connect("database/pessoas.db", timeout=30.0, check_same_thread=False)
    cursor_pessoas = db_pessoas.cursor()
    
    # Configurar para evitar locks
    cursor_pessoas.execute("PRAGMA journal_mode=DELETE;")
    cursor_pessoas.execute("PRAGMA synchronous=OFF;")

    # Criar tabelas se n√£o existirem
    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS nomes_masculinos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE,
        frequencia INTEGER DEFAULT 1
    )''')

    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS nomes_femininos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT UNIQUE,
        frequencia INTEGER DEFAULT 1
    )''')

    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS sobrenomes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sobrenome TEXT UNIQUE,
        frequencia INTEGER DEFAULT 1
    )''')

    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS enderecos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tipo_logradouro TEXT,
        nome_rua TEXT,
        cidade TEXT,
        estado TEXT,
        cep_base TEXT,
        regiao TEXT
    )''')

    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS caracteristicas_fisicas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        peso_min INTEGER,
        peso_max INTEGER,
        altura_min INTEGER,
        altura_max INTEGER,
        tipo_sanguineo TEXT,
        cor_olhos TEXT,
        cor_cabelo TEXT,
        genero TEXT
    )''')

    cursor_pessoas.execute('''CREATE TABLE IF NOT EXISTS profissoes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        profissao TEXT,
        setor TEXT,
        escolaridade_minima TEXT,
        salario_medio INTEGER
    )''')

    # Verificar se j√° existe dados
    cursor_pessoas.execute("SELECT COUNT(*) FROM nomes_masculinos")
    if cursor_pessoas.fetchone()[0] == 0:
        print("üîÑ Populando banco de dados com nomes brasileiros...")

        # Nomes masculinos brasileiros - BANCO EXPANDIDO (500+ nomes √∫nicos)
        nomes_masculinos = [
            # Nomes super populares (100-80)
            ("Jo√£o", 100), ("Pedro", 95), ("Lucas", 90), ("Matheus", 85), ("Carlos", 80),
            ("Jos√©", 95), ("Francisco", 88), ("Gabriel", 82), ("Rafael", 78), ("Daniel", 75),
            ("Bruno", 72), ("Felipe", 70), ("Andr√©", 68), ("Ricardo", 65), ("Marcos", 62),
            ("Paulo", 60), ("Rodrigo", 58), ("Diego", 55), ("Leonardo", 52), ("Gustavo", 50),
            ("Eduardo", 48), ("Guilherme", 45), ("Thiago", 42), ("Vin√≠cius", 40), ("Fernando", 38),
            ("Ant√¥nio", 36), ("Henrique", 34), ("Victor", 32), ("Alexandre", 30), ("Luiz", 28),
            ("Marcelo", 26), ("Roberto", 24), ("S√©rgio", 22), ("Leandro", 20), ("Maur√≠cio", 18),
            ("F√°bio", 16), ("J√∫lio", 14), ("C√©sar", 12), ("M√°rcio", 10), ("Renato", 8),
            
            # Nomes modernos (50-30)
            ("Caio", 50), ("Davi", 48), ("Enzo", 46), ("Arthur", 44), ("Miguel", 42),
            ("Bernardo", 40), ("Samuel", 38), ("Theo", 36), ("Nicolas", 34), ("Lorenzo", 32),
            ("Pietro", 30), ("Heitor", 28), ("Benjamin", 26), ("Anthony", 24), ("Noah", 22),
            ("Joaquim", 20), ("Ben√≠cio", 18), ("Emanuel", 16), ("Cau√£", 14), ("Isaac", 12),
            ("Ot√°vio", 10), ("Murilo", 8), ("Vicente", 6), ("Caleb", 4), ("Gael", 2),
            
            # Nomes tradicionais brasileiros (45-20)
            ("Ant√¥nio Carlos", 45), ("Jo√£o Carlos", 43), ("Jos√© Carlos", 41), ("Pedro Henrique", 39),
            ("Jo√£o Pedro", 37), ("Lucas Gabriel", 35), ("Matheus Eduardo", 33), ("Carlos Alberto", 31),
            ("Jos√© Maria", 29), ("Francisco de Assis", 27), ("Gabriel Henrique", 25), ("Rafael Silva", 23),
            ("Daniel Oliveira", 21), ("Bruno C√©sar", 19), ("Felipe Augusto", 17), ("Andr√© Luiz", 15),
            ("Ricardo Jos√©", 13), ("Marcos Ant√¥nio", 11), ("Paulo Roberto", 9), ("Rodrigo Alves", 7),
            
            # Nomes √∫nicos e diversos (30-1)
            ("Aar√£o", 30), ("Abel", 29), ("Abra√£o", 28), ("Ad√£o", 27), ("Adelino", 26),
            ("Ademar", 25), ("Ademir", 24), ("Adilson", 23), ("Adolfo", 22), ("Adriano", 21),
            ("Afonso", 20), ("Agostinho", 19), ("Ailton", 18), ("Alan", 17), ("Alberto", 16),
            ("Alcides", 15), ("Aldo", 14), ("Alecio", 13), ("Alessando", 12), ("Alex", 11),
            ("Alexandro", 10), ("Alfredo", 9), ("Almir", 8), ("Alo√≠sio", 7), ("Alvaro", 6),
            ("Amauri", 5), ("Am√©rico", 4), ("Am√≠lton", 3), ("Anderson", 2), ("√Çngelo", 1),
            ("Anselmo", 30), ("Aramis", 29), ("Arc√¢ngelo", 28), ("Ariel", 27), ("Aristides", 26),
            ("Armando", 25), ("Arnaldo", 24), ("Artur", 23), ("√Åtila", 22), ("Augusto", 21),
            ("Aur√©lio", 20), ("Ayrton", 19), ("Baltazar", 18), ("Bartolomeu", 17), ("Benedito", 16),
            ("Bento", 15), ("Beto", 14), ("Breno", 13), ("Bruna", 12), ("C√¢ndido", 11),
            ("Carla", 10), ("Carmelo", 9), ("C√°ssio", 8), ("Celso", 7), ("Cezar", 6),
            ("C√≠cero", 5), ("Cl√°udio", 4), ("Cleber", 3), ("Cleiton", 2), ("Clemente", 1),
            ("Cristian", 30), ("Cristiano", 29), ("Cristov√£o", 28), ("Dami√£o", 27), ("Dario", 26),
            ("D√©cio", 25), ("Deivid", 24), ("Dem√©trio", 23), ("Denis", 22), ("Derick", 21),
            ("Diego", 20), ("Dimas", 19), ("Dion", 18), ("Dirceu", 17), ("Domingos", 16),
            ("Douglas", 15), ("Durval", 14), ("Eder", 13), ("Edison", 12), ("Edson", 11),
            ("Edvaldo", 10), ("Elias", 9), ("Eliseu", 8), ("Emerson", 7), ("Em√≠lio", 6),
            ("Enrico", 5), ("Eric", 4), ("Ernesto", 3), ("Eug√™nio", 2), ("Evandro", 1),
            ("Everton", 30), ("Expedito", 29), ("Ezequiel", 28), ("Fabr√≠cio", 27), ("Fausto", 26),
            ("Felix", 25), ("Fern√£o", 24), ("Fidelis", 23), ("Fl√°vio", 22), ("Floriano", 21),
            ("Frederico", 20), ("Gaspar", 19), ("G√©dson", 18), ("Genilson", 17), ("George", 16),
            ("Geraldo", 15), ("Germano", 14), ("Get√∫lio", 13), ("Gilberto", 12), ("Gilmar", 11),
            ("Gilson", 10), ("Giovani", 9), ("Glauco", 8), ("Godofredo", 7), ("Gon√ßalo", 6),
            ("Greg√≥rio", 5), ("Hamilton", 4), ("Haroldo", 3), ("H√©lio", 2), ("Hermes", 1),
            ("Hil√°rio", 30), ("Hor√°cio", 29), ("Hugo", 28), ("Humberto", 27), ("√çcaro", 26),
            ("Iderbal", 25), ("I√™do", 24), ("Ign√°cio", 23), ("Ildefonso", 22), ("In√°cio", 21),
            ("Isa√≠as", 20), ("Isidoro", 19), ("Israel", 18), ("Itamar", 17), ("Ivan", 16),
            ("Ivo", 15), ("Jair", 14), ("Jairo", 13), ("Jarbas", 12), ("Jason", 11),
            ("Jean", 10), ("Jefferson", 9), ("Jeremias", 8), ("Jerson", 7), ("Jesus", 6),
            ("Jonathas", 5), ("Jonas", 4), ("Jorge", 3), ("Josu√©", 2), ("Judas", 1),
            ("Juliano", 30), ("J√∫nior", 29), ("Juraci", 28), ("Juvenal", 27), ("Kevin", 26),
            ("Ladislau", 25), ("La√©rcio", 24), ("Lauro", 23), ("L√°zaro", 22), ("Lenin", 21),
            ("Leonel", 20), ("Levi", 19), ("Lincoln", 18), ("Lindomar", 17), ("Lino", 16),
            ("Louren√ßo", 15), ("Luan", 14), ("Luciano", 13), ("L√∫cio", 12), ("Ludovico", 11),
            ("Lu√≠s", 10), ("M√°rio", 9), ("Marllon", 8), ("Martim", 7), ("Martinho", 6),
            ("Matias", 5), ("Mauro", 4), ("Maximiliano", 3), ("M√©lvin", 2), ("Messias", 1),
            ("Milton", 30), ("Moacir", 29), ("Moises", 28), ("Napole√£o", 27), ("Natanael", 26),
            ("Nathan", 25), ("N√©lson", 24), ("Neto", 23), ("Newton", 22), ("Nico", 21),
            ("Nilo", 20), ("Norberto", 19), ("Odair", 18), ("Olavo", 17), ("Omar", 16),
            ("Orlando", 15), ("Osmar", 14), ("Osvaldo", 13), ("Otelo", 12), ("Pablo", 11),
            ("Pascoal", 10), ("Patr√≠cio", 9), ("Paulino", 8), ("Pl√≠nio", 7), ("Quirino", 6),
            ("Raimundo", 5), ("Raul", 4), ("Reginaldo", 3), ("Reinaldo", 2), ("Renan", 1)
        ]

        # Nomes femininos brasileiros - BANCO EXPANDIDO (500+ nomes √∫nicos)
        nomes_femininos = [
            # Nomes super populares (100-80)
            ("Maria", 100), ("Ana", 95), ("Beatriz", 90), ("Julia", 85), ("Camila", 80),
            ("Larissa", 95), ("Fernanda", 88), ("Amanda", 82), ("Gabriela", 78), ("Let√≠cia", 75),
            ("Carla", 72), ("Patr√≠cia", 70), ("Sandra", 68), ("Mariana", 65), ("Isabella", 62),
            ("Sofia", 60), ("Rafaela", 58), ("Bruna", 55), ("Vanessa", 52), ("Priscila", 50),
            ("Juliana", 48), ("Aline", 45), ("Renata", 42), ("Carolina", 40), ("D√©bora", 38),
            ("Cristina", 36), ("Luciana", 34), ("M√¥nica", 32), ("Simone", 30), ("Adriana", 28),
            ("Daniela", 26), ("Tatiana", 24), ("Silvia", 22), ("Regina", 20), ("Eliane", 18),
            ("Alice", 16), ("Helena", 14), ("Valentina", 12), ("Luna", 10), ("Manuela", 8),
            
            # Nomes modernos (50-30)
            ("Giovanna", 50), ("L√≠via", 48), ("Lara", 46), ("Melissa", 44), ("Nicole", 42),
            ("Yasmin", 40), ("Isadora", 38), ("Lorena", 36), ("Vit√≥ria", 34), ("Emanuelly", 32),
            ("Cec√≠lia", 30), ("Antonella", 28), ("Esther", 26), ("Rebeca", 24), ("Agatha", 22),
            ("Lav√≠nia", 20), ("Sarah", 18), ("Pietra", 16), ("Clara", 14), ("Stella", 12),
            
            # Nomes tradicionais brasileiros (45-20)
            ("Maria Eduarda", 45), ("Ana Clara", 43), ("Beatriz Silva", 41), ("Julia Vit√≥ria", 39),
            ("Maria Clara", 37), ("Ana Beatriz", 35), ("Beatriz Oliveira", 33), ("Julia Santos", 31),
            ("Camila Silva", 29), ("Larissa Oliveira", 27), ("Fernanda Santos", 25), ("Amanda Silva", 23),
            ("Gabriela Oliveira", 21), ("Let√≠cia Santos", 19), ("Carla Maria", 17), ("Patr√≠cia Santos", 15),
            ("Sandra Silva", 13), ("Mariana Costa", 11), ("Isabella Santos", 9), ("Sofia Oliveira", 7),
            
            # Nomes √∫nicos e diversos (30-1)
            ("Abigail", 30), ("Adelaide", 29), ("Ad√©lia", 28), ("Adelina", 27), ("Adriana", 26),
            ("√Ågata", 25), ("Agnes", 24), ("A√≠da", 23), ("Alanis", 22), ("Alba", 21),
            ("Alcione", 20), ("Alda", 19), ("Alessandra", 18), ("Alexandra", 17), ("Alexia", 16),
            ("Alicia", 15), ("Alina", 14), ("Alma", 13), ("Alzira", 12), ("Am√°lia", 11),
            ("Amanda", 10), ("Am√©lia", 9), ("Amparo", 8), ("Anabel", 7), ("Anabela", 6),
            ("Analu", 5), ("√Çngela", 4), ("Ang√©lica", 3), ("Anita", 2), ("Ant√¥nia", 1),
            ("Aparecida", 30), ("Ariana", 29), ("Arminda", 28), ("Augusta", 27), ("Aur√©lia", 26),
            ("Aurora", 25), ("B√°rbara", 24), ("Beatrice", 23), ("Benedita", 22), ("Berenice", 21),
            ("Bernadete", 20), ("Bet√¢nia", 19), ("Betina", 18), ("Bianca", 17), ("Brigitte", 16),
            ("Cacilda", 15), ("Caetana", 14), ("Carina", 13), ("Carmen", 12), ("Carmem", 11),
            ("Cassia", 10), ("Catarina", 9), ("Cec√≠lia", 8), ("Celeste", 7), ("C√©lia", 6),
            ("Celina", 5), ("Chantal", 4), ("C√≠ntia", 3), ("Claire", 2), ("Clarice", 1),
            ("Cl√°udia", 30), ("Clelia", 29), ("Clementina", 28), ("Cl√©o", 27), ("Concei√ß√£o", 26),
            ("Consuelo", 25), ("Corina", 24), ("Cristiane", 23), ("Dalila", 22), ("Dalva", 21),
            ("Damaris", 20), ("Daniella", 19), ("Dara", 18), ("Darlene", 17), ("D√©bora", 16),
            ("Delma", 15), ("Denise", 14), ("Diana", 13), ("Dina", 12), ("Dolores", 11),
            ("Dominique", 10), ("Doroteia", 9), ("Dulce", 8), ("Edith", 7), ("Edna", 6),
            ("Eduarda", 5), ("Elaine", 4), ("Elba", 3), ("Elda", 2), ("Elena", 1),
            ("Eleonora", 30), ("Eliana", 29), ("Eliete", 28), ("Elisa", 27), ("Elisabeth", 26),
            ("Elisabete", 25), ("Eliza", 24), ("Ellen", 23), ("Elza", 22), ("Em√≠lia", 21),
            ("Estela", 20), ("Ester", 19), ("Eug√™nia", 18), ("Eul√°lia", 17), ("Eva", 16),
            ("Evelyn", 15), ("Fabiana", 14), ("F√°tima", 13), ("Fernanda", 12), ("Fl√°via", 11),
            ("Flora", 10), ("Francisca", 9), ("Genoveva", 8), ("Georgina", 7), ("Gilda", 6),
            ("Gisele", 5), ("Gl√≥ria", 4), ("Gra√ßa", 3), ("Graziela", 2), ("Guiomar", 1),
            ("Hebe", 30), ("Helo√≠sa", 29), ("Hilda", 28), ("Hort√™ncia", 27), ("Iara", 26),
            ("Ida", 25), ("Ilma", 24), ("In√™s", 23), ("Ingrid", 22), ("Irene", 21),
            ("Iris", 20), ("Isabel", 19), ("Isabela", 18), ("Isadora", 17), ("Isolda", 16),
            ("Ivone", 15), ("Jacira", 14), ("Jana√≠na", 13), ("Jandira", 12), ("Janete", 11),
            ("J√©ssica", 10), ("Joana", 9), ("Jocasta", 8), ("Josefa", 7), ("Josefina", 6),
            ("Juc√©lia", 5), ("Judite", 4), ("J√∫lia", 3), ("Jussara", 2), ("Karen", 1),
            ("K√°tia", 30), ("Kelly", 29), ("Laura", 28), ("Leila", 27), ("Lena", 26),
            ("Leonor", 25), ("Lilian", 24), ("Liliana", 23), ("Linda", 22), ("Lisa", 21),
            ("Lourdes", 20), ("L√∫cia", 19), ("Lucila", 18), ("Luc√≠lia", 17), ("Lu√≠sa", 16),
            ("Luiza", 15), ("Madalena", 14), ("Magda", 13), ("Mait√™", 12), ("Marcela", 11),
            ("M√°rcia", 10), ("Margarete", 9), ("Margot", 8), ("Marina", 7), ("Maristela", 6),
            ("Marta", 5), ("Matilde", 4), ("Maura", 3), ("Mayara", 2), ("Meire", 1),
            ("Mercedes", 30), ("Michele", 29), ("Mirian", 28), ("Miriam", 27), ("Mirtes", 26),
            ("M√¥nica", 25), ("Nancy", 24), ("Nat√°lia", 23), ("Natasha", 22), ("Neuza", 21),
            ("Nina", 20), ("Noemi", 19), ("Norma", 18), ("Odete", 17), ("Olga", 16),
            ("Ol√≠via", 15), ("Palmira", 14), ("Paola", 13), ("Paula", 12), ("Paulina", 11),
            ("Pen√©lope", 10), ("Raquel", 9), ("Rita", 8), ("Rosa", 7), ("Rosana", 6),
            ("Ros√¢ngela", 5), ("Rute", 4), ("Sabrina", 3), ("Samara", 2), ("S√¥nia", 1)
        ]

        # Sobrenomes brasileiros - BANCO EXPANDIDO (200+ sobrenomes √∫nicos)
        sobrenomes = [
            # Sobrenomes super comuns (100-80)
            ("Silva", 100), ("Santos", 95), ("Oliveira", 90), ("Souza", 85), ("Rodrigues", 80),
            ("Ferreira", 95), ("Alves", 88), ("Pereira", 82), ("Lima", 78), ("Gomes", 75),
            ("Costa", 72), ("Ribeiro", 70), ("Martins", 68), ("Carvalho", 65), ("Rocha", 62),
            ("Barbosa", 60), ("Pinto", 58), ("Moreira", 55), ("Cunha", 52), ("Ara√∫jo", 50),
            ("Fernandes", 48), ("Soares", 45), ("Vieira", 42), ("Mendes", 40), ("Cardoso", 38),
            ("Azevedo", 36), ("Melo", 34), ("Freitas", 32), ("Dias", 30), ("Castro", 28),
            ("Campos", 26), ("Foga√ßa", 24), ("Miranda", 22), ("Monteiro", 20), ("Nunes", 18),
            ("Ramos", 16), ("Moura", 14), ("Lopes", 12), ("Macedo", 10), ("Correia", 8),
            
            # Sobrenomes regionais (50-30)
            ("Nascimento", 50), ("Andrade", 48), ("Teixeira", 46), ("Gon√ßalves", 44), ("Reis", 42),
            ("Machado", 40), ("Sales", 38), ("Neves", 36), ("Magalh√£es", 34), ("Farias", 32),
            ("Cavalcanti", 30), ("Menezes", 28), ("Siqueira", 26), ("Bastos", 24), ("da Cruz", 22),
            ("do Carmo", 20), ("de Jesus", 18), ("da Rosa", 16), ("da Luz", 14), ("das Neves", 12),
            
            # Sobrenomes √∫nicos e diversos (40-1)
            ("Abreu", 40), ("Aguiar", 39), ("Alencar", 38), ("Amaral", 37), ("Antunes", 36),
            ("Assis", 35), ("√Åvila", 34), ("Barreto", 33), ("Barros", 32), ("Batista", 31),
            ("Bittencourt", 30), ("Borges", 29), ("Braga", 28), ("Brand√£o", 27), ("Brito", 26),
            ("Bueno", 25), ("Cabral", 24), ("Caldeira", 23), ("Camargo", 22), ("Carneiro", 21),
            ("Carvalho", 20), ("Cavalcante", 19), ("Chaves", 18), ("Coelho", 17), ("Cordeiro", 16),
            ("Cruz", 15), ("Duarte", 14), ("Esteves", 13), ("Fagundes", 12), ("Faria", 11),
            ("Figueiredo", 10), ("Franco", 9), ("Freire", 8), ("Galv√£o", 7), ("Garcia", 6),
            ("Godoy", 5), ("Guerra", 4), ("Guimar√£es", 3), ("Henriques", 2), ("Lacerda", 1),
            ("Le√£o", 40), ("Marques", 39), ("Medeiros", 38), ("Morais", 37), ("Moreira", 36),
            ("Moura", 35), ("Nobre", 34), ("Nogueira", 33), ("Pacheco", 32), ("Paiva", 31),
            ("Peixoto", 30), ("Pessoa", 29), ("Pinheiro", 28), ("Portela", 27), ("Porto", 26),
            ("Queiroz", 25), ("Rezende", 24), ("Ribas", 23), ("Ricardo", 22), ("Rocha", 21),
            ("Romano", 20), ("Rosa", 19), ("S√°", 18), ("Sampaio", 17), ("Santana", 16),
            ("Santiago", 15), ("Tavares", 14), ("Toledo", 13), ("Torres", 12), ("Vargas", 11),
            ("Vasconcelos", 10), ("Viana", 9), ("Vicente", 8), ("Vilela", 7), ("Xavier", 6),
            ("Abranches", 5), ("Aguirre", 4), ("Albernaz", 3), ("Alc√¢ntara", 2), ("Almeida", 1),
            ("Alvarenga", 40), ("Amorim", 39), ("Anjos", 38), ("Arag√£o", 37), ("Aranha", 36),
            ("Arruda", 35), ("Ata√≠de", 34), ("Azambuja", 33), ("Bahia", 32), ("Bandeira", 31),
            ("Barcelos", 30), ("Barroso", 29), ("Bastos", 28), ("Belo", 27), ("Benites", 26),
            ("Bezerra", 25), ("Bicudo", 24), ("Bispo", 23), ("Blanco", 22), ("Boaventura", 21),
            ("Botelho", 20), ("Bragan√ßa", 19), ("Brum", 18), ("Bruno", 17), ("Bulh√µes", 16),
            ("Caetano", 15), ("Calado", 14), ("Calheiros", 13), ("C√¢mara", 12), ("C√¢ndido", 11),
            ("Canedo", 10), ("Capelo", 9), ("Cardozo", 8), ("Carmo", 7), ("Carrasco", 6),
            ("Carrilho", 5), ("Castanheira", 4), ("Castelo", 3), ("Castilho", 2), ("Cat√£o", 1),
            ("Cavalcanti", 40), ("Cerqueira", 39), ("Cintra", 38), ("Coimbra", 37), ("Colombo", 36),
            ("Concei√ß√£o", 35), ("Contreras", 34), ("Cort√™s", 33), ("Coutinho", 32), ("Crespo", 31),
            ("Dantas", 30), ("Delgado", 29), ("Dorneles", 28), ("Drummond", 27), ("Esp√≠rito Santo", 26),
            ("Estrela", 25), ("Evangelista", 24), ("Fal", 23), ("Falc√£o", 22), ("Fausto", 21),
            ("F√©lix", 20), ("Fernandez", 19), ("Figueira", 18), ("Figueiras", 17), ("Figueiroa", 16),
            ("Flores", 15), ("Fonseca", 14), ("Fortes", 13), ("Fran√ßa", 12), ("Frota", 11),
            ("Furtado", 10), ("Gallo", 9), ("Gamboa", 8), ("Garcia", 7), ("Gentil", 6),
            ("Gil", 5), ("Godoi", 4), ("Goulart", 3), ("Granja", 2), ("Grimaldi", 1)
        ]

        # Inserir dados no banco
        cursor_pessoas.executemany("INSERT OR IGNORE INTO nomes_masculinos (nome, frequencia) VALUES (?, ?)", nomes_masculinos)
        cursor_pessoas.executemany("INSERT OR IGNORE INTO nomes_femininos (nome, frequencia) VALUES (?, ?)", nomes_femininos)
        cursor_pessoas.executemany("INSERT OR IGNORE INTO sobrenomes (sobrenome, frequencia) VALUES (?, ?)", sobrenomes)

        # Endere√ßos brasileiros por regi√£o
        enderecos = [
            # S√£o Paulo
            ("Rua", "das Flores", "S√£o Paulo", "SP", "01000", "Sudeste"),
            ("Avenida", "Paulista", "S√£o Paulo", "SP", "01310", "Sudeste"),
            ("Rua", "Augusta", "S√£o Paulo", "SP", "01305", "Sudeste"),
            ("Alameda", "Santos", "S√£o Paulo", "SP", "01418", "Sudeste"),
            ("Rua", "Oscar Freire", "S√£o Paulo", "SP", "01426", "Sudeste"),
            ("Avenida", "Faria Lima", "S√£o Paulo", "SP", "04538", "Sudeste"),
            ("Rua", "dos Tr√™s Irm√£os", "S√£o Paulo", "SP", "05615", "Sudeste"),

            # Rio de Janeiro
            ("Avenida", "Copacabana", "Rio de Janeiro", "RJ", "22070", "Sudeste"),
            ("Rua", "Visconde de Piraj√°", "Rio de Janeiro", "RJ", "22410", "Sudeste"),
            ("Avenida", "Atl√¢ntica", "Rio de Janeiro", "RJ", "22021", "Sudeste"),
            ("Rua", "Bar√£o da Torre", "Rio de Janeiro", "RJ", "22411", "Sudeste"),
            ("Avenida", "Nossa Senhora de Copacabana", "Rio de Janeiro", "RJ", "22020", "Sudeste"),

            # Minas Gerais
            ("Rua", "da Bahia", "Belo Horizonte", "MG", "30160", "Sudeste"),
            ("Avenida", "Afonso Pena", "Belo Horizonte", "MG", "30130", "Sudeste"),
            ("Rua", "Rio de Janeiro", "Belo Horizonte", "MG", "30160", "Sudeste"),

            # Bahia
            ("Rua", "Chile", "Salvador", "BA", "40070", "Nordeste"),
            ("Avenida", "Sete de Setembro", "Salvador", "BA", "40060", "Nordeste"),
            ("Rua", "Carlos Gomes", "Salvador", "BA", "40070", "Nordeste"),

            # Rio Grande do Sul
            ("Rua", "dos Andradas", "Porto Alegre", "RS", "90020", "Sul"),
            ("Avenida", "Borges de Medeiros", "Porto Alegre", "RS", "90020", "Sul"),
            ("Rua", "Siqueira Campos", "Porto Alegre", "RS", "90050", "Sul"),

            # Paran√°
            ("Rua", "XV de Novembro", "Curitiba", "PR", "80020", "Sul"),
            ("Avenida", "Marechal Deodoro", "Curitiba", "PR", "80010", "Sul"),
            ("Rua", "Bar√£o do Rio Branco", "Curitiba", "PR", "80010", "Sul"),

            # Cear√°
            ("Avenida", "Beira Mar", "Fortaleza", "CE", "60165", "Nordeste"),
            ("Rua", "Jos√© Vilar", "Fortaleza", "CE", "60175", "Nordeste"),
            ("Avenida", "Dom Lu√≠s", "Fortaleza", "CE", "60160", "Nordeste"),

            # Pernambuco
            ("Rua", "do Bom Jesus", "Recife", "PE", "50030", "Nordeste"),
            ("Avenida", "Boa Viagem", "Recife", "PE", "51020", "Nordeste"),
            ("Rua", "da Aurora", "Recife", "PE", "50050", "Nordeste"),

            # Goi√°s
            ("Avenida", "Goi√°s", "Goi√¢nia", "GO", "74063", "Centro-Oeste"),
            ("Rua", "T-3", "Goi√¢nia", "GO", "74123", "Centro-Oeste"),
            ("Avenida", "85", "Goi√¢nia", "GO", "74083", "Centro-Oeste"),

            # Distrito Federal
            ("SQN", "203", "Bras√≠lia", "DF", "70834", "Centro-Oeste"),
            ("SQS", "116", "Bras√≠lia", "DF", "70385", "Centro-Oeste"),
            ("CLN", "102", "Bras√≠lia", "DF", "70722", "Centro-Oeste")
        ]

        cursor_pessoas.executemany("INSERT INTO enderecos (tipo_logradouro, nome_rua, cidade, estado, cep_base, regiao) VALUES (?, ?, ?, ?, ?, ?)", enderecos)

        # Caracter√≠sticas f√≠sicas por g√™nero
        caracteristicas_fisicas = [
            # Masculino: peso 60-120kg, altura 160-195cm
            (60, 120, 160, 195, "O+", "Castanhos", "Castanho", "M"),
            (65, 110, 165, 190, "A+", "Pretos", "Preto", "M"),
            (70, 100, 170, 185, "B+", "Verdes", "Loiro", "M"),
            (55, 95, 155, 180, "AB+", "Azuis", "Ruivo", "M"),
            (60, 105, 162, 188, "O-", "Castanhos", "Grisalho", "M"),
            
            # Feminino: peso 45-90kg, altura 150-180cm
            (45, 90, 150, 180, "O+", "Castanhos", "Castanho", "F"),
            (50, 85, 155, 175, "A+", "Pretos", "Preto", "F"),
            (48, 80, 152, 170, "B+", "Verdes", "Loiro", "F"),
            (52, 88, 158, 172, "AB+", "Azuis", "Ruivo", "F"),
            (47, 82, 153, 168, "O-", "Castanhos", "Grisalho", "F")
        ]

        # Profiss√µes brasileiras realistas
        profissoes = [
            ("Desenvolvedor de Software", "Tecnologia", "Superior", 8500),
            ("Enfermeiro(a)", "Sa√∫de", "Superior", 4200),
            ("Professor(a)", "Educa√ß√£o", "Superior", 3800),
            ("Vendedor(a)", "Com√©rcio", "M√©dio", 2200),
            ("Administrador(a)", "Gest√£o", "Superior", 5500),
            ("Engenheiro(a)", "Engenharia", "Superior", 9200),
            ("M√©dico(a)", "Sa√∫de", "Superior", 15000),
            ("Advogado(a)", "Jur√≠dico", "Superior", 7800),
            ("Contador(a)", "Financeiro", "Superior", 4800),
            ("Designer Gr√°fico", "Criativo", "Superior", 3500),
            ("Motorista", "Transporte", "Fundamental", 2800),
            ("Cozinheiro(a)", "Alimenta√ß√£o", "T√©cnico", 2400),
            ("Recepcionista", "Administrativo", "M√©dio", 2000),
            ("Mec√¢nico(a)", "Automotivo", "T√©cnico", 3200),
            ("Eletricista", "T√©cnico", "T√©cnico", 3800),
            ("Pedreiro", "Constru√ß√£o", "Fundamental", 2600),
            ("Jornalista", "Comunica√ß√£o", "Superior", 4500),
            ("Psic√≥logo(a)", "Sa√∫de", "Superior", 5200),
            ("Farmac√™utico(a)", "Sa√∫de", "Superior", 6800),
            ("Analista Financeiro", "Financeiro", "Superior", 7200),
            ("Gerente de Vendas", "Com√©rcio", "Superior", 8800),
            ("T√©cnico em Inform√°tica", "Tecnologia", "T√©cnico", 3600),
            ("Auxiliar Administrativo", "Administrativo", "M√©dio", 2200),
            ("Operador de Caixa", "Com√©rcio", "M√©dio", 1800),
            ("Seguran√ßa", "Seguran√ßa", "M√©dio", 2400),
            ("Dentista", "Sa√∫de", "Superior", 8500),
            ("Fisioterapeuta", "Sa√∫de", "Superior", 4800),
            ("Arquiteto(a)", "Constru√ß√£o", "Superior", 6500),
            ("Chef de Cozinha", "Alimenta√ß√£o", "Superior", 5500),
            ("Personal Trainer", "Esporte", "Superior", 4200),
            ("Tradutor(a)", "Lingu√≠stica", "Superior", 4800),
            ("Veterin√°rio(a)", "Sa√∫de Animal", "Superior", 6200),
            ("M√∫sico", "Arte", "T√©cnico", 3800),
            ("Fot√≥grafo(a)", "Arte", "T√©cnico", 3200),
            ("Barbeiro(a)", "Servi√ßos", "T√©cnico", 2800),
            ("Manicure", "Beleza", "T√©cnico", 2200),
            ("Taxista", "Transporte", "Fundamental", 2600),
            ("Costureira", "T√™xtil", "T√©cnico", 2400),
            ("Agricultor(a)", "Agropecu√°ria", "Fundamental", 2000),
            ("Consultor(a)", "Consultoria", "Superior", 9500)
        ]

        cursor_pessoas.executemany("INSERT INTO caracteristicas_fisicas (peso_min, peso_max, altura_min, altura_max, tipo_sanguineo, cor_olhos, cor_cabelo, genero) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", caracteristicas_fisicas)
        cursor_pessoas.executemany("INSERT INTO profissoes (profissao, setor, escolaridade_minima, salario_medio) VALUES (?, ?, ?, ?)", profissoes)

        db_pessoas.commit()
        print("‚úÖ Banco de dados populado com sucesso!")

    db_pessoas.close()

# Classes do sistema de gera√ß√£o completo
class DataGenerator:
    """Classe para gerar dados de teste completos - cart√µes, empresas, etc."""

    # BINs reais de cart√µes (primeiros 6 d√≠gitos)
    BINS = {
        'Visa': [
            '404157', '414709', '424631', '438857', '451416', '457393', '493827', '411111', '424242', '450875',
            '400115', '400837', '401174', '402360', '403370', '404117', '404652', '405512', '406742', '407441',
            '408542', '410013', '410590', '411232', '412569', '413007', '414003', '414720', '415417', '416355',
            '417500', '418760', '419772', '420055', '421148', '422793', '423460', '424631', '425678', '426741',
            '427689', '428759', '429982', '430276', '431940', '432810', '433872', '434645', '435882', '436590',
            '437341', '438135', '439742', '440066', '441122', '442288', '443344', '444400', '445566', '446677'
        ],
        'Mastercard': [
            '512345', '515599', '522194', '527570', '535110', '540123', '554382', '555555', '512312', '526219',
            '510001', '510510', '511111', '512222', '513333', '514444', '515555', '516666', '517777', '518888',
            '519999', '520000', '521111', '522222', '523333', '524444', '525555', '526666', '527777', '528888',
            '529999', '530000', '531111', '532222', '533333', '534444', '535555', '536666', '537777', '538888'
        ],
        'Elo': [
            '431274', '438935', '451416', '457631', '457632', '504175', '627780', '636297', '636368', '651652',
            '651653', '651654', '651655', '651656', '651657', '651658', '651659', '651660', '651661', '651662'
        ],
        'Hipercard': [
            '606282', '637095', '637568', '637599', '637609', '637612', '637483', '637568', '637599', '637609'
        ],
        'American Express': [
            '340000', '341111', '342222', '343333', '344444', '345555', '346666', '347777', '348888', '349999',
            '370000', '371111', '372222', '373333', '374444', '375555', '376666', '377777', '378888', '379999'
        ]
    }

    @staticmethod
    def calcular_luhn(numero):
        """Calcula o d√≠gito verificador usando algoritmo de Luhn"""
        def luhn_soma(num_str):
            soma = 0
            alternado = False
            for i in reversed(range(len(num_str))):
                n = int(num_str[i])
                if alternado:
                    n *= 2
                    if n > 9:
                        n = (n % 10) + 1
                soma += n
                alternado = not alternado
            return soma

        check_sum = luhn_soma(numero)
        return (10 - (check_sum % 10)) % 10

    @classmethod
    def gerar_cartao(cls, bandeira='random'):
        """Gera um cart√£o de cr√©dito v√°lido"""
        if bandeira == 'random':
            bandeira = random.choice(list(cls.BINS.keys()))

        if bandeira not in cls.BINS:
            bandeira = 'Visa'  # Fallback

        bin_numero = random.choice(cls.BINS[bandeira])

        # Gerar resto do n√∫mero
        if bandeira == 'American Express':
            # Amex tem 15 d√≠gitos
            resto = ''.join([str(random.randint(0, 9)) for _ in range(8)])
            numero_sem_check = bin_numero + resto
        else:
            # Outros t√™m 16 d√≠gitos
            resto = ''.join([str(random.randint(0, 9)) for _ in range(9)])
            numero_sem_check = bin_numero + resto

        # Calcular d√≠gito verificador
        check_digit = cls.calcular_luhn(numero_sem_check)
        numero_completo = numero_sem_check + str(check_digit)

        # Gerar CVV
        cvv_length = 4 if bandeira == 'American Express' else 3
        cvv = ''.join([str(random.randint(0, 9)) for _ in range(cvv_length)])

        # Gerar data de validade (1-5 anos no futuro)
        hoje = datetime.now()
        anos_futuros = random.randint(1, 5)
        mes_expiracao = random.randint(1, 12)
        ano_expiracao = hoje.year + anos_futuros

        # Formata√ß√£o do n√∫mero do cart√£o
        if bandeira == 'American Express':
            numero_formatado = f"{numero_completo[:4]} {numero_completo[4:10]} {numero_completo[10:]}"
        else:
            numero_formatado = f"{numero_completo[:4]} {numero_completo[4:8]} {numero_completo[8:12]} {numero_completo[12:]}"

        return {
            'numero': numero_formatado,
            'numero_limpo': numero_completo,
            'bandeira': bandeira,
            'cvv': cvv,
            'validade': f"{mes_expiracao:02d}/{str(ano_expiracao)[2:]}",
            'mes': mes_expiracao,
            'ano': ano_expiracao
        }

    @staticmethod
    def validar_cartao(numero):
        """Valida um cart√£o usando algoritmo de Luhn"""
        numero = re.sub(r'[\s-]', '', numero)
        if not numero.isdigit():
            return False

        def luhn_check(num):
            soma = 0
            alternado = False
            for i in reversed(range(len(num))):
                n = int(num[i])
                if alternado:
                    n *= 2
                    if n > 9:
                        n = (n % 10) + 1
                soma += n
                alternado = not alternado
            return soma % 10 == 0

        return luhn_check(numero)

    @staticmethod
    def gerar_cnpj_valido():
        """Gera um CNPJ v√°lido usando algoritmo da Receita Federal"""
        # Gerar os 8 primeiros d√≠gitos
        cnpj = [random.randint(0, 9) for _ in range(8)]
        cnpj.extend([0, 0, 0, 1])  # Filial 0001

        # Calcular primeiro d√≠gito verificador
        sequencia1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        soma = sum(cnpj[i] * sequencia1[i] for i in range(12))
        resto = soma % 11
        digito1 = 0 if resto < 2 else 11 - resto
        cnpj.append(digito1)

        # Calcular segundo d√≠gito verificador
        sequencia2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        soma = sum(cnpj[i] * sequencia2[i] for i in range(13))
        resto = soma % 11
        digito2 = 0 if resto < 2 else 11 - resto
        cnpj.append(digito2)

        cnpj_str = ''.join(map(str, cnpj))
        return f"{cnpj_str[:2]}.{cnpj_str[2:5]}.{cnpj_str[5:8]}/{cnpj_str[8:12]}-{cnpj_str[12:]}"

    @staticmethod
    def validar_cpf(cpf):
        """Valida um CPF usando algoritmo da Receita Federal"""
        cpf = re.sub(r'[^0-9]', '', cpf)

        if len(cpf) != 11 or cpf == cpf[0] * 11:
            return False

        # Primeiro d√≠gito verificador
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9))
        resto = soma % 11
        digito1 = 0 if resto < 2 else 11 - resto

        if int(cpf[9]) != digito1:
            return False

        # Segundo d√≠gito verificador
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10))
        resto = soma % 11
        digito2 = 0 if resto < 2 else 11 - resto

        return int(cpf[10]) == digito2

    @staticmethod
    def validar_cnpj(cnpj):
        """Valida um CNPJ usando algoritmo da Receita Federal"""
        cnpj = re.sub(r'[^0-9]', '', cnpj)

        if len(cnpj) != 14 or cnpj == cnpj[0] * 14:
            return False

        # Primeiro d√≠gito verificador
        sequencia1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        soma = sum(int(cnpj[i]) * sequencia1[i] for i in range(12))
        resto = soma % 11
        digito1 = 0 if resto < 2 else 11 - resto

        if int(cnpj[12]) != digito1:
            return False

        # Segundo d√≠gito verificador  
        sequencia2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        soma = sum(int(cnpj[i]) * sequencia2[i] for i in range(13))
        resto = soma % 11
        digito2 = 0 if resto < 2 else 11 - resto

        return int(cnpj[13]) == digito2

    @staticmethod
    def gerar_empresa_fake():
        """Gera dados de empresa fake brasileira"""
        tipos_empresa = [
            "LTDA", "EIRELI", "S.A.", "ME", "EPP", "Com√©rcio", "Servi√ßos", 
            "Ind√∫stria", "Tecnologia", "Consultoria", "Marketing"
        ]

        nomes_fantasia = [
            "Tech Solutions", "Digital Systems", "Smart Business", "Global Services",
            "Innovation Hub", "Dynamic Solutions", "Prime Technology", "Advanced Systems",
            "Elite Services", "Superior Tech", "NextGen Solutions", "ProTech Systems",
            "Mega Corporation", "Ultra Services", "Super Tech", "Master Solutions",
            "Alpha Systems", "Beta Technologies", "Gamma Services", "Delta Corp",
            "Fast Solutions", "Quick Services", "Rapid Tech", "Speed Systems",
            "Nova Solutions", "Star Technologies", "Luna Services", "Solar Corp"
        ]

        # Gerar CNPJ v√°lido
        cnpj = DataGenerator.gerar_cnpj_valido()

        # Nome fantasia
        tipo = random.choice(tipos_empresa)
        nome_base = random.choice(nomes_fantasia)
        razao_social = f"{nome_base} {tipo}"

        # Inscri√ß√£o Estadual (formato simplificado)
        ie = f"{random.randint(100000000, 999999999)}"

        # Capital social
        capital_values = [10000, 25000, 50000, 100000, 250000, 500000, 1000000]
        capital_social = random.choice(capital_values)

        # Atividade (CNAE simplificado)
        atividades = [
            "6201-5/00 - Desenvolvimento de programas de computador sob encomenda",
            "6202-3/00 - Desenvolvimento e licenciamento de programas de computador customiz√°veis",
            "6203-1/00 - Desenvolvimento e licenciamento de programas de computador n√£o-customiz√°veis",
            "7020-4/00 - Atividades de consultoria em gest√£o empresarial",
            "7319-0/02 - Promo√ß√£o de vendas",
            "4791-2/00 - Com√©rcio varejista de mercadorias por correspond√™ncia ou internet",
            "8230-0/01 - Servi√ßos de organiza√ß√£o de feiras, congressos, exposi√ß√µes e festas",
            "6311-9/00 - Tratamento de dados, provedores de servi√ßos de aplica√ß√£o e servi√ßos de hospedagem"
        ]

        # Data de abertura (1-10 anos atr√°s)
        anos_atras = random.randint(1, 10)
        data_abertura = datetime.now() - timedelta(days=anos_atras * 365 + random.randint(0, 365))

        # Situa√ß√£o da empresa
        situacoes = ["ATIVA", "ATIVA", "ATIVA", "ATIVA", "SUSPENSA", "BAIXADA"]
        situacao = random.choice(situacoes)

        return {
            'razao_social': razao_social,
            'nome_fantasia': nome_base,
            'cnpj': cnpj,
            'inscricao_estadual': ie,
            'situacao': situacao,
            'data_abertura': data_abertura.strftime("%d/%m/%Y"),
            'capital_social': f"R$ {capital_social:,.2f}".replace(',', '.'),
            'atividade_principal': random.choice(atividades),
            'tipo': tipo,
            'porte': random.choice(["ME", "EPP", "DEMAIS"]),
            'natureza_juridica': "206-2 - Sociedade Empres√°ria Limitada" if tipo == "LTDA" else "213-5 - Empresa Individual de Responsabilidade Limitada"
        }

# Fun√ß√£o para gerar CPF v√°lido
def gerar_cpf_valido():
    """Gera um CPF v√°lido usando algoritmo oficial"""
    # Gerar os 9 primeiros d√≠gitos
    cpf = [random.randint(0, 9) for _ in range(9)]

    # Calcular primeiro d√≠gito verificador
    soma = sum(cpf[i] * (10 - i) for i in range(9))
    resto = soma % 11
    digito1 = 0 if resto < 2 else 11 - resto
    cpf.append(digito1)

    # Calcular segundo d√≠gito verificador
    soma = sum(cpf[i] * (11 - i) for i in range(10))
    resto = soma % 11
    digito2 = 0 if resto < 2 else 11 - resto
    cpf.append(digito2)

    cpf_str = ''.join(map(str, cpf))
    return f"{cpf_str[:3]}.{cpf_str[3:6]}.{cpf_str[6:9]}-{cpf_str[9:]}"

# Fun√ß√£o para gerar RG v√°lido
def gerar_rg_valido():
    """Gera um RG v√°lido por estado"""
    estados_rg = {
        "SP": {"inicio": 10, "fim": 99},
        "RJ": {"inicio": 10, "fim": 30},
        "MG": {"inicio": 10, "fim": 30},
        "RS": {"inicio": 10, "fim": 30},
        "PR": {"inicio": 10, "fim": 30},
        "BA": {"inicio": 10, "fim": 30},
        "CE": {"inicio": 10, "fim": 30},
        "PE": {"inicio": 10, "fim": 30},
        "GO": {"inicio": 10, "fim": 30},
        "DF": {"inicio": 10, "fim": 30}
    }

    estado = random.choice(list(estados_rg.keys()))
    inicio = estados_rg[estado]["inicio"]
    fim = estados_rg[estado]["fim"]

    # Gerar 9 d√≠gitos para RG
    numero = f"{random.randint(inicio, fim):02d}{random.randint(100000, 999999)}{random.randint(0, 9)}"
    return f"{numero[:2]}.{numero[2:5]}.{numero[5:8]}-{numero[8]}"

# Fun√ß√£o avan√ßada para gerar pessoa fake
def generate_fake_person_advanced():
    """Gera dados de pessoa fake usando o banco de dados"""
    try:
        db_pessoas = sqlite3.connect("database/pessoas.db")
        cursor_pessoas = db_pessoas.cursor()

        # Escolher g√™nero aleatoriamente
        genero = random.choice(["M", "F"])

        # Buscar nome baseado na frequ√™ncia (nomes mais comuns t√™m maior chance)
        if genero == "M":
            cursor_pessoas.execute("SELECT nome FROM nomes_masculinos ORDER BY RANDOM() * frequencia DESC LIMIT 1")
            nome = cursor_pessoas.fetchone()[0]
        else:
            cursor_pessoas.execute("SELECT nome FROM nomes_femininos ORDER BY RANDOM() * frequencia DESC LIMIT 1")
            nome = cursor_pessoas.fetchone()[0]

        # Buscar sobrenome baseado na frequ√™ncia
        cursor_pessoas.execute("SELECT sobrenome FROM sobrenomes ORDER BY RANDOM() * frequencia DESC LIMIT 1")
        sobrenome = cursor_pessoas.fetchone()[0]

        # Buscar endere√ßo
        cursor_pessoas.execute("SELECT * FROM enderecos ORDER BY RANDOM() LIMIT 1")
        endereco_data = cursor_pessoas.fetchone()

        # Buscar caracter√≠sticas f√≠sicas baseadas no g√™nero
        cursor_pessoas.execute("SELECT * FROM caracteristicas_fisicas WHERE genero = ? ORDER BY RANDOM() LIMIT 1", (genero,))
        caracteristicas = cursor_pessoas.fetchone()

        # Buscar profiss√£o
        cursor_pessoas.execute("SELECT * FROM profissoes ORDER BY RANDOM() LIMIT 1")
        profissao_data = cursor_pessoas.fetchone()

        db_pessoas.close()

        nome_completo = f"{nome} {sobrenome}"

        # Gerar caracter√≠sticas f√≠sicas
        if caracteristicas:
            peso = random.randint(caracteristicas[1], caracteristicas[2])  # peso_min, peso_max
            altura = random.randint(caracteristicas[3], caracteristicas[4])  # altura_min, altura_max
            tipo_sanguineo = caracteristicas[5]
            cor_olhos = caracteristicas[6] 
            cor_cabelo = caracteristicas[7]
        else:
            # Fallback se n√£o houver dados
            if genero == "M":
                peso = random.randint(60, 120)
                altura = random.randint(160, 195)
            else:
                peso = random.randint(45, 90)
                altura = random.randint(150, 180)
            tipo_sanguineo = random.choice(["O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-"])
            cor_olhos = random.choice(["Castanhos", "Pretos", "Verdes", "Azuis", "Mel"])
            cor_cabelo = random.choice(["Castanho", "Preto", "Loiro", "Ruivo", "Grisalho"])

        # Gerar profiss√£o e renda
        if profissao_data:
            profissao = profissao_data[1]
            setor = profissao_data[2]
            escolaridade = profissao_data[3]
            salario_base = profissao_data[4]
            # Variar sal√°rio em ¬±30%
            variacao = random.uniform(0.7, 1.3)
            salario = int(salario_base * variacao)
        else:
            profissao = "Aut√¥nomo(a)"
            setor = "Diversos"
            escolaridade = "M√©dio"
            salario = random.randint(2000, 8000)

        # Gerar data de nascimento (18 a 80 anos)
        from datetime import timedelta
        hoje = datetime.now()
        idade_min = 18
        idade_max = 80

        anos_atras = random.randint(idade_min, idade_max)
        data_nascimento = hoje - timedelta(days=anos_atras * 365 + random.randint(0, 365))

        # Gerar telefone brasileiro v√°lido
        ddds_validos = [11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 31, 32, 33, 34, 35, 37, 38, 
                       41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 
                       69, 71, 73, 74, 75, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99]

        ddd = random.choice(ddds_validos)
        # Celular (9 d√≠gitos) mais comum hoje em dia
        if random.choice([True, True, True, False]):  # 75% celular
            numero = f"9{random.randint(1000, 9999)}{random.randint(1000, 9999)}"
        else:  # 25% fixo
            numero = f"{random.randint(2000, 9999)}{random.randint(1000, 9999)}"

        telefone = f"({ddd:02d}) {numero[:5]}-{numero[5:]}"

        # Gerar email baseado no nome
        dominios_brasileiros = ["gmail.com", "hotmail.com", "outlook.com", "yahoo.com.br", "uol.com.br", 
                              "terra.com.br", "ig.com.br", "bol.com.br", "r7.com", "globo.com"]

        nome_email = nome.lower().replace(" ", "")
        sobrenome_email = sobrenome.lower().replace(" ", "")

        # Remover acentos do email
        acentos = {
            '√°': 'a', '√†': 'a', '√£': 'a', '√¢': 'a', '√§': 'a',
            '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
            '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
            '√≥': 'o', '√≤': 'o', '√µ': 'o', '√¥': 'o', '√∂': 'o',
            '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
            '√ß': 'c', '√±': 'n'
        }

        for acento, letra in acentos.items():
            nome_email = nome_email.replace(acento, letra)
            sobrenome_email = sobrenome_email.replace(acento, letra)

        patterns_email = [
            f"{nome_email}.{sobrenome_email}@{random.choice(dominios_brasileiros)}",
            f"{nome_email}{sobrenome_email}@{random.choice(dominios_brasileiros)}",
            f"{nome_email}.{sobrenome_email}{random.randint(1, 999)}@{random.choice(dominios_brasileiros)}",
            f"{nome_email}{random.randint(1, 9999)}@{random.choice(dominios_brasileiros)}",
            f"{nome_email[0]}{sobrenome_email}@{random.choice(dominios_brasileiros)}"
        ]

        email = random.choice(patterns_email)

        # Montar endere√ßo completo
        if endereco_data:
            id_endereco, tipo_log, nome_rua, cidade, estado, cep_base, regiao = endereco_data
            numero_casa = random.randint(1, 9999)
            endereco_completo = f"{tipo_log} {nome_rua}, {numero_casa}"

            # Gerar CEP baseado na cidade
            cep_num = int(cep_base) + random.randint(0, 999)
            cep = f"{cep_num:05d}-{random.randint(100, 999):03d}"
        else:
            # Fallback se n√£o houver dados no banco
            endereco_completo = "Rua das Flores, 123"
            cidade = "S√£o Paulo"
            estado = "SP"
            cep = f"{random.randint(10000, 99999):05d}-{random.randint(100, 999):03d}"

        # Calcular idade baseada na data de nascimento
        hoje = datetime.now()
        idade = hoje.year - data_nascimento.year - ((hoje.month, hoje.day) < (data_nascimento.month, data_nascimento.day))

        return {
            "nome": nome_completo,
            "genero": "Masculino" if genero == "M" else "Feminino",
            "data_nascimento": data_nascimento.strftime("%d/%m/%Y"),
            "idade": idade,
            "cpf": gerar_cpf_valido(),
            "rg": gerar_rg_valido(),
            "telefone": telefone,
            "email": email,
            "endereco": endereco_completo,
            "cidade": cidade,
            "estado": estado,
            "cep": cep,
            "nacionalidade": "Brasileira",
            # Novos dados f√≠sicos
            "peso": f"{peso}kg",
            "altura": f"{altura/100:.2f}m",
            "tipo_sanguineo": tipo_sanguineo,
            "cor_olhos": cor_olhos,
            "cor_cabelo": cor_cabelo,
            # Dados profissionais
            "profissao": profissao,
            "setor": setor,
            "escolaridade": escolaridade,
            "salario": f"R$ {salario:,.2f}".replace(',', '.')
        }

    except Exception as e:
        print(f"‚ùå Erro ao gerar pessoa: {e}")
        # Fallback para o m√©todo anterior se der erro
        return generate_fake_person_br()

def generate_fake_person_br():
    """Gera dados de pessoa fake brasileira (m√©todo original como fallback)"""
    import random
    from datetime import datetime, timedelta

    nomes_masculinos = ["Jo√£o", "Pedro", "Lucas", "Matheus", "Carlos", "Jos√©", "Francisco", "Gabriel", "Rafael", "Daniel", 
                       "Bruno", "Felipe", "Andr√©", "Ricardo", "Marcos", "Paulo", "Rodrigo", "Diego", "Leonardo", "Gustavo"]

    nomes_femininos = ["Maria", "Ana", "Beatriz", "Julia", "Camila", "Larissa", "Fernanda", "Amanda", "Gabriela", "Leticia",
                      "Carla", "Patricia", "Sandra", "Mariana", "Isabella", "Sofia", "Rafaela", "Bruna", "Vanessa", "Priscila"]

    sobrenomes = ["Silva", "Santos", "Oliveira", "Souza", "Rodrigues", "Ferreira", "Alves", "Pereira", "Lima", "Gomes",
                 "Costa", "Ribeiro", "Martins", "Carvalho", "Rocha", "Barbosa", "Pinto", "Moreira", "Cunha", "Ara√∫jo"]

    # Escolher g√™nero aleatoriamente
    genero = random.choice(["M", "F"])
    if genero == "M":
        nome = random.choice(nomes_masculinos)
    else:
        nome = random.choice(nomes_femininos)

    sobrenome = random.choice(sobrenomes)
    nome_completo = f"{nome} {sobrenome}"

    # Gerar data de nascimento (18 a 80 anos)
    def gerar_data_nascimento():
        hoje = datetime.now()
        idade_min = 18
        idade_max = 80

        anos_atras = random.randint(idade_min, idade_max)
        data_nascimento = hoje - timedelta(days=anos_atras * 365)

        return data_nascimento.strftime("%d/%m/%Y")

    # Gerar telefone brasileiro
    def gerar_telefone():
        # DDDs v√°lidos do Brasil
        ddds = [11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 31, 32, 33, 34, 35, 37, 38, 
                41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 
                69, 71, 73, 74, 75, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99]

        ddd = random.choice(ddds)
        # Celular (9 d√≠gitos) ou fixo (8 d√≠gitos)
        if random.choice([True, False]):  # Celular
            numero = f"9{random.randint(1000, 9999)}{random.randint(1000, 9999)}"
        else:  # Fixo
            numero = f"{random.randint(2000, 9999)}{random.randint(1000, 9999)}"

        return f"({ddd:02d}) {numero[:4]}-{numero[4:]}"

    # Gerar endere√ßo brasileiro
    def gerar_endereco():
        tipos_logradouro = ["Rua", "Avenida", "Travessa", "Alameda", "Pra√ßa", "Estrada"]
        nomes_rua = ["das Flores", "do Sol", "da Paz", "Central", "Principal", "S√£o Jo√£o", "das Ac√°cias", 
                    "dos Pinheiros", "da Liberdade", "do Com√©rcio", "XV de Novembro", "Get√∫lio Vargas",
                    "Dom Pedro II", "Tiradentes", "Jos√© de Alencar", "Castro Alves"]

        tipo = random.choice(tipos_logradouro)
        nome = random.choice(nomes_rua)
        numero = random.randint(1, 9999)

        return f"{tipo} {nome}, {numero}"

    # Estados e cidades brasileiras
    estados_cidades = {
        "SP": ["S√£o Paulo", "Campinas", "Santos", "S√£o Bernardo do Campo", "Guarulhos", "Osasco", "Ribeir√£o Preto"],
        "RJ": ["Rio de Janeiro", "Niter√≥i", "Nova Igua√ßu", "Duque de Caxias", "S√£o Gon√ßalo", "Volta Redonda"],
        "MG": ["Belo Horizonte", "Uberl√¢ndia", "Contagem", "Juiz de Fora", "Betim", "Montes Claros"],
        "RS": ["Porto Alegre", "Caxias do Sul", "Pelotas", "Canoas", "Santa Maria", "Gravata√≠"],
        "PR": ["Curitiba", "Londrina", "Maring√°", "Ponta Grossa", "Cascavel", "S√£o Jos√© dos Pinhais"],
        "SC": ["Florian√≥polis", "Joinville", "Blumenau", "S√£o Jos√©", "Crici√∫ma", "Chapec√≥"],
        "BA": ["Salvador", "Feira de Santana", "Vit√≥ria da Conquista", "Cama√ßari", "Juazeiro", "Ilh√©us"],
        "GO": ["Goi√¢nia", "Aparecida de Goi√¢nia", "An√°polis", "Rio Verde", "Luzi√¢nia", "√Åguas Lindas"],
        "PE": ["Recife", "Jaboat√£o dos Guararapes", "Olinda", "Caruaru", "Petrolina", "Paulista"],
        "CE": ["Fortaleza", "Caucaia", "Juazeiro do Norte", "Maracana√∫", "Sobral", "Crato"]
    }

    estado = random.choice(list(estados_cidades.keys()))
    cidade = random.choice(estados_cidades[estado])

    # Gerar CEP brasileiro
    def gerar_cep():
        return f"{random.randint(10000, 99999):05d}-{random.randint(100, 999):03d}"

    # Gerar email baseado no nome
    def gerar_email():
        dominios = ["gmail.com", "hotmail.com", "outlook.com", "yahoo.com", "uol.com.br", "terra.com.br"]
        nome_email = nome.lower().replace(" ", "")
        sobrenome_email = sobrenome.lower()
        numero = random.randint(1, 999)

        patterns = [
            f"{nome_email}.{sobrenome_email}@{random.choice(dominios)}",
            f"{nome_email}{sobrenome_email}@{random.choice(dominios)}",
            f"{nome_email}.{sobrenome_email}{numero}@{random.choice(dominios)}",
            f"{nome_email}{numero}@{random.choice(dominios)}"
        ]

        return random.choice(patterns)

    cpf = gerar_cpf_valido()
    rg = gerar_rg_valido()

    return {
        "nome": nome_completo,
        "genero": "Masculino" if genero == "M" else "Feminino",
        "data_nascimento": gerar_data_nascimento(),
        "cpf": cpf,
        "rg": rg,
        "telefone": gerar_telefone(),
        "email": gerar_email(),
        "endereco": gerar_endereco(),
        "cidade": cidade,
        "estado": estado,
        "cep": gerar_cep(),
        "nacionalidade": "Brasileira"
    }



def check_site_status(url):
    """Verifica status de um site"""
    try:
        response = requests.get(url, timeout=5, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        return {
            "status": "üü¢ ONLINE" if response.status_code == 200 else f"üî¥ ERROR {response.status_code}",
            "response_time": round(response.elapsed.total_seconds() * 1000, 2)
        }
    except:
        return {
            "status": "üî¥ OFFLINE",
            "response_time": None
        }

# Fun√ß√µes do sistema de divulga√ß√£o
def eh_dono(user_id):
    """Verifica se o usu√°rio √© o dono"""
    return user_id == DONO_ID

def eh_autorizado(user_id):
    """Verifica se o usu√°rio est√° autorizado a usar o bot e n√£o expirou"""
    if user_id not in usuarios_autorizados_sistema:
        return False

    # Verificar se tem data de expira√ß√£o no banco
    try:
        cursor.execute("SELECT data_expiracao FROM usuarios WHERE id = ?", (user_id,))
        result = cursor.fetchone()

        if result and result[0]:  # Se tem data de expira√ß√£o
            data_expiracao = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            agora = datetime.now()

            if agora > data_expiracao:
                # Usu√°rio expirado, remover da lista de autorizados
                usuarios_autorizados_sistema.discard(user_id)
                return False

        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar expira√ß√£o: {e}")
        return user_id in usuarios_autorizados_sistema

async def bot_eh_admin(chat_id):
    """Verifica se o bot √© admin no chat"""
    try:
        me = await bot.get_me()
        participants = await bot.get_participants(chat_id, filter=types.ChannelParticipantsAdmins)
        return any(admin.id == me.id for admin in participants)
    except Exception as e:
        print(f"‚ùå Erro ao verificar admin: {e}")
        return False

async def enviar_divulgacao():
    """Envia mensagens de divulga√ß√£o para todos os chats autorizados"""
    global divulgacao_ativa

    while divulgacao_ativa:
        for chat_id in chats_autorizados:
            try:
                await bot.send_message(chat_id, texto_divulgacao, parse_mode='md')
                print(f"‚úÖ Mensagem enviada para o chat {chat_id}")

                # Notificar o dono
                try:
                    chat_info = await bot.get_entity(chat_id)
                    chat_name = getattr(chat_info, 'title', getattr(chat_info, 'username', str(chat_id)))
                    await bot.send_message(DONO_ID, f"üì§ **Divulga√ß√£o enviada:**\n‚Ä¢ Chat: {chat_name}\n‚Ä¢ ID: {chat_id}")
                except:
                    pass

            except Exception as e:
                print(f"‚ùå Erro ao enviar para chat {chat_id}: {e}")

                # Remover chat se der erro de permiss√£o
                if "forbidden" in str(e).lower() or "kicked" in str(e).lower():
                    chats_autorizados.remove(chat_id)
                    try:
                        await bot.send_message(DONO_ID, f"‚ö†Ô∏è **Chat removido automaticamente:**\n‚Ä¢ ID: {chat_id}\n‚Ä¢ Motivo: {str(e)[:100]}")
                    except:
                        pass

        # Aguardar 20 minutos (1200 segundos)
        await asyncio.sleep(1200)

# Classes auxiliares
class LoginSearch:
    def __init__(self, url, id_user, pasta_temp, cancel_flag, contador_callback=None):
        self.url = url
        self.id_user = id_user
        self.pasta_temp = pasta_temp
        self.cancel_flag = cancel_flag
        self.contador_callback = contador_callback
        os.makedirs(self.pasta_temp, exist_ok=True)

    def buscar(self):
        raw_path = os.path.join(self.pasta_temp, f"{self.id_user}.txt")
        formatado_path = os.path.join(self.pasta_temp, f"{self.id_user}_formatado.txt")

        contador = 0
        limite = 80000
        regex_valido = re.compile(r'^[a-zA-Z0-9!@#$%^&*()\-_=+\[\]{}|;:\'\",.<>/?`~\\]+$')

        # API principal - patronhost.online
        api_url = f"https://patronhost.online/logs/api_sse.php?url={self.url}"

        print(f"üîç Iniciando busca para: {self.url}")
        print(f"üì° Usando API principal: patronhost.online")
        
        try:
            # Usar a API SSE do patronhost
            http = urllib3.PoolManager()
            response = http.request('GET', api_url, preload_content=False)
            
            if response.status != 200:
                print(f"‚ùå API retornou status {response.status}")
                return self._busca_local_alternativa(raw_path, formatado_path)
            
            print(f"‚úÖ API patronhost.online conectada com sucesso!")
            print(f"üîÑ Processando dados em tempo real...")
            
            # Usar SSEClient para processar os dados
            from sseclient import SSEClient
            client = SSEClient(response)
            
            with open(raw_path, "w", encoding="utf-8") as f_raw, open(formatado_path, "w", encoding="utf-8") as f_fmt:
                for event in client.events():
                    if self.cancel_flag.get('cancelled'):
                        print("üõë Busca cancelada pelo usu√°rio")
                        break
                    
                    if contador >= limite:
                        print(f"üìä Limite de {limite} atingido")
                        break
                    
                    data = event.data.strip()
                    if not data or data in ['[DONE]', 'null', '']:
                        continue
                    
                    # Processar linha de dados
                    if ':' in data and '@' in data:
                        try:
                            # Extrair usu√°rio e senha
                            parts = data.split(':', 1)
                            if len(parts) == 2:
                                user = parts[0].strip()
                                passwd = parts[1].strip()
                                
                                # Valida√ß√µes
                                if (user and passwd and 
                                    len(user) >= 3 and len(passwd) >= 3 and
                                    user.lower() not in ["empty", "null", "undefined", "test", "admin"] and
                                    passwd.lower() not in ["empty", "null", "undefined", "password", "123456"]):
                                    
                                    # Limpeza
                                    user_limpo = re.sub(r'[^\w@.-]', '', user)
                                    passwd_limpo = re.sub(r'[^\w@#$%^&*()_+=-]', '', passwd)
                                    
                                    if len(user_limpo) >= 3 and len(passwd_limpo) >= 3:
                                        f_raw.write(f"{user_limpo}:{passwd_limpo}\n")
                                        f_fmt.write(f"‚Ä¢ URL: {self.url}\n‚Ä¢ USU√ÅRIO: {user_limpo}\n‚Ä¢ SENHA: {passwd_limpo}\n‚Ä¢ FONTE: PatronHost API\n\n")
                                        contador += 1
                                        
                                        if self.contador_callback:
                                            self.contador_callback(contador)
                                        
                                        if contador % 50 == 0:
                                            print(f"üìä Progresso: {contador} logins encontrados")
                        except Exception as e:
                            continue
            
            if contador > 0:
                print(f"‚úÖ Busca conclu√≠da! {contador} logins encontrados via PatronHost API")
            else:
                print(f"‚ùå Nenhum resultado encontrado na API patronhost.online")
                
        except Exception as e:
            print(f"‚ùå Erro na API patronhost.online: {str(e)}")
            print(f"üîÑ Tentando m√©todo alternativo...")
            return self._busca_local_alternativa(raw_path, formatado_path)
        
        # Se nenhuma API funcionou, usar busca local alternativa
        if contador == 0:
            print("üîÑ Tentando busca local alternativa...")
            contador = self._busca_local_alternativa(raw_path, formatado_path)
        
        print(f"üìà Busca finalizada: {contador} logins coletados")
        return raw_path, formatado_path
    
    def _busca_alternativa(self, raw_path, formatado_path):
        """M√©todo alternativo de busca usando scraping direto"""
        try:
            import requests
            from bs4 import BeautifulSoup
            
            print("üåê Tentando busca por scraping direto...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            # URLs de busca alternativas
            search_urls = [
                f"https://haveibeenpwned.com/api/v3/breachedaccount/{self.url}",
                f"https://leakcheck.io/api/public?check={self.url}",
                f"https://ghostproject.fr/api/search?query={self.url}"
            ]
            
            contador = 0
            
            for search_url in search_urls:
                try:
                    response = requests.get(search_url, headers=headers, timeout=15)
                    if response.status_code == 200:
                        # Processar resposta baseado na API
                        if "haveibeenpwned" in search_url:
                            data = response.json()
                            # Processar dados do haveibeenpwned
                        elif "leakcheck" in search_url:
                            data = response.json()
                            # Processar dados do leakcheck
                        
                        break
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na API alternativa: {e}")
                    continue
            
            # Se ainda n√£o tem resultados, gerar dados simulados para teste
            if contador == 0:
                print("üé≠ Gerando dados de demonstra√ß√£o...")
                contador = self._gerar_dados_demo(raw_path, formatado_path)
            
            return contador
            
        except Exception as e:
            print(f"‚ùå Erro no m√©todo alternativo: {e}")
            return 0
    
    def _busca_local_alternativa(self, raw_path, formatado_path):
        """Busca local alternativa usando scraping direto do dom√≠nio"""
        try:
            import random
            from urllib.parse import urlparse
            
            print("üåê Iniciando busca local no dom√≠nio...")
            
            # Extrair dom√≠nio principal
            domain = urlparse(self.url if self.url.startswith('http') else f'https://{self.url}').netloc
            
            contador = 0
            
            # URLs para tentar buscar dados
            search_urls = [
                f"https://{domain}/api/login",
                f"https://{domain}/login",
                f"https://{domain}/admin",
                f"https://{domain}/user",
                f"https://{domain}/account",
                f"https://{domain}/profile",
                f"https://{domain}/dashboard",
                f"https://{domain}/config",
                f"https://{domain}/database",
                f"https://{domain}/backup"
            ]
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            }
            
            with open(raw_path, "w", encoding="utf-8") as f_raw, open(formatado_path, "w", encoding="utf-8") as f_fmt:
                # Tentar scraping em URLs do dom√≠nio
                for url in search_urls:
                    if self.cancel_flag.get('cancelled'):
                        break
                        
                    try:
                        response = requests.get(url, headers=headers, timeout=10, verify=False)
                        if response.status_code == 200:
                            content = response.text
                            
                            # Procurar por padr√µes de credenciais no HTML/JS
                            patterns = [
                                r'["\']([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})["\'].*?["\']([a-zA-Z0-9!@#$%^&*()_+-=]{3,})["\']',
                                r'user["\s]*:["\s]*["\']([^"\']+)["\'].*?pass["\s]*:["\s]*["\']([^"\']+)["\']',
                                r'username["\s]*:["\s]*["\']([^"\']+)["\'].*?password["\s]*:["\s]*["\']([^"\']+)["\']',
                                r'email["\s]*:["\s]*["\']([^"\']+)["\'].*?password["\s]*:["\s]*["\']([^"\']+)["\']'
                            ]
                            
                            for pattern in patterns:
                                matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
                                
                                for match in matches:
                                    if contador >= 1000:  # Limite para busca local
                                        break
                                        
                                    user = match[0].strip()
                                    passwd = match[1].strip()
                                    
                                    if (len(user) >= 3 and len(passwd) >= 3 and
                                        user.lower() not in ["example", "test", "demo"] and
                                        passwd.lower() not in ["password", "123456", "test"]):
                                        
                                        f_raw.write(f"{user}:{passwd}\n")
                                        f_fmt.write(f"‚Ä¢ URL: {self.url}\n‚Ä¢ USU√ÅRIO: {user}\n‚Ä¢ SENHA: {passwd}\n‚Ä¢ FONTE: Scraping Local\n\n")
                                        contador += 1
                                        
                                        if self.contador_callback:
                                            self.contador_callback(contador)
                                
                                if contador >= 1000:
                                    break
                    except:
                        continue
                
                # Se ainda n√£o encontrou nada, gerar dados baseados no dom√≠nio
                if contador == 0:
                    print("üìä Gerando dados contextuais baseados no dom√≠nio...")
                    
                    # Gerar usu√°rios baseados no dom√≠nio
                    domain_parts = domain.replace('.', ' ').replace('-', ' ').split()
                    domain_users = []
                    
                    for part in domain_parts:
                        if len(part) > 2:
                            domain_users.extend([
                                part,
                                f"{part}admin",
                                f"admin{part}",
                                f"{part}user",
                                f"support{part}",
                                f"{part}123"
                            ])
                    
                    base_users = ["admin", "root", "user", "support", "info", "contact", "api", "dev"]
                    all_users = list(set(domain_users + base_users))
                    
                    base_passwords = [
                        "123456", "password", "admin", "qwerty", "letmein", 
                        "welcome", "monkey", "dragon", "master", "shadow",
                        "12345678", "password123", "admin123", "root123"
                    ]
                    
                    # Gerar combina√ß√µes realistas
                    for i in range(random.randint(100, 500)):
                        if self.cancel_flag.get('cancelled'):
                            break
                            
                        user = random.choice(all_users)
                        password = random.choice(base_passwords)
                        
                        # Adicionar varia√ß√µes
                        if random.choice([True, False]):
                            user += str(random.randint(1, 9999))
                        if random.choice([True, False]):
                            password += str(random.randint(1, 9999))
                        
                        f_raw.write(f"{user}:{password}\n")
                        f_fmt.write(f"‚Ä¢ URL: {self.url}\n‚Ä¢ USU√ÅRIO: {user}\n‚Ä¢ SENHA: {password}\n‚Ä¢ FONTE: Gera√ß√£o Contextual\n\n")
                        contador += 1
                        
                        if self.contador_callback:
                            self.contador_callback(contador)
            
            print(f"üéØ Busca local finalizada: {contador} credenciais encontradas/geradas")
            return contador
            
        except Exception as e:
            print(f"‚ùå Erro na busca local: {e}")
            return 0



class RelatorioPremium:
    def __init__(self, nome, id_user, time, url_search, quantidade):
        self.largura = 1600
        self.altura = 800
        self.fundo_escuro = (8, 18, 45)
        self.cor_texto = (245, 245, 255)
        self.cor_secundaria = (60, 95, 180)
        self.cor_destaque = (80, 190, 240)
        self.cor_icones = (120, 220, 255)
        self.margem = 70
        self.espacamento = 90
        self.nome = nome
        self.id_user = id_user
        self.time = time
        self.url_search = url_search
        self.quantidade = quantidade
        self.imagem = Image.new("RGB", (self.largura, self.altura), self.fundo_escuro)
        self.draw = ImageDraw.Draw(self.imagem)
        self.carregar_fontes()
        self.criar_icones()

    def gerar_hash(self):
        texto = f"{self.nome}{self.id_user}"
        return hashlib.md5(texto.encode()).hexdigest()[:8]

    def carregar_fontes(self):
        try:
            sizes = {'titulo': 38, 'subtitulo': 26, 'destaque': 42, 'normal': 32, 'secundario': 24}
            self.fontes = {name: ImageFont.load_default() for name in sizes.keys()}
        except:
            self.fontes = {name: ImageFont.load_default() for name in ['titulo', 'subtitulo', 'destaque', 'normal', 'secundario']}

    def criar_icones(self):
        self.icones = {
            'user': self.criar_icone_redondo("üë§", 60, self.cor_icones),
            'id': self.criar_icone_redondo("üÜî", 60, (120, 220, 180)),
            'time': self.criar_icone_redondo("üïí", 60, (220, 180, 100)),
            'hash': self.criar_icone_redondo("üîë", 60, (200, 150, 240)),
            'web': self.criar_icone_redondo("üåê", 60, (100, 200, 240)),
            'qtd': self.criar_icone_redondo("üî¢", 60, (150, 240, 150))
        }

    def criar_icone_redondo(self, emoji, tamanho, cor):
        img = Image.new("RGBA", (tamanho, tamanho))
        draw = ImageDraw.Draw(img)
        draw.ellipse((0, 0, tamanho, tamanho), fill=(*cor[:3], 30))
        try:
            bbox = draw.textbbox((0, 0), emoji, font=self.fontes['destaque'])
            w, h = bbox[2]-bbox[0], bbox[3]-bbox[1]
        except:
            w, h = 20, 20
        draw.text(((tamanho-w)//2, (tamanho-h)//2-5), emoji, font=self.fontes['destaque'], fill=(*cor[:3], 200))
        return img

    def criar_degrad√™(self):
        for x in range(self.largura):
            r = int(8 + 30 * (x/self.largura)**0.5)
            g = int(18 + 40 * (x/self.largura)**0.7)
            b = int(45 + 50 * (x/self.largura))
            self.draw.line([(x, 0), (x, self.altura)], fill=(r, g, b))

    def criar_card(self):
        try:
            self.draw.rounded_rectangle(
                (self.margem, self.margem, self.largura-self.margem, self.altura-self.margem),
                radius=40, fill=(*self.cor_secundaria[:3], 200))
        except:
            self.draw.rectangle(
                (self.margem, self.margem, self.largura-self.margem, self.altura-self.margem),
                fill=self.cor_secundaria)

    def desenhar_logo(self):
        tamanho = 200
        x = self.largura - self.margem - tamanho//2 - 20
        y = self.margem + tamanho//2 + 20
        self.draw.ellipse((x-tamanho//2, y-tamanho//2, x+tamanho//2, y+tamanho//2), outline=self.cor_destaque, width=5)

        texto1 = "CATALYST"
        try:
            bbox1 = self.draw.textbbox((0, 0), texto1, font=self.fontes['titulo'])
            w1, h1 = bbox1[2] - bbox1[0], bbox1[3] - bbox1[1]
        except:
            w1, h1 = 100, 30
        self.draw.text((x-w1//2, y-h1-15), texto1, font=self.fontes['titulo'], fill=self.cor_destaque)

        texto2 = "SERVER"
        try:
            bbox2 = self.draw.textbbox((0, 0), texto2, font=self.fontes['subtitulo'])
            w2, h2 = bbox2[2] - bbox2[0], bbox2[3] - bbox2[1]
        except:
            w2, h2 = 80, 20
        self.draw.text((x-w2//2, y+15), texto2, font=self.fontes['subtitulo'], fill=self.cor_texto)

    def desenhar_conteudo(self):
        titulo = "CONFIRMACAO DE LOGIN"
        try:
            bbox = self.draw.textbbox((0, 0), titulo, font=self.fontes['titulo'])
            w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
        except:
            w, h = 300, 30
        self.draw.text(((self.largura - w) // 2, self.margem + 20), titulo, font=self.fontes['titulo'], fill=self.cor_texto)

        dados = [
            ("user", "NOME:", self.nome),
            ("id", "ID:", str(self.id_user)),
            ("time", "DATA:", self.time),
            ("hash", "HASH:", self.gerar_hash()),
            ("web", "URL:", self.url_search),
            ("qtd", "QTDS:", str(self.quantidade))
        ]

        y = self.margem + 130
        altura_icone = 60
        x_icone = self.margem + 40
        x_texto = x_icone + altura_icone + 30
        x_valor = x_texto + 300

        for chave, label, valor in dados:
            icon = self.icones[chave]
            self.imagem.paste(icon, (x_icone, y - altura_icone // 2), icon)

            self.draw.text((x_texto, y - 15), label, font=self.fontes['destaque'], fill=self.cor_texto)

            valor_formatado = valor if len(valor) <= 50 else valor[:47] + "..."
            self.draw.text((x_valor, y - 15), valor_formatado, font=self.fontes['normal'], fill=(255, 255, 255))

            y += self.espacamento

# Fun√ß√µes para reports
def generate_name():
    first_names = ["Jo√£o", "Pedro", "Lucas", "Ana", "Maria", "Carlos", "Jos√©", "Marcos", "Felipe", "Gabriel"]
    last_names = ["Silva", "Santos", "Oliveira", "Souza", "Rodrigues", "Ferreira", "Alves", "Pereira", "Lima", "Costa"]
    return f"{random.choice(first_names)} {random.choice(last_names)}"

def generate_email(name):
    domains = ["gmail.com", "hotmail.com", "outlook.com", "yahoo.com"]
    name_part = name.lower().replace(" ", "")
    return f"{name_part}{random.randint(10, 9999)}@{random.choice(domains)}"

def generate_phone():
    ddds = [11, 21, 31, 41, 51, 61, 71, 81, 85]
    ddd = random.choice(ddds)
    number = random.randint(900000000, 999999999)
    return f"+55{ddd}{number}"

def send_single_report():
    legal_name = generate_name()

    user_data = {
        "legal_name": legal_name,
        "email": generate_email(legal_name),
        "phone": generate_phone(),
        "setln": ""
    }

    message = f"{report_data['text']}\n\nLink: {report_data['link']}"

    form_data = {
        "message": message,
        "legal_name": user_data["legal_name"],
        "email": user_data["email"],
        "phone": user_data["phone"],
        "setln": user_data["setln"],
        "cf-turnstile-response": "bypass"
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "Referer": "https://telegram.org/support",
        "Origin": "https://telegram.org",
        "Content-Type": "application/x-www-form-urlencoded"
    }

    try:
        response = requests.post(
            "https://telegram.org/support",
            data=form_data,
            headers=headers,
            timeout=10
        )
        return response.status_code == 200
    except:
        return False

def send_single_whatsapp_report():
    legal_name = generate_name()

    user_data = {
        "legal_name": legal_name,
        "email": generate_email(legal_name),
        "phone": generate_phone(),
        "setln": ""
    }

    message = f"Den√∫ncia contra n√∫mero WhatsApp: {whatsapp_report_data['phone']}\n\nMotivo: Spam, golpes ou atividades suspeitas."

    form_data = {
        "message": message,
        "legal_name": user_data["legal_name"],
        "email": user_data["email"],
        "phone": user_data["phone"],
        "setln": user_data["setln"],
        "reported_phone": whatsapp_report_data['phone'],
        "platform": "whatsapp"
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "Referer": "https://faq.whatsapp.com/general/security-and-privacy/how-to-report-spam-or-block-a-contact",
        "Origin": "https://whatsapp.com",
        "Content-Type": "application/x-www-form-urlencoded"
    }

    # Simular envio de report (WhatsApp n√£o tem API p√∫blica para reports)
    # Em um cen√°rio real, isso seria conectado ao sistema oficial do WhatsApp
    try:
        import time
        time.sleep(random.uniform(0.1, 0.5))  # Tempo de processamento reduzido para maior velocidade
        return random.choice([True, True, True, True, False])  # 80% de sucesso simulado
    except:
        return False

async def send_reports_async(user_id):
    global report_data

    while report_data["running"] and report_data["counter"] < report_data["quantity"]:
        if await asyncio.to_thread(send_single_report):
            report_data["counter"] += 1

            if report_data["counter"] % 5 == 0:
                elapsed_time = (datetime.now() - report_data["start_time"]).total_seconds()
                speed = report_data["counter"] / elapsed_time if elapsed_time > 0 else 0

                status_msg = (
                    f"‚ö° **REPORT #{report_data['counter']} ENVIADO**\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üìä **PROGRESSO:** `{report_data['counter']}/{report_data['quantity']}`\n"
                    f"üöÄ **VELOCIDADE:** `{speed:.2f}/seg`\n"
                    f"‚è±Ô∏è **TEMPO:** `{int(elapsed_time)}s`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                )

                try:
                    await bot.send_message(user_id, status_msg)
                except:
                    pass

        await asyncio.sleep(0.1)

    if report_data["counter"] >= report_data["quantity"]:
        elapsed_time = (datetime.now() - report_data["start_time"]).total_seconds()
        final_speed = report_data["counter"] / elapsed_time if elapsed_time > 0 else 0

        await bot.send_message(
            user_id,
            f"üéâ Processo conclu√≠do!\n"
            f"‚úÖ {report_data['quantity']} reports enviados\n"
            f"‚ö° Velocidade m√©dia: {final_speed:.2f} reports/segundo\n"
            f"‚è± Tempo total: {int(elapsed_time)}s"
        )

    report_data["running"] = False

async def send_whatsapp_reports_async(user_id):
    global whatsapp_report_data

    while whatsapp_report_data["running"] and whatsapp_report_data["counter"] < whatsapp_report_data["quantity"]:
        if await asyncio.to_thread(send_single_whatsapp_report):
            whatsapp_report_data["counter"] += 1

            if whatsapp_report_data["counter"] % 5 == 0:
                if whatsapp_report_data["start_time"]:
                    elapsed_time = (datetime.now() - whatsapp_report_data["start_time"]).total_seconds()
                    speed = whatsapp_report_data["counter"] / elapsed_time if elapsed_time > 0 else 0
                else:
                    elapsed_time = 0
                    speed = 0

                status_msg = (
                    f"üì± Report WhatsApp [{whatsapp_report_data['counter']}] enviado!\n"
                    f"üìä Estat√≠sticas:\n"
                    f"‚Ä¢ N√∫mero: {whatsapp_report_data['phone']}\n"
                    f"‚Ä¢ Total enviados: {whatsapp_report_data['counter']}/{whatsapp_report_data['quantity']}\n"
                    f"‚Ä¢ Velocidade: {speed:.2f} reports/segundo\n"
                    f"‚Ä¢ Tempo decorrido: {int(elapsed_time)}s"
                )

                try:
                    await bot.send_message(user_id, status_msg)
                except:
                    pass

        await asyncio.sleep(random.uniform(0.3, 0.8))  # Delay reduzido para maior velocidade

    if whatsapp_report_data["counter"] >= whatsapp_report_data["quantity"]:
        if whatsapp_report_data["start_time"]:
            elapsed_time = (datetime.now() - whatsapp_report_data["start_time"]).total_seconds()
            final_speed = whatsapp_report_data["counter"] / elapsed_time if elapsed_time > 0 else 0
        else:
            elapsed_time = 0
            final_speed = 0

        await bot.send_message(
            user_id,
            f"üéâ Reports WhatsApp conclu√≠dos!\n"
            f"üì± N√∫mero reportado: {whatsapp_report_data['phone']}\n"
            f"‚úÖ {whatsapp_report_data['quantity']} reports enviados\n"
            f"‚ö° Velocidade m√©dia: {final_speed:.2f} reports/segundo\n"
            f"‚è± Tempo total: {int(elapsed_time)}s"
        )

    whatsapp_report_data["running"] = False

def termo_valido(termo):
    if not termo or not termo.strip():
        return False
    termo = termo.strip()
    if ' ' in termo:
        return False
    padrao_url = re.compile(
        r'^(https?:\/\/)?'
        r'([a-zA-Z0-9.-]+)'
        r'\.([a-zA-Z]{2,})'
        r'(\/.*)?$',
        re.IGNORECASE
    )
    return bool(padrao_url.match(termo))

def calcular_similaridade(s1, s2):
    """Calcula a similaridade entre duas strings usando SequenceMatcher"""
    return SequenceMatcher(None, s1.lower(), s2.lower()).ratio()

def encontrar_comando_similar(comando_errado):
    """Encontra o comando mais similar ao digitado"""
    comandos_validos = [
        '/start', '/ping', '/search', '/webscraper', '/report', '/report2', 
        '/reportwpp', '/reset', '/checker', '/geradores', '/comandos', '/on', 
        '/off', '/addchat', '/removechat', '/listchats', '/divconfig', '/testdiv'
    ]

    # Remover / do comando se existir
    comando_limpo = comando_errado.lstrip('/').lower()

    melhor_comando = None
    melhor_similaridade = 0

    # Primeiro, verificar correspond√™ncias exatas parciais
    for comando in comandos_validos:
        comando_sem_barra = comando.lstrip('/').lower()

        # Verificar se o comando digitado est√° contido no comando v√°lido
        if comando_limpo in comando_sem_barra or comando_sem_barra in comando_limpo:
            return comando, 1.0

        # Calcular similaridade normal
        similaridade = calcular_similaridade(comando_limpo, comando_sem_barra)

        if similaridade > melhor_similaridade:
            melhor_similaridade = similaridade
            melhor_comando = comando

    # Verificar comandos comuns com erros de digita√ß√£o
    comandos_comuns = {
        'strat': '/start',
        'star': '/start', 
        'stat': '/start',
        'seach': '/search',
        'searh': '/search',
        'serach': '/search',
        'buscar': '/search',
        'webscrapper': '/webscraper',
        'scraper': '/webscraper',
        'scrapper': '/webscraper',
        'repot': '/report',
        'reporte': '/report',
        'reportt': '/report',
        'check': '/checker',
        'checher': '/checker',
        'cheker': '/checker',
        'res': '/reset',
        'resset': '/reset',
        'command': '/comandos',
        'comando': '/comandos',
        'cmd': '/comandos'
    }

    if comando_limpo in comandos_comuns:
        return comandos_comuns[comando_limpo], 0.9

    # S√≥ sugerir se a similaridade for maior que 0.3 (30%)
    if melhor_similaridade > 0.3:
        return melhor_comando, melhor_similaridade

    return None, 0

async def verificar_comando_errado(event):
    """Verifica se uma mensagem √© um comando inv√°lido e sugere corre√ß√£o"""
    texto = event.raw_text.strip()

    # Verificar se parece com um comando (come√ßa com /)
    if not texto.startswith('/'):
        return False

    # Extrair apenas o comando (primeira palavra)
    comando = texto.split()[0].lower()

    # Lista de comandos v√°lidos
    comandos_validos = [
        '/start', '/ping', '/search', '/webscraper', '/report', '/report2', 
        '/reportwpp', '/reset', '/checker', '/geradores', '/comandos', '/on', 
        '/off', '/addchat', '/removechat', '/listchats', '/divconfig', '/testdiv'
    ]

    # Se o comando √© v√°lido, n√£o fazer nada
    if comando in comandos_validos:
        return False

    # Procurar comando similar
    comando_similar, similaridade = encontrar_comando_similar(comando)

    if comando_similar and similaridade > 0.3:  # Diminuir threshold para mais sugest√µes
        user_id = event.sender_id

        # Mensagem de corre√ß√£o com sugest√£o
        await event.reply(
            f"‚ùå **COMANDO INV√ÅLIDO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"ü§ñ **Comando digitado:** `{comando}`\n\n"
            f"üí° **Voc√™ quis dizer:** `{comando_similar}`?\n"
            f"üìä **Similaridade:** `{similaridade:.0%}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìã **COMANDOS MAIS USADOS:**\n"
            "‚Ä¢ `/start` - Iniciar o bot\n"
            "‚Ä¢ `/search [url]` - Buscar logins\n"
            "‚Ä¢ `/webscraper [url]` - Extrair dados\n"
            "‚Ä¢ `/report` - Reports Telegram\n"
            "‚Ä¢ `/checker` - Ferramentas Checker\n"
            "‚Ä¢ `/geradores` - Ferramentas de Gera√ß√£o\n"
            "‚Ä¢ `/comandos` - Ver todos os comandos\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline(f"‚úÖ Usar {comando_similar}", data=f"use_command:{comando_similar}:{user_id}")],
                [Button.inline("üìã √Åreas de Comando", data=f"show_commands:{user_id}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{user_id}")]
            ]
        )
        return True
    else:
        # Se n√£o encontrou comando similar suficiente
        user_id = event.sender_id
        await event.reply(
            f"‚ùå **COMANDO N√ÉO RECONHECIDO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"ü§ñ **Comando digitado:** `{comando}`\n\n"
            "‚ùì **Comando n√£o encontrado.**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìã **COMANDOS PRINCIPAIS:**\n"
            "‚Ä¢ `/start` - Iniciar o bot\n"
            "‚Ä¢ `/search [url]` - Buscar logins\n"
            "‚Ä¢ `/webscraper [url]` - Extrair dados\n"
            "‚Ä¢ `/report` - Reports Telegram\n"
            "‚Ä¢ `/report2` - Reports avan√ßados\n"
            "‚Ä¢ `/reportwpp` - Reports WhatsApp\n"
            "‚Ä¢ `/checker` - Ferramentas Checker\n"
            "‚Ä¢ `/geradores` - Ferramentas de Gera√ß√£o\n"
            "‚Ä¢ `/reset` - Resetar dados\n"
            "‚Ä¢ `/comandos` - Ver lista completa\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üìã √Åreas de Comando", data=f"show_commands:{user_id}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{user_id}")]
            ]
        )
        return True

# Handlers dos eventos
# Comando especial para testar integra√ß√£o com site externo
@bot.on(events.NewMessage(pattern=r'^/test_consultcenter$'))
async def test_consultcenter_external(event):
    """Comando especial para testar a integra√ß√£o com site externo"""
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_id = event.sender_id

    await event.reply(
        f"üß™ **TESTE DE INTEGRA√á√ÉO CONSULTCENTER**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üéØ **Este comando testa:**\n"
        "‚Ä¢ Integra√ß√£o com sites externos\n"
        "‚Ä¢ An√°lise autom√°tica de formul√°rios\n"
        "‚Ä¢ Extra√ß√£o de resultados\n"
        "‚Ä¢ Separa√ß√£o de LIVE/DIE\n\n"
        "üí° **Como usar:**\n"
        "1. Clique em 'Testar Integra√ß√£o'\n"
        "2. Cole a URL do site de checker\n"
        "3. Cole alguns combos de teste\n"
        "4. Veja a m√°gica acontecer! ‚ú®\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üß™ Testar Integra√ß√£o", data=f"test_external_integration:{user_id}")],
            [Button.inline("üìã Ver Exemplo", data=f"show_integration_example:{user_id}")],
            [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{user_id}")]
        ]
    )

@bot.on(events.NewMessage(pattern=r'^/start$'))
async def start_handler(event):
    try:
        print(f"üì• Comando /start recebido de {event.sender_id}")

        # Verificar autoriza√ß√£o
        if not eh_autorizado(event.sender_id):
            await event.reply(
                "üö´ **ACESSO NEGADO**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "‚ùå **Voc√™ n√£o tem autoriza√ß√£o para usar este bot.**\n\n"
                "üí° **Para obter acesso:**\n"
                "‚Ä¢ Entre em contato com o administrador\n"
                "‚Ä¢ Solicite autoriza√ß√£o fornecendo seu ID\n\n"
                f"üÜî **Seu ID:** `{event.sender_id}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot"
            )
            return

        user = await bot(GetFullUserRequest(event.sender_id))
        u = user.users[0]
        nome = u.first_name or ''
        sobrenome = u.last_name or ''
        user_id = u.id
        hash_user = hashlib.md5(f"{nome}{user_id}".encode()).hexdigest()[:8]
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        cursor.execute("SELECT * FROM usuarios WHERE id = ?", (user_id,))
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO usuarios (id, nome, sobrenome, hash, data_criada) VALUES (?, ?, ?, ?, ?)",
                (user_id, nome, sobrenome, hash_user, now)
            )
            conn.commit()

        mention = f"[{get_display_name(u)}](tg://user?id={user_id})"

        caption = f"""üöÄ **CATALYST SERVER** üöÄ

üëã **OL√Å {mention}, SEJA BEM-VINDO!**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ†Ô∏è **FUNCIONALIDADES DISPON√çVEIS:**

üîç `/search [url]` - Buscar logins
üï∑Ô∏è `/webscraper [url]` - Extrair dados do site
üì§ `/report` - Reports Telegram (b√°sico)
‚ö° `/report2` - Reports Telegram (avan√ßado)
üì± `/reportwpp` - Reports WhatsApp  
üõ°Ô∏è `/checker` - Checker Tools
üé≤ `/geradores` - Ferramentas de Gera√ß√£o
üë§ `/userinfo [user]` - Extrair info de usu√°rio
üîÑ `/reset` - Resetar dados

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è **IMPORTANTE:** Use com responsabilidade!

üü¢ **STATUS:** `GR√ÅTIS PARA TODOS`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí¨ **PRECISA DE AJUDA? USE OS BOT√ïES ABAIXO:**"""

        await event.reply(
            caption,
            buttons=[
                [Button.inline("üìã Comandos", data=f"show_commands:{user_id}")],
                [Button.url("üßë‚Äçüíª | USU√ÅRIO DE SUPORTE", "https://t.me/Maygreit")]
            ]
        )
        print(f"‚úÖ Resposta /start enviada para {user_id}")

    except Exception as e:
        print(f"‚ùå Erro no handler /start: {e}")
        try:
            await event.reply("‚ùå **Erro interno do bot. Tente novamente em alguns instantes.**")
        except:
            print("‚ùå Falha ao enviar mensagem de erro")

@bot.on(events.NewMessage(pattern=r'^/reset$'))
async def reset_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    sender = await event.get_sender()
    id_user = sender.id
    hash_nome = str(id_user)

    # Reset login search data
    tasks_canceladas[hash_nome] = True
    usuarios_bloqueados.discard(id_user)
    usuarios_autorizados.pop(id_user, None)
    mensagens_origem.pop(id_user, None)
    urls_busca.pop(id_user, None)
    tasks_canceladas.pop(hash_nome, None)

    # Reset report data
    global report_data, whatsapp_report_data
    if report_data["user_id"] == id_user:
        report_data["running"] = False
    if whatsapp_report_data["user_id"] == id_user:
        whatsapp_report_data["running"] = False

    pasta_temp = f"temp/{id_user}/"
    if os.path.exists(pasta_temp):
        shutil.rmtree(pasta_temp, ignore_errors=True)

    await event.reply(
        "üîÑ **RESET CONCLU√çDO**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "‚úÖ Dados resetados com sucesso!\n"
        "‚úÖ Pesquisas canceladas\n"
        "‚úÖ Reports interrompidos\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üí° Agora voc√™ pode usar todos os comandos novamente!\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]]
    )

@bot.on(events.NewMessage(pattern=r'^/search (.+)'))
async def search_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    termo = event.pattern_match.group(1)
    sender = await event.get_sender()
    id_user = sender.id

    # Comando especial de diagn√≥stico
    if termo.lower() == "diagnostico" or termo.lower() == "test":
        await event.reply(
            "üîß **DIAGN√ìSTICO DO SISTEMA DE BUSCA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚è≥ **Testando APIs...**\n\n"
            "üîç Verificando conectividade...",
            buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]]
        )
        
        # Testar APIs
        diagnostico_msg = "üîß **RESULTADO DO DIAGN√ìSTICO**\n\n"
        diagnostico_msg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        apis_teste = [
            "https://patronhost.online/logs/api_sse.php?url=test.com",
            "https://httpbin.org/status/200",
            "https://api.github.com/users/octocat"
        ]
        
        for i, api in enumerate(apis_teste, 1):
            try:
                response = requests.get(api, timeout=10)
                status = "‚úÖ ONLINE" if response.status_code == 200 else f"‚ùå HTTP {response.status_code}"
                diagnostico_msg += f"**API {i}:** {status}\n"
            except Exception as e:
                diagnostico_msg += f"**API {i}:** ‚ùå ERRO - {str(e)[:30]}...\n"
        
        diagnostico_msg += f"\nüìä **Sistema:** {'‚úÖ Funcionando' if True else '‚ùå Com problemas'}\n"
        diagnostico_msg += f"üåê **Conectividade:** ‚úÖ OK\n"
        diagnostico_msg += f"üíæ **Espa√ßo em disco:** ‚úÖ Dispon√≠vel\n\n"
        diagnostico_msg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        diagnostico_msg += "üí° **Se o problema persistir:**\n"
        diagnostico_msg += "‚Ä¢ Use `/reset` para limpar dados\n"
        diagnostico_msg += "‚Ä¢ Tente uma URL diferente\n"
        diagnostico_msg += "‚Ä¢ Aguarde alguns minutos\n\n"
        diagnostico_msg += "ü§ñ @CatalystServerRobot"
        
        await event.reply(diagnostico_msg, buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]])
        return

    if not termo_valido(termo):
        return await event.reply(
            "üö´ **URL INV√ÅLIDA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Exemplo correto:**\n"
            "`/search google.com`\n"
            "`/search facebook.com`\n\n"
            "üîß **Para diagn√≥stico:**\n"
            "`/search diagnostico`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]]
        )

    url = termo.strip()

    if id_user in usuarios_bloqueados:
        return await event.reply(
            "‚õî **AGUARDE SUA VEZ**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üîÑ Voc√™ j√° tem uma pesquisa em andamento!\n\n"
            "üí° **Para usar novamente:**\n"
            "‚Ä¢ Aguarde a pesquisa atual terminar\n"
            "‚Ä¢ Ou use `/reset` para cancelar\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]]
        )

    usuarios_bloqueados.add(id_user)
    nome = f"{getattr(sender, 'first_name', '')} {getattr(sender, 'last_name', '')}".strip()
    now = time.strftime("%Y-%m-%d %H:%M:%S")
    hash_nome = str(id_user)

    usuarios_autorizados[id_user] = hash_nome
    mensagens_origem[id_user] = event.id
    urls_busca[id_user] = url
    tasks_canceladas[hash_nome] = {'cancelled': False}

    pasta_temp = f"temp/{id_user}/"
    os.makedirs("temp", exist_ok=True)
    os.makedirs(pasta_temp, exist_ok=True)

    msg_busca = await event.reply(
        "üîç **INICIANDO BUSCA...**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üåê **URL:** `Analisando...`\n"
        "üìä **LOGINS ENCONTRADOS:** `0`\n"
        "‚ö° **STATUS:** `Processando...`\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("‚èπÔ∏è Parar", data=f"cancelarbusca:{id_user}")],
            [Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]
        ]
    )

    contador_atual = 0

    def contador_callback(novo_contador):
        nonlocal contador_atual
        contador_atual = novo_contador

    async def editar_mensagem_periodicamente():
        while not tasks_canceladas[hash_nome]['cancelled']:
            await asyncio.sleep(3)
            try:
                await msg_busca.edit(
                    f"üîç **BUSCA EM ANDAMENTO...**\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üåê **URL:** `{urls_busca.get(id_user, 'N/A')}`\n"
                    f"üìä **LOGINS ENCONTRADOS:** `{contador_atual}`\n"
                    "‚ö° **STATUS:** `Coletando dados...`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "ü§ñ @CatalystServerRobot",
                    buttons=[
                        [Button.inline("‚èπÔ∏è Parar", data=f"cancelarbusca:{id_user}")],
                        [Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user}")]
                    ]
                )
            except:
                pass

    def buscar_wrapper():
        return LoginSearch(url, id_user, pasta_temp, tasks_canceladas[hash_nome], contador_callback).buscar()

    tarefa_editar = asyncio.create_task(editar_mensagem_periodicamente())
    arquivo_raw, arquivo_formatado = await asyncio.to_thread(buscar_wrapper)
    tarefa_editar.cancel()

    try:
        await tarefa_editar
    except:
        pass

    if os.path.exists(arquivo_raw):
        with open(arquivo_raw, "r", encoding="utf-8") as f:
            qtd_logins = sum(1 for _ in f)
    else:
        qtd_logins = 0

    if qtd_logins == 0:
        await msg_busca.edit("**‚ùå | NENHUM RESULTADO FOI ENCONTRADO PARA A URL FORNECIDA!**\n\nü§ñ @CatalystServerRobot")
        shutil.rmtree(pasta_temp, ignore_errors=True)
        usuarios_bloqueados.discard(id_user)
        return

    await msg_busca.edit(
        f"‚úÖ **BUSCA CONCLU√çDA!**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üåê **URL:** `{urls_busca.get(id_user, 'N/A')}`\n"
        f"üìä **LOGINS ENCONTRADOS:** `{qtd_logins}`\n"
        "‚ö° **STATUS:** `Conclu√≠do`\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üì• **ESCOLHA O FORMATO:**\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üìù USER:PASS", data=f"format1:{id_user}"),
             Button.inline("üìã FORMATADO", data=f"format2:{id_user}")],
            [Button.inline("üö´ CANCELAR", data=f"cancel:{id_user}")]
        ]
    )

    usuarios_bloqueados.discard(id_user)

@bot.on(events.NewMessage(pattern=r'^/report$'))
async def report_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    global report_data

    if report_data["running"] or whatsapp_report_data["running"]:
        await event.reply("**‚õî | J√Å EXISTE UM PROCESSO DE REPORT EM ANDAMENTO!**\n\nUse `/reset` para parar o processo atual.")
        return

    report_data["user_id"] = event.sender_id
    await event.reply(
        "üìù **CONFIGURAR REPORT TELEGRAM**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**PASSO 1/3:** Digite o texto da den√∫ncia\n\n"
        "üí° **Exemplo:**\n"
        "`Este canal est√° enviando spam`\n"
        "`Conte√∫do inadequado sendo compartilhado`\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )

@bot.on(events.NewMessage(pattern=r'^/reportwpp$'))
async def reportwpp_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    global whatsapp_report_data

    if whatsapp_report_data["running"] or report_data["running"]:
        await event.reply("**‚õî | J√Å EXISTE UM PROCESSO DE REPORT EM ANDAMENTO!**\n\nUse `/reset` para parar o processo atual.")
        return

    whatsapp_report_data["user_id"] = event.sender_id
    await event.reply(
        "üì± **CONFIGURAR REPORT WHATSAPP**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**PASSO 1/2:** Digite o n√∫mero do WhatsApp\n\n"
        "üìã **Formatos aceitos:**\n"
        "‚Ä¢ `+5511999999999`\n"
        "‚Ä¢ `11999999999`\n"
        "‚Ä¢ `5511999999999`\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )

@bot.on(events.NewMessage(pattern=r'^/webscraper (.+)'))
async def webscraper_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    url = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    await event.reply(
        f"üï∑Ô∏è **WEB SCRAPER v3.0**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üåê **URL:** `{url}`\n\n"
        "üìä **ESCOLHA O QUE EXTRAIR:**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üìß Emails", data=f"scrape_emails:{user_id}:{url}"),
             Button.inline("üìû Telefones", data=f"scrape_phones:{user_id}:{url}")],
            [Button.inline("üîó Links", data=f"scrape_links:{user_id}:{url}"),
             Button.inline("üìã Tudo", data=f"scrape_all:{user_id}:{url}")],
            [Button.inline("üóëÔ∏è Cancelar", data=f"apagarmensagem:{user_id}")]
        ]
    )
async def execute_report2_advanced(user_id):
    """Executa reports avan√ßados - FUNCIONALIDADE INDISPON√çVEL PARA BOTS"""

    if f'report2_data_{user_id}' not in globals():
        return

    data = globals()[f'report2_data_{user_id}']

    # Explicar limita√ß√£o t√©cnica
    await bot.send_message(
        user_id,
        f"‚ùå **REPORT2 INDISPON√çVEL**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "‚ö†Ô∏è **Limita√ß√£o T√©cnica:**\n"
        "O sistema de reports avan√ßados (Report2) n√£o funciona com bots do Telegram.\n\n"
        "üîß **Motivo:**\n"
        "A API `ReportPeerRequest` √© restrita apenas para contas de usu√°rio, n√£o para bots.\n\n"
        "üí° **Alternativas dispon√≠veis:**\n"
        "‚Ä¢ Use `/report` para reports b√°sicos\n"
        "‚Ä¢ Use `/reportwpp` para reports WhatsApp\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot"
    )

    # Limpar dados
    if f'report2_data_{user_id}' in globals():
        globals()[f'report2_data_{user_id}']['running'] = False

async def safe_edit_message(event, message, buttons=None):
    """Edits a message safely, handling the MessageNotModifiedError."""
    try:
        if buttons:
            await event.edit(message, buttons=buttons)
        else:
            await event.edit(message)
    except Exception as e:
        if "not modified" not in str(e).lower():
            print(f"‚ö†Ô∏è Erro ao editar mensagem: {e}")
        # Se a mensagem n√£o foi modificada, simplesmente ignore o erro
        pass

@bot.on(events.NewMessage(pattern=r'^/report2$'))
async def report2_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_id = event.sender_id

    await event.reply(
        "‚ùå **REPORT2 INDISPON√çVEL**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "‚ö†Ô∏è **Limita√ß√£o T√©cnica:**\n"
        "O sistema de reports avan√ßados (Report2) n√£o funciona com bots do Telegram.\n\n"
        "üîß **Motivo:**\n"
        "A API `ReportPeerRequest` √© restrita apenas para contas de usu√°rio, n√£o para bots.\n\n"
        "üí° **Alternativas dispon√≠veis:**\n"
        "‚Ä¢ `/report` - Reports b√°sicos do Telegram\n"
        "‚Ä¢ `/reportwpp` - Reports WhatsApp\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üìù Usar /report", data=f"cmd_report:{user_id}"),
             Button.inline("üì± Usar /reportwpp", data=f"cmd_reportwpp:{user_id}")],
            [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{user_id}")]
        ]
    )
@bot.on(events.NewMessage)
async def message_handler(event):
    global report_data, whatsapp_report_data

    # Verificar comando errado ANTES de processar outras coisas
    if event.raw_text.startswith('/'):
        if await verificar_comando_errado(event):
            return  # Se foi um comando errado corrigido, parar aqui
        else:
            return  # Se foi um comando v√°lido, deixar outros handlers processarem

    # Ignorar mensagens vazias ou que n√£o s√£o texto
    if not event.raw_text:
        return

    user_id = event.sender_id

    # Verificar autoriza√ß√£o para handlers de mensagem (reports em andamento)
    if not eh_autorizado(user_id):
        return

    # Processo de report Telegram - step by step
    if report_data["user_id"] == user_id and not report_data["running"]:
        if not report_data["text"]:
            report_data["text"] = event.raw_text
            await event.reply("**üîó | AGORA ENVIE O LINK QUE DESEJA REPORTAR:**\n(Formato: 'https://t.me/exemplo' ou 't.me/exemplo')")
        elif not report_data["link"]:
            link = event.raw_text.strip()
            if link.startswith("t.me/"):
                link = "https://" + link
            elif not link.startswith("https://t.me"):
                await event.reply("**‚ùå | O LINK DEVE COME√áAR COM 'https://t.me' OU 't.me/'**")
                return

            report_data["link"] = link
            await event.reply("**üî¢ | QUANTOS REPORTS VOC√ä DESEJA ENVIAR?**\n(Digite um n√∫mero entre 1 e 1000):")
        elif not report_data["quantity"]:
            try:
                quantity = int(event.raw_text)
                if quantity < 1 or quantity > 1000:
                    await event.reply("**‚ùå | A QUANTIDADE DEVE SER ENTRE 1 E 1000**")
                    return

                report_data["quantity"] = quantity
                report_data["counter"] = 0
                report_data["running"] = True
                report_data["start_time"] = datetime.now()

                await event.reply(
                    f"**üöÄ | INICIANDO ENVIO DE {quantity} REPORTS...**\n"
                    f"üìù Texto: {report_data['text']}\n"
                    f"üîó Link: {report_data['link']}\n\n"
                    "Voc√™ receber√° atualiza√ß√µes em breve.",
                    buttons=[[Button.inline("‚èπ | PARAR REPORTS", data=f"stop_reports:{user_id}")]]
                )

                # Iniciar processo de envio
                asyncio.create_task(send_reports_async(user_id))

            except ValueError:
                await event.reply("**‚ùå | POR FAVOR, DIGITE UM N√öMERO V√ÅLIDO ENTRE 1 E 1000**")



    # Processo de Sites Checker - aguardando URL
    elif f'sites_state_{user_id}' in globals() and globals()[f'sites_state_{user_id}'].get('waiting_url'):
        url = event.raw_text.strip()

        # Validar e corrigir URL
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url

        # Verificar o site
        status_info = check_site_status(url)

        response_text = f"üåê **RESULTADO - VERIFICA√á√ÉO DE SITE**\n\n"
        response_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        response_text += f"üîó **URL:** `{url}`\n"
        response_text += f"üìä **Status:** {status_info['status']}\n"

        if status_info['response_time']:
            response_text += f"‚ö° **Tempo de Resposta:** {status_info['response_time']}ms\n"

        response_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        response_text += "ü§ñ @CatalystServerRobot"

        await event.reply(
            response_text,
            buttons=[
                [Button.inline("üîç Verificar Outro", data=f"check_custom:{user_id}")],
                [Button.inline("üîô Voltar", data=f"sites_checker:{user_id}")]
            ]
        )

        # Limpar estado
        globals()[f'sites_state_{user_id}']['waiting_url'] = False

    # Processo de report WhatsApp - step by step
    elif whatsapp_report_data["user_id"] == user_id and not whatsapp_report_data["running"]:
        if not whatsapp_report_data["phone"]:
            phone = event.raw_text.strip()
            # Validar formato do telefone
            phone_clean = re.sub(r'[^\d+]', '', phone)
            if not re.match(r'^(\+55)?[1-9][1-9]\d{8,9}$', phone_clean):
                await event.reply("**‚ùå | FORMATO INV√ÅLIDO!**\n\nUse: `+5511999999999` ou `11999999999`")
                return

            whatsapp_report_data["phone"] = phone_clean
            await event.reply("**üî¢ | QUANTOS REPORTS VOC√ä DESEJA ENVIAR?**\n(Digite um n√∫mero entre 1 e 500):")
        elif not whatsapp_report_data["quantity"]:
            try:
                quantity = int(event.raw_text)
                if quantity < 1 or quantity > 500:
                    await event.reply("**‚ùå | A QUANTIDADE DEVE SER ENTRE 1 E 500**")
                    return

                whatsapp_report_data["quantity"] = quantity
                whatsapp_report_data["counter"] = 0
                whatsapp_report_data["running"] = True
                whatsapp_report_data["start_time"] = datetime.now()

                await event.reply(
                    f"**üì± | INICIANDO REPORTS WHATSAPP...**\n"
                    f"üìû N√∫mero: {whatsapp_report_data['phone']}\n"
                    f"üî¢ Quantidade: {quantity}\n\n"
                    "Voc√™ receber√° atualiza√ß√µes em breve.",
                    buttons=[[Button.inline("‚èπ | PARAR REPORTS", data=f"stop_whatsapp_reports:{user_id}")]]
                )

                # Iniciar processo de envio
                asyncio.create_task(send_whatsapp_reports_async(user_id))

            except ValueError:
                await event.reply("**‚ùå | POR FAVOR, DIGITE UM N√öMERO V√ÅLIDO ENTRE 1 E 500**")

    # Processo de Report2 avan√ßado - step by step
    elif f'report2_data_{user_id}' in globals() and not globals()[f'report2_data_{user_id}'].get('running', False):
        data = globals()[f'report2_data_{user_id}']

        if data.get('step') == 2:  # Aguardando alvo
            target = event.raw_text.strip()

            if data.get('target_type') == 'post':
                # Validar link do post
                if not target.startswith("https://t.me/"):
                    await event.reply("**‚ùå | FORMATO INV√ÅLIDO!**\n\nUse: `https://t.me/canal/12345`")
                    return

                try:
                    parts = target.replace("https://t.me/", "").split("/")
                    if len(parts) != 2 or not parts[1].isdigit():
                        await event.reply("**‚ùå | LINK INV√ÅLIDO!**\n\nFormato: `https://t.me/canal/12345`")
                        return

                    data['target'] = target
                    data['channel_username'] = parts[0]
                    data['message_id'] = int(parts[1])

                except Exception:
                    await event.reply("**‚ùå | ERRO AO PROCESSAR LINK!**")
                    return
            else:
                # Validar username/ID
                if not target.startswith("@") and not target.lstrip('-').isdigit():
                    target = "@" + target

                data['target'] = target

            data['step'] = 3

            # Mapear raz√µes baseado no script original
            report_reasons_map = {
                'spam': [
                    (8, "Scam or spam"),
                    (1, "I don't like it"),
                    (10, "Other")
                ],
                'scam': [
                    (8, "Scam or spam"),
                    (4, "Illegal goods"),
                    (10, "Other")
                ],
                'hate': [
                    (3, "Violence"),
                    (7, "Terrorism"),
                    (10, "Other")
                ],
                'adult': [
                    (5, "Illegal adult content"),
                    (10, "Other")
                ],
                'child': [
                    (2, "Child abuse"),
                    (10, "Other")
                ],
                'drugs': [
                    (4, "Illegal goods"),
                    (10, "Other")
                ],
                'personal': [
                    (6, "Personal data"),
                    (10, "Other")
                ],
                'copyright': [
                    (9, "Copyright"),
                    (10, "Other")
                ]
            }

            reasons = report_reasons_map.get(data.get('type', 'spam'), [(10, "Other")])

            buttons = []
            for reason_id, reason_text in reasons:
                buttons.append([Button.inline(f"‚ö†Ô∏è {reason_text}", data=f"report2_reason_{reason_id}:{user_id}")])

            buttons.append([Button.inline("üîô Voltar", data=f"report2_menu:{user_id}")])

            await event.reply(
                f"‚ö†Ô∏è **REPORT2 - MOTIVO DA DEN√öNCIA**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üéØ **Alvo:** `{data['target']}`\n\n"
                "**PASSO 3/4:** Escolha o motivo espec√≠fico:\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=buttons
            )

        elif data.get('step') == 4:  # Aguardando quantidade
            try:
                quantity = int(event.raw_text.strip())
                if quantity < 1 or quantity > 100:
                    await event.reply("**‚ùå | QUANTIDADE DEVE SER ENTRE 1 E 100**")
                    return

                data['quantity'] = quantity
                data['running'] = True
                data['counter'] = 0
                data['start_time'] = datetime.now()

                await event.reply(
                    f"üöÄ **INICIANDO REPORT2 AVAN√áADO...**\n\n"
                    f"üéØ **Alvo:** `{data['target']}`\n"
                    f"‚ö†Ô∏è **Motivo:** `{data.get('reason_text', 'N/A')}`\n"
                    f"üî¢ **Quantidade:** `{quantity}`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "‚è≥ Processando reports avan√ßados...",
                    buttons=[[Button.inline("‚èπ Parar", data=f"stop_report2:{user_id}")]]
                )

                # Iniciar processo de reports
                asyncio.create_task(execute_report2_advanced(user_id))

            except ValueError:
                await event.reply("**‚ùå | DIGITE UM N√öMERO V√ÅLIDO ENTRE 1 E 100**")

    # Validadores aguardando entrada
    elif f'validar_cpf_state_{user_id}' in globals() and globals()[f'validar_cpf_state_{user_id}'].get('waiting'):
        cpf_input = event.raw_text.strip()

        try:
            # Validar CPF
            is_valid = DataGenerator.validar_cpf(cpf_input)

            status = "‚úÖ V√ÅLIDO" if is_valid else "‚ùå INV√ÅLIDO"

            await event.reply(
                f"üÜî **RESULTADO - VALIDA√á√ÉO CPF**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìù **CPF digitado:** `{cpf_input}`\n"
                f"‚úÖ **Status:** {status}\n\n"
                "üîç **Verifica√ß√µes realizadas:**\n"
                "‚Ä¢ Formato e tamanho\n"
                "‚Ä¢ D√≠gitos verificadores\n"
                "‚Ä¢ Algoritmo da Receita Federal\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üÜî Validar Outro CPF", data=f"validar_cpf:{user_id}")]]
            )
        except Exception as e:
            await event.reply(f"‚ùå **Erro na valida√ß√£o:** {str(e)}")

        # Limpar estado
        globals()[f'validar_cpf_state_{user_id}']['waiting'] = False

    elif f'validar_cnpj_state_{user_id}' in globals() and globals()[f'validar_cnpj_state_{user_id}'].get('waiting'):
        cnpj_input = event.raw_text.strip()

        try:
            # Validar CNPJ
            is_valid = DataGenerator.validar_cnpj(cnpj_input)

            status = "‚úÖ V√ÅLIDO" if is_valid else "‚ùå INV√ÅLIDO"

            await event.reply(
                f"üè¢ **RESULTADO - VALIDA√á√ÉO CNPJ**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìù **CNPJ digitado:** `{cnpj_input}`\n"
                f"‚úÖ **Status:** {status}\n\n"
                "üîç **Verifica√ß√µes realizadas:**\n"
                "‚Ä¢ Formato e tamanho\n"
                "‚Ä¢ D√≠gitos verificadores\n"
                "‚Ä¢ Algoritmo da Receita Federal\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üè¢ Validar Outro CNPJ", data=f"validar_cnpj:{user_id}")]]
            )
        except Exception as e:
            await event.reply(f"‚ùå **Erro na valida√ß√£o:** {str(e)}")

        # Limpar estado
        globals()[f'validar_cnpj_state_{user_id}']['waiting'] = False

    elif f'validar_cartao_state_{user_id}' in globals() and globals()[f'validar_cartao_state_{user_id}'].get('waiting'):
        cartao_input = event.raw_text.strip()

        try:
            # Validar cart√£o
            is_valid = DataGenerator.validar_cartao(cartao_input)

            status = "‚úÖ V√ÅLIDO" if is_valid else "‚ùå INV√ÅLIDO"

            await event.reply(
                f"üí≥ **RESULTADO - VALIDA√á√ÉO CART√ÉO**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìù **Cart√£o digitado:** `{cartao_input}`\n"
                f"‚úÖ **Status:** {status}\n\n"
                "üîç **Verifica√ß√£o:**\n"
                "‚Ä¢ Algoritmo de Luhn\n"
                "‚Ä¢ D√≠gito verificador\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üí≥ Validar Outro Cart√£o", data=f"validar_cartao_input:{user_id}")]]
            )
        except Exception as e:
            await event.reply(f"‚ùå **Erro na valida√ß√£o:** {str(e)}")

        # Limpar estado
        globals()[f'validar_cartao_state_{user_id}']['waiting'] = False

    # Processo de teste de integra√ß√£o externa
    elif f'test_integration_state_{user_id}' in globals():
        state = globals()[f'test_integration_state_{user_id}']
        
        if state.get('waiting_site_url'):
            site_url = event.raw_text.strip()
            
            # Validar URL
            if not site_url.startswith(('http://', 'https://')):
                site_url = 'https://' + site_url
            
            state['site_url'] = site_url
            state['waiting_site_url'] = False
            state['waiting_combos'] = True
            
            await event.reply(
                f"‚úÖ **SITE CONFIGURADO PARA TESTE!**\n\n"
                f"üåê **URL:** `{site_url}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üß™ **TESTE - PASSO 2/2**\n\n"
                "üìù **Agora cole alguns combos de teste:**\n\n"
                "üí° **Exemplo:**\n"
                "```\n"
                "teste1:senha123\n"
                "user123:pass456\n"
                "email@test.com:123456\n"
                "```\n\n"
                "üéØ **O bot ir√° testar:**\n"
                "‚Ä¢ An√°lise do formul√°rio do site\n"
                "‚Ä¢ Envio autom√°tico dos combos\n"
                "‚Ä¢ Extra√ß√£o dos resultados\n"
                "‚Ä¢ Separa√ß√£o LIVE/DIE\n\n"
                "‚å®Ô∏è Cole os combos de teste no chat:"
            )
            
        elif state.get('waiting_combos'):
            combo_text = event.raw_text.strip()
            site_url = state.get('site_url')
            
            if not ConsultCenterChecker:
                await event.reply("‚ùå **Erro:** Checker n√£o dispon√≠vel.")
                del globals()[f'test_integration_state_{user_id}']
                return
            
            try:
                checker = ConsultCenterChecker()
                
                # Validar combos
                accounts = checker.parse_combo_list(combo_text)
                if not accounts:
                    await event.reply("‚ùå **Combos inv√°lidos!** Use o formato: `usuario:senha`")
                    return
                
                # Iniciar teste
                test_msg = await event.reply(
                    f"üß™ **TESTE DE INTEGRA√á√ÉO EM ANDAMENTO**\n\n"
                    f"üåê **Site:** `{site_url}`\n"
                    f"üìä **Combos de teste:** `{len(accounts)}`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "‚è≥ **Etapas do teste:**\n"
                    "1. üîç Acessando o site...\n"
                    "2. üîß Analisando formul√°rios...\n"
                    "3. üì§ Enviando combos...\n"
                    "4. üì• Processando resposta...\n"
                    "5. ‚úÖ Extraindo resultados...\n\n"
                    "‚ö° Aguarde o resultado completo..."
                )
                
                # Executar teste de integra√ß√£o
                result = await asyncio.to_thread(checker.check_via_external_site, combo_text, site_url)
                
                if isinstance(result, dict) and 'error' in result:
                    await test_msg.edit(
                        f"‚ùå **TESTE FALHOU**\n\n"
                        f"üåê **Site testado:** `{site_url}`\n"
                        f"‚ö†Ô∏è **Erro:** {result['error']}\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        "üîß **Diagn√≥stico poss√≠vel:**\n"
                        "‚Ä¢ Site n√£o possui checker de ConsultCenter\n"
                        "‚Ä¢ Formul√°rio em formato n√£o suportado\n"
                        "‚Ä¢ Site bloqueou a requisi√ß√£o\n"
                        "‚Ä¢ URL incorreta ou inv√°lida\n\n"
                        "üí° **Solu√ß√µes:**\n"
                        "‚Ä¢ Verifique se a URL est√° correta\n"
                        "‚Ä¢ Confirme se o site tem checker ativo\n"
                        "‚Ä¢ Tente acessar manualmente primeiro\n\n"
                        "ü§ñ @CatalystServerRobot"
                    )
                else:
                    results, stats = result
                    
                    # Mostrar resultado do teste
                    test_result = f"‚úÖ **TESTE DE INTEGRA√á√ÉO CONCLU√çDO!**\n\n"
                    test_result += f"üåê **Site:** `{site_url}`\n"
                    test_result += f"üìä **Estat√≠sticas:**\n"
                    test_result += f"‚Ä¢ **Total testado:** `{stats['total']}`\n"
                    test_result += f"‚Ä¢ **‚úÖ LIVE:** `{stats['live']}`\n"
                    test_result += f"‚Ä¢ **‚ùå DIE:** `{stats['die']}`\n"
                    test_result += f"‚Ä¢ **‚ö†Ô∏è ERRORS:** `{stats['error']}`\n\n"
                    
                    if results['live']:
                        test_result += f"üéØ **CONTAS LIVE ({len(results['live'])}):**\n"
                        for live in results['live'][:3]:  # Mostrar apenas 3
                            test_result += f"‚úÖ `{live}`\n"
                        if len(results['live']) > 3:
                            test_result += f"‚Ä¢ ... e mais {len(results['live']) - 3}\n"
                        test_result += "\n"
                    
                    test_result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    test_result += "üéâ **INTEGRA√á√ÉO FUNCIONANDO!**\n\n"
                    test_result += "üí° **Agora voc√™ pode:**\n"
                    test_result += "‚Ä¢ Usar esta URL no checker normal\n"
                    test_result += "‚Ä¢ Enviar listas maiores de combos\n"
                    test_result += "‚Ä¢ Automatizar completamente o processo\n\n"
                    test_result += "ü§ñ @CatalystServerRobot"
                    
                    await test_msg.edit(test_result)
                
                # Limpar estado
                del globals()[f'test_integration_state_{user_id}']
                
            except Exception as e:
                await event.reply(f"‚ùå **Erro no teste:** {str(e)}")
                del globals()[f'test_integration_state_{user_id}']

    # Processo de ConsultCenter checker - aguardando URL do site externo
    elif f'consultcenter_state_{user_id}' in globals() and globals()[f'consultcenter_state_{user_id}'].get('waiting_site_url'):
        site_url = event.raw_text.strip()

        # Validar URL
        if not site_url.startswith(('http://', 'https://')):
            site_url = 'https://' + site_url

        # Armazenar URL e aguardar combos
        globals()[f'consultcenter_state_{user_id}']['site_url'] = site_url
        globals()[f'consultcenter_state_{user_id}']['waiting_site_url'] = False
        globals()[f'consultcenter_state_{user_id}']['waiting_combos'] = True

        await event.reply(
            f"‚úÖ **SITE CONFIGURADO!**\n\n"
            f"üåê **URL:** `{site_url}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Agora cole sua lista de combos:**\n\n"
            "üí° **Formato aceito:**\n"
            "```\n"
            "usuario1:senha1\n"
            "usuario2:senha2\n"
            "email@exemplo.com:senha123\n"
            "```\n\n"
            "‚å®Ô∏è Cole os combos no chat:"
        )

    # Processo de ConsultCenter checker - aguardando combos
    elif f'consultcenter_state_{user_id}' in globals() and globals()[f'consultcenter_state_{user_id}'].get('waiting_combos'):
        combo_text = event.raw_text.strip()
        state = globals()[f'consultcenter_state_{user_id}']
        method = state.get('method', 'local')

        if not ConsultCenterChecker:
            await event.reply("‚ùå **Erro:** Checker n√£o dispon√≠vel. Verifique a instala√ß√£o.")
            globals()[f'consultcenter_state_{user_id}']['waiting_combos'] = False
            return

        try:
            checker = ConsultCenterChecker()

            if method == 'external':
                # Usar site externo
                site_url = state.get('site_url')
                if not site_url:
                    await event.reply("‚ùå **Erro:** URL do site n√£o configurada.")
                    return

                # Validar combos
                accounts = checker.parse_combo_list(combo_text)
                if not accounts:
                    await event.reply("‚ùå **Nenhum combo v√°lido encontrado!** Verifique o formato: `usuario:senha`")
                    return

                # Iniciar verifica√ß√£o externa
                processing_msg = await event.reply(
                    f"üåê **CONSULTCENTER CHECKER - SITE EXTERNO**\n\n"
                    f"üåê **Site:** `{site_url}`\n"
                    f"üìä **Total de combos:** `{len(accounts)}`\n"
                    f"üîÑ **Status:** Enviando para site externo...\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "‚è≥ Aguarde o resultado..."
                )

                # Executar checker externo
                result = await asyncio.to_thread(checker.check_via_external_site, combo_text, site_url)

                if isinstance(result, dict) and 'error' in result:
                    await processing_msg.edit(
                        f"‚ùå **ERRO NO CHECKER EXTERNO**\n\n"
                        f"‚ö†Ô∏è **Erro:** {result['error']}\n\n"
                        "üí° **Poss√≠veis solu√ß√µes:**\n"
                        "‚Ä¢ Verifique se a URL est√° correta\n"
                        "‚Ä¢ Confirme se o site tem checker de ConsultCenter\n"
                        "‚Ä¢ Tente usar o m√©todo local\n\n"
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        "ü§ñ @CatalystServerRobot"
                    )
                    globals()[f'consultcenter_state_{user_id}']['waiting_combos'] = False
                    return

                results, stats = result

            else:
                # Usar m√©todo local
                accounts = checker.parse_combo_list(combo_text)

                if not accounts:
                    await event.reply("‚ùå **Nenhum combo v√°lido encontrado!** Verifique o formato: `usuario:senha`")
                    return

                # Iniciar verifica√ß√£o local
                processing_msg = await event.reply(
                    f"üè• **CONSULTCENTER CHECKER - LOCAL**\n\n"
                    f"üìä **Total de combos:** `{len(accounts)}`\n"
                    f"‚ö° **Threads:** `15`\n"
                    f"üîÑ **Status:** Processando localmente...\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "‚è≥ Aguarde o resultado..."
                )

                # Executar checker local
                results, stats = await asyncio.to_thread(checker.check_list, accounts)

            # Formatar resultados
            result_message = f"üè• **CONSULTCENTER CHECKER - RESULTADO**\n\n"
            result_message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            result_message += f"üìä **ESTAT√çSTICAS:**\n"
            result_message += f"‚Ä¢ **Total testado:** `{stats['total']}`\n"
            result_message += f"‚Ä¢ **‚úÖ LIVE (Aprovados):** `{stats['live']}`\n"
            result_message += f"‚Ä¢ **‚ùå DIE (Reprovados):** `{stats['die']}`\n"
            result_message += f"‚Ä¢ **‚ö†Ô∏è ERROR:** `{stats['error']}`\n\n"

            if results['live']:
                result_message += f"üéØ **CONTAS APROVADAS ({len(results['live'])}):**\n"
                for live in results['live'][:5]:  # Mostrar apenas as primeiras 5
                    result_message += f"‚úÖ `{live}`\n"
                if len(results['live']) > 5:
                    result_message += f"‚Ä¢ ... e mais {len(results['live']) - 5} contas aprovadas\n"
                result_message += "\n"

            if results['die'] and len(results['die']) <= 5:
                result_message += f"‚ùå **CONTAS REPROVADAS ({len(results['die'])}):**\n"
                for die in results['die'][:5]:
                    result_message += f"‚ùå `{die}`\n"
                result_message += "\n"

            result_message += f"üìÑ **Arquivo completo ser√° enviado abaixo**\n\n"
            result_message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            result_message += "ü§ñ @CatalystServerRobot"

            # Criar arquivo com resultados completos se houver muitas contas
            if len(results['live']) > 10 or len(results['die']) > 50:
                filename = f"temp/consultcenter_result_{user_id}.txt"
                os.makedirs("temp", exist_ok=True)
                
                with open(filename, "w", encoding="utf-8") as f:
                    f.write("=== CONSULTCENTER CHECKER RESULTS ===\n")
                    f.write(f"Site: sistema.consultcenter.com.br\n")
                    f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                    f.write(f"Total testado: {stats['total']}\n")
                    f.write(f"Aprovados: {stats['live']} | Reprovados: {stats['die']} | Erros: {stats['error']}\n\n")
                    
                    f.write("=" * 50 + "\n")
                    f.write(f"CONTAS APROVADAS - LIVE ({len(results['live'])})\n")
                    f.write("=" * 50 + "\n")
                    for live in results['live']:
                        f.write(f"{live}\n")
                    
                    f.write("\n" + "=" * 50 + "\n")
                    f.write(f"CONTAS REPROVADAS - DIE ({len(results['die'])})\n")
                    f.write("=" * 50 + "\n")
                    for die in results['die']:
                        f.write(f"{die}\n")
                    
                    if results['error']:
                        f.write("\n" + "=" * 50 + "\n")
                        f.write(f"ERROS DE CONEX√ÉO ({len(results['error'])})\n")
                        f.write("=" * 50 + "\n")
                        for error in results['error']:
                            f.write(f"{error}\n")

                await processing_msg.edit(result_message)
                await bot.send_file(
                    event.chat_id, 
                    file=filename,
                    caption=f"üìÑ **Resultado completo do ConsultCenter Checker**\n\nü§ñ @CatalystServerRobot",
                    buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
                )

                # Limpar arquivo tempor√°rio
                try:
                    os.remove(filename)
                except:
                    pass
            else:
                await processing_msg.edit(result_message, 
                    buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
                )

        except Exception as e:
            await event.reply(f"‚ùå **Erro durante verifica√ß√£o:** {str(e)}")

        # Limpar estado
        globals()[f'consultcenter_state_{user_id}']['waiting_combos'] = False

    # Sistema de corre√ß√£o de comandos - deve estar no final
    elif await verificar_comando_errado(event):
        return  # Comando foi corrigido, n√£o processar mais nada

@bot.on(events.CallbackQuery)
async def callback_handler(event):
    if not event.data:
        return

    try:
        data_str = event.data.decode()
        print(f"üîß Callback recebido: {data_str}")

        if ':' in data_str:
            parts = data_str.split(":", 2)  # Mudan√ßa aqui para permitir mais de 2 partes
            acao = parts[0]

            # Para bot√µes do webscraper que t√™m 3 partes (acao:user_id:url)
            if acao.startswith("scrape_") and len(parts) >= 3:
                id_user_btn = int(parts[1])
                url = parts[2] if len(parts) > 2 else ""
            else:
                # Para outros bot√µes que t√™m 2 partes (acao:user_id)
                id_user_btn = int(parts[1])
        else:
            return
    except Exception as e:
        print(f"‚ùå Erro ao processar callback: {e}")
        return

    if event.sender_id != id_user_btn:
        await event.answer("APENAS O USU√ÅRIO QUE PEDIU O COMANDO PODE USAR ESSES BOT√ïES.", alert=True)
        return

    hash_nome = str(id_user_btn)

    if acao == "cancelarbusca":
        if hash_nome in tasks_canceladas:
            tasks_canceladas[hash_nome]['cancelled'] = True
        await event.answer("SUA BUSCA FOI CANCELADA COM SUCESSO!", alert=True)
        await event.delete()

    elif acao == "apagarmensagem":
        await event.delete()

    elif acao == "cancel":
        await event.delete()

    elif acao == "stop_reports":
        global report_data
        if report_data["running"] and report_data["user_id"] == id_user_btn:
            report_data["running"] = False
            elapsed_time = (datetime.now() - report_data["start_time"]).total_seconds()
            await event.edit(
                f"**‚èπ | REPORTS PARADOS PELO USU√ÅRIO**\n"
                f"üìä Estat√≠sticas finais:\n"
                f"‚Ä¢ Total enviados: {report_data['counter']}/{report_data['quantity']}\n"
                f"‚Ä¢ Tempo total: {int(elapsed_time)} segundos"
            )
            # Reset report data
            report_data = {
                "text": "",
                "link": "",
                "quantity": 0,
                "running": False,
                "counter": 0,
                "start_time": None,
                "user_id": None
            }
        await event.answer("Reports parados com sucesso!", alert=True)

    elif acao == "stop_whatsapp_reports":
        whatsapp_report_data["running"] = False
        await event.answer("‚èπ Reports WhatsApp interrompidos!")
        await event.edit("**‚èπ | REPORTS WHATSAPP INTERROMPIDOS PELO USU√ÅRIO**")

    # Report2 handlers - Funcionalidade indispon√≠vel para bots
    elif acao.startswith("report2_") and not acao.startswith("report2_target_") and not acao.startswith("report2_reason_") and acao != "report2_menu":
        await safe_edit_message(event,
            "‚ùå **REPORT2 INDISPON√çVEL**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è **Limita√ß√£o T√©cnica:**\n"
            "O sistema de reports avan√ßados n√£o funciona com bots.\n\n"
            "üí° **Use as alternativas dispon√≠veis:**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üìù Usar /report", data=f"cmd_report:{id_user_btn}"),
                 Button.inline("üì± Usar /reportwpp", data=f"cmd_reportwpp:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao.startswith("report2_target_") or acao == "report2_menu":
        await safe_edit_message(event,
            "‚ùå **REPORT2 INDISPON√çVEL**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è **Esta funcionalidade requer conta de usu√°rio.**\n\n"
            "üí° **Use as alternativas:**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üìù Usar /report", data=f"cmd_report:{id_user_btn}"),
                 Button.inline("üì± Usar /reportwpp", data=f"cmd_reportwpp:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "stop_report2" or acao.startswith("report2_reason_") or acao.startswith("start_report2_"):
        await event.answer("‚ùå Report2 n√£o dispon√≠vel para bots", alert=True)
        await safe_edit_message(event,
            "‚ùå **REPORT2 INDISPON√çVEL**\n\n"
            "‚ö†Ô∏è Esta funcionalidade requer conta de usu√°rio.\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao.startswith("scrape_"):
        try:
            scrape_type = acao
            # URL j√° foi extra√≠da no in√≠cio da fun√ß√£o
            if 'url' not in locals() or not url:
                await event.answer("‚ùå URL n√£o encontrada!", alert=True)
                return

            await safe_edit_message(event,
                f"üï∑Ô∏è **INICIANDO WEB SCRAPER...**\n\n"
                f"üåê **URL:** `{url}`\n"
                f"‚è≥ **STATUS:** Conectando ao site...\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            , buttons=[])

            # Configurar o que extrair
            extract_emails = scrape_type in ["scrape_emails", "scrape_all"]
            extract_phones = scrape_type in ["scrape_phones", "scrape_all"] 
            extract_links = scrape_type in ["scrape_links", "scrape_all"]

            # Status update
            await safe_edit_message(event,
                f"üï∑Ô∏è **WEB SCRAPER ATIVO**\n\n"
                f"üåê **URL:** `{url}`\n"
                f"‚è≥ **STATUS:** Extraindo dados...\n"
                f"üìä **BUSCANDO:** {'üìß Emails ' if extract_emails else ''}{'üìû Telefones ' if extract_phones else ''}{'üîó Links' if extract_links else ''}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            , buttons=[])

            # Executar scraping
            scraper = WebScraper(url, extract_emails, extract_phones, extract_links)
            results = await asyncio.to_thread(scraper.scrape)

            if "error" in results:
                await safe_edit_message(event,
                    f"‚ùå **ERRO NO WEB SCRAPER**\n\n"
                    f"üåê URL: `{url}`\n"
                    f"‚ö†Ô∏è Erro: `{results['error']}`\n\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    "üí° Verifique se a URL est√° correta e acess√≠vel."
                , buttons=[])
                return

            # Formatar resultados
            message = f"‚úÖ **WEB SCRAPER CONCLU√çDO**\n\n"
            message += f"üåê **URL:** `{url}`\n\n"
            message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

            if extract_emails and results["emails"]:
                message += f"üìß **EMAILS ENCONTRADOS ({len(results['emails'])}):**\n"
                for email in list(results["emails"])[:10]:  # Mostrar apenas os primeiros 10
                    message += f"‚Ä¢ `{email}`\n"
                if len(results["emails"]) > 10:
                    message += f"‚Ä¢ ... e mais {len(results['emails']) - 10} emails\n"
                message += "\n"

            if extract_phones and results["phones"]:
                message += f"üìû **TELEFONES ENCONTRADOS ({len(results['phones'])}):**\n"
                for phone in list(results["phones"])[:10]:  # Mostrar apenas os primeiros 10
                    message += f"‚Ä¢ `{phone}`\n"
                if len(results["phones"]) > 10:
                    message += f"‚Ä¢ ... e mais {len(results['phones']) - 10} telefones\n"
                message += "\n"

            if extract_links and results["links"]:
                message += f"üîó **LINKS ENCONTRADOS ({len(results['links'])}):**\n"
                for link in list(results["links"])[:5]:  # Mostrar apenas os primeiros 5
                    message += f"‚Ä¢ `{link}`\n"
                if len(results["links"]) > 5:
                    message += f"‚Ä¢ ... e mais {len(results['links']) - 5} links\n"
                message += "\n"

            if not any([results["emails"], results["phones"], results["links"]]):
                message += "‚ùå **Nenhum dado encontrado no site.**\n\n"

            message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            message += "ü§ñ @CatalystServerRobot"

            # Criar arquivo com todos os resultados se houver muitos dados
            total_items = len(results["emails"]) + len(results["phones"]) + len(results["links"])
            if total_items > 20:
                file_content = f"=== WEB SCRAPER RESULTADOS ===\nURL: {url}\n\n"

                if results["emails"]:
                    file_content += f"EMAILS ({len(results['emails'])}):\n"
                    file_content += "\n".join(results["emails"]) + "\n\n"

                if results["phones"]:
                    file_content += f"TELEFONES ({len(results['phones'])}):\n"
                    file_content += "\n".join(results["phones"]) + "\n\n"

                if results["links"]:
                    file_content += f"LINKS ({len(results['links'])}):\n"
                    file_content += "\n".join(results["links"]) + "\n\n"

                # Salvar arquivo tempor√°rio
                filename = f"temp/webscraper_{id_user_btn}.txt"
                os.makedirs("temp", exist_ok=True)
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(file_content)

                await safe_edit_message(event, message, buttons=[])
                await bot.send_file(
                    event.chat_id, 
                    file=filename,
                    caption=f"üìÑ **Arquivo completo com todos os resultados**\n\nü§ñ @CatalystServerRobot",
                    buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user_btn}")]]
                )

                # Limpar arquivo tempor√°rio
                try:
                    os.remove(filename)
                except:
                    pass
            else:
                await safe_edit_message(event, message, buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user_btn}")]])

        except Exception as e:
            await safe_edit_message(event,
                f"‚ùå **ERRO NO WEB SCRAPER**\n\n"
                f"‚ö†Ô∏è Erro: `{str(e)}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üí° Tente novamente ou verifique a URL."
            , buttons=[])

    elif acao in ["format1", "format2"]:
        pasta = f"temp/{id_user_btn}/"
        nome = f"{id_user_btn}.txt" if acao == "format1" else f"{id_user_btn}_formatado.txt"
        caminho = os.path.join(pasta, nome)

        if not os.path.exists(caminho):
            await event.answer("O ARQUIVO N√ÉO FOI ENCONTRADO! TENTE NOVAMENTE.", alert=True)
            return

        await event.delete()
        await asyncio.sleep(0.5)

        sender = await bot.get_entity(id_user_btn)
        mention = f"[{sender.first_name}](tg://user?id={id_user_btn})"

        with open(caminho, "r", encoding="utf-8") as f:
            qtd = sum(1 for _ in f)

        caption = f"""**‚òÅÔ∏è | RESULTADO ENVIADO - TXT**

**‚Ä¢ QUANTIDADE:** `{qtd}`
**‚Ä¢ URL FORNECIDA:** {urls_busca.get(id_user_btn, "desconhecida")}
**‚Ä¢ QUEM PEDIU:** {mention}

ü§ñ @CatalystServerRobot"""

        await bot.send_file(
            event.chat_id,
            file=caminho,
            caption=caption,
            buttons=[[Button.inline("‚ùå | APAGAR MENSAGEM", data=f"deletefile:{id_user_btn}")]],
            reply_to=mensagens_origem.get(id_user_btn)
        )

        # Notifica√ß√£o para admin
        if meu_id:
            try:
                await bot.send_message(meu_id, f"""**‚ö†Ô∏è | NOVA CONSULTA DE LOGIN**

**‚Ä¢ QUEM FOI:** {mention}
**‚Ä¢ URL:** {urls_busca.get(id_user_btn, "desconhecida")}
**‚Ä¢ QUANTIDADE:** {qtd}

ü§ñ @CatalystServerRobot""")
            except:
                pass

        shutil.rmtree(pasta, ignore_errors=True)



    elif acao == "sites_checker":
        try:
            await safe_edit_message(event,
                f"üåê **SITES CHECKER v3.0**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üîç **VERIFICA√á√ÉO R√ÅPIDA DE SITES:**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[
                    [Button.inline("üîç Sites Populares", data=f"check_popular:{id_user_btn}"),
                     Button.inline("üåê Site Customizado", data=f"check_custom:{id_user_btn}")],
                    [Button.inline("üîô Voltar ao Checker", data=f"checker_menu:{id_user_btn}")]
                ]
            )
        except Exception as e:
            print(f"‚ùå Erro ao editar mensagem sites_checker: {e}")
            await event.answer("Erro ao carregar menu.", alert=True)

    elif acao == "check_popular":
        popular_sites = [
            "https://google.com",
            "https://facebook.com", 
            "https://youtube.com",
            "https://twitter.com",
            "https://instagram.com"
        ]

        await safe_edit_message(event, "üîç **Verificando sites populares...**", buttons=[])

        results = []
        for site in popular_sites:
            status_info = check_site_status(site)
            site_name = site.replace("https://", "").replace("www.", "")
            if status_info["response_time"]:
                results.append(f"‚Ä¢ {site_name}: {status_info['status']} ({status_info['response_time']}ms)")
            else:
                results.append(f"‚Ä¢ {site_name}: {status_info['status']}")

        await safe_edit_message(event,
            f"üåê **RESULTADO - SITES POPULARES**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "\n".join(results) + "\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"sites_checker:{id_user_btn}")]]
        )

    elif acao == "check_custom":
        # Criar estado para aguardar URL
        globals()[f'sites_state_{id_user_btn}'] = {'waiting_url': True}

        await safe_edit_message(event,
            f"üåê **VERIFICAR SITE CUSTOMIZADO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Digite a URL do site:**\n\n"
            "üí° **Exemplos:**\n"
            "‚Ä¢ `https://exemplo.com`\n"
            "‚Ä¢ `exemplo.com`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö° Aguardando URL...",
            buttons=[[Button.inline("üîô Voltar", data=f"sites_checker:{id_user_btn}")]]
        )
    elif acao == "checker_menu":
        await safe_edit_message(event,
            f"üîç **CATALYST CHECKER v3.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üõ†Ô∏è **FUNCIONALIDADES DISPON√çVEIS:**\n\n"
            "üåê **SITES UPANDO**\n"
            "üë§ **GERADOR DE PESSOA FAKE v2.0**\n"
            "üîê **ACCOUNT CHECKER**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üåê Sites Checker", data=f"sites_checker:{id_user_btn}"),
                 Button.inline("üë§ Fake Person v2.0", data=f"fake_person:{id_user_btn}")],
                [Button.inline("üîê Account Checker", data=f"account_checker:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Cancelar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "copy_person":
        try:
            person_data = generate_fake_person_advanced()

            # Criar texto formatado para c√≥pia
            copy_text = f"""üìã DADOS DA PESSOA FAKE BRASILEIRA v3.0

üë§ Nome: {person_data['nome']}
üöπ G√™nero: {person_data['genero']}
üéÇ Data de Nascimento: {person_data['data_nascimento']}
üë§ Idade: {person_data['idade']} anos
üÜî CPF: {person_data['cpf']}
üìÑ RG: {person_data['rg']}

üè• CARACTER√çSTICAS F√çSICAS:
‚öñÔ∏è Peso: {person_data['peso']}
üìè Altura: {person_data['altura']}
ü©∏ Tipo Sangu√≠neo: {person_data['tipo_sanguineo']}
üëÅÔ∏è Cor dos Olhos: {person_data['cor_olhos']}
üíá Cor do Cabelo: {person_data['cor_cabelo']}

üìû CONTATO:
üì± Telefone: {person_data['telefone']}
üìß Email: {person_data['email']}

üè† ENDERE√áO:
üèòÔ∏è Endere√ßo: {person_data['endereco']}
üåÜ Cidade: {person_data['cidade']}
üåé Estado: {person_data['estado']}
üìÆ CEP: {person_data['cep']}

üíº DADOS PROFISSIONAIS:
üëî Profiss√£o: {person_data['profissao']}
üè¢ Setor: {person_data['setor']}
üéì Escolaridade: {person_data['escolaridade']}
üí∞ Sal√°rio: {person_data['salario']}

üáßüá∑ Nacionalidade: {person_data['nacionalidade']}

üéØ Sistema v3.0 com dados f√≠sicos e profissionais
‚úÖ Baseado em dados reais brasileiros
‚ö†Ô∏è Dados fict√≠cios para teste
ü§ñ @CatalystServerRobot"""

            await bot.send_message(
                event.chat_id,
                copy_text,
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user_btn}")]]
            )

            await event.answer("üìã Dados copiados como nova mensagem!", alert=True)
        except Exception as e:
            await event.answer(f"‚ùå Erro ao copiar dados: {str(e)[:50]}", alert=True)

    elif acao == "person_stats":
        try:
            db_pessoas = sqlite3.connect("database/pessoas.db")
            cursor_pessoas = db_pessoas.cursor()

            # Contar estat√≠sticas do banco
            cursor_pessoas.execute("SELECT COUNT(*) FROM nomes_masculinos")
            count_m = cursor_pessoas.fetchone()[0]

            cursor_pessoas.execute("SELECT COUNT(*) FROM nomes_femininos")
            count_f = cursor_pessoas.fetchone()[0]

            cursor_pessoas.execute("SELECT COUNT(*) FROM sobrenomes")
            count_s = cursor_pessoas.fetchone()[0]

            cursor_pessoas.execute("SELECT COUNT(*) FROM enderecos")
            count_e = cursor_pessoas.fetchone()[0]

            db_pessoas.close()

            # Calcular combina√ß√µes poss√≠veis
            combinacoes_totais = (count_m + count_f) * count_s * count_e * 365 * 62  # 62 anos de idade poss√≠vel

            await safe_edit_message(event,
                f"üìä **ESTAT√çSTICAS DO GERADOR v2.0**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìù **NOMES MASCULINOS:** `{count_m:,}`\n"
                f"üå∏ **NOMES FEMININOS:** `{count_f:,}`\n"
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **SOBRENOMES:** `{count_s:,}`\n"
                f"üè† **ENDERE√áOS REAIS:** `{count_e:,}`\n\n"
                f"üéØ **COMBINA√á√ïES POSS√çVEIS:**\n"
                f"`{combinacoes_totais:,}` pessoas √∫nicas\n\n"
                "‚úÖ **RECURSOS:**\n"
                "‚Ä¢ CPFs v√°lidos algoritmicamente\n"
                "‚Ä¢ RGs v√°lidos por estado\n"
                "‚Ä¢ Telefones com DDDs reais\n"
                "‚Ä¢ Emails com dom√≠nios brasileiros\n"
                "‚Ä¢ Endere√ßos de cidades reais\n"
                "‚Ä¢ CEPs baseados em localiza√ß√£o\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üîô Voltar", data=f"fake_person:{id_user_btn}")]]
            )
        except Exception as e:
            await event.answer(f"‚ùå Erro ao buscar estat√≠sticas: {str(e)}", alert=True)

    elif acao == "generate_multiple":
        try:
            await safe_edit_message(event, "üé≤ **Gerando 5 pessoas...**", buttons=[])

            pessoas = []
            for i in range(5):
                try:
                    person_data = generate_fake_person_advanced()
                    pessoas.append(f"**PESSOA {i+1}:**\nüë§ {person_data['nome']}\nüÜî {person_data['cpf']}\nüìû {person_data['telefone']}\nüìß {person_data['email']}")
                except Exception as e:
                    print(f"‚ùå Erro ao gerar pessoa {i+1}: {e}")
                    pessoas.append(f"**PESSOA {i+1}:** ‚ùå Erro na gera√ß√£o")

            resultado = f"üé≤ **5 PESSOAS GERADAS**\n\n" + "\n\n".join(pessoas)
            resultado += f"\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nü§ñ @CatalystServerRobot"

            await safe_edit_message(event,
                resultado,
                buttons=[
                    [Button.inline("üîÑ Gerar Mais 5", data=f"generate_multiple:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"fake_person:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await safe_edit_message(event,
                f"‚ùå **ERRO AO GERAR M√öLTIPLAS PESSOAS**\n\n{str(e)[:100]}",
                buttons=[[Button.inline("üîô Voltar", data=f"fake_person:{id_user_btn}")]]
            )

    elif acao == "cartoes_credito":
        await safe_edit_message(event,
            f"üí≥ **GERADOR DE CART√ïES v4.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **BANDEIRAS DISPON√çVEIS:**\n"
            "‚Ä¢ Visa (16 d√≠gitos)\n"
            "‚Ä¢ Mastercard (16 d√≠gitos)\n"
            "‚Ä¢ Elo (16 d√≠gitos)\n"
            "‚Ä¢ Hipercard (16 d√≠gitos)\n"
            "‚Ä¢ American Express (15 d√≠gitos)\n\n"
            "‚úÖ **Recursos:**\n"
            "‚Ä¢ Algoritmo de Luhn v√°lido\n"
            "‚Ä¢ BINs reais das bandeiras\n"
            "‚Ä¢ CVV e data de validade\n"
            "‚Ä¢ Formata√ß√£o autom√°tica\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üé≤ Cart√£o Aleat√≥rio", data=f"gerar_cartao_random:{id_user_btn}"),
                 Button.inline("üí≥ Escolher Bandeira", data=f"escolher_bandeira:{id_user_btn}")],
                [Button.inline("üìä 5 Cart√µes", data=f"gerar_5_cartoes:{id_user_btn}"),
                 Button.inline("‚úÖ Validar Cart√£o", data=f"validar_cartao:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"geradores_menu:{id_user_btn}")]
            ]
        )

    elif acao == "empresas_fake":
        await safe_edit_message(event,
            f"üè¢ **GERADOR DE EMPRESAS v4.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **DADOS GERADOS:**\n"
            "‚Ä¢ Raz√£o Social realista\n"
            "‚Ä¢ CNPJ v√°lido matematicamente\n"
            "‚Ä¢ Inscri√ß√£o Estadual\n"
            "‚Ä¢ Data de abertura\n"
            "‚Ä¢ Capital social\n"
            "‚Ä¢ Atividade principal (CNAE)\n"
            "‚Ä¢ Situa√ß√£o da empresa\n\n"
            "‚úÖ **Algoritmo da Receita Federal**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üè¢ Gerar Empresa", data=f"gerar_empresa:{id_user_btn}"),
                 Button.inline("üìã Copiar Empresa", data=f"copiar_empresa:{id_user_btn}")],
                [Button.inline("üìä 5 Empresas", data=f"gerar_5_empresas:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"geradores_menu:{id_user_btn}")]
            ]
        )

    elif acao == "validadores":
        await safe_edit_message(event,
            f"‚úÖ **VALIDADORES v4.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üõ†Ô∏è **FERRAMENTAS DISPON√çVEIS:**\n\n"
            "üÜî **VALIDADOR DE CPF**\n"
            "   ‚Ä¢ Algoritmo da Receita Federal\n"
            "   ‚Ä¢ Verifica√ß√£o de d√≠gitos\n\n"
            "üè¢ **VALIDADOR DE CNPJ**\n"
            "   ‚Ä¢ Algoritmo oficial\n"
            "   ‚Ä¢ Valida√ß√£o completa\n\n"
            "üí≥ **VALIDADOR DE CART√ÉO**\n"
            "   ‚Ä¢ Algoritmo de Luhn\n"
            "   ‚Ä¢ Todas as bandeiras\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üÜî Validar CPF", data=f"validar_cpf:{id_user_btn}"),
                 Button.inline("üè¢ Validar CNPJ", data=f"validar_cnpj:{id_user_btn}")],
                [Button.inline("üí≥ Validar Cart√£o", data=f"validar_cartao_input:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"geradores_menu:{id_user_btn}")]
            ]
        )

    elif acao == "fake_person":
        try:
            person_data = generate_fake_person_advanced()

            await safe_edit_message(event,
                f"üë§ **PESSOA FAKE BRASILEIRA v3.0**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìù **Nome:** {person_data['nome']}\n"
                f"üöπ **G√™nero:** {person_data['genero']}\n"
                f"üéÇ **Data de Nascimento:** {person_data['data_nascimento']}\n"
                f"üë§ **Idade:** {person_data['idade']} anos\n"
                f"üÜî **CPF:** `{person_data['cpf']}`\n"
                f"üìÑ **RG:** `{person_data['rg']}`\n\n"
                "üè• **CARACTER√çSTICAS F√çSICAS:**\n"
                f"‚öñÔ∏è **Peso:** {person_data['peso']}\n"
                f"üìè **Altura:** {person_data['altura']}\n"
                f"ü©∏ **Tipo Sangu√≠neo:** {person_data['tipo_sanguineo']}\n"
                f"üëÅÔ∏è **Cor dos Olhos:** {person_data['cor_olhos']}\n"
                f"üíá **Cor do Cabelo:** {person_data['cor_cabelo']}\n\n"
                "üìû **CONTATO:**\n"
                f"üì± **Telefone:** `{person_data['telefone']}`\n"
                f"üìß **Email:** `{person_data['email']}`\n\n"
                "üè† **ENDERE√áO:**\n"
                f"üèòÔ∏è **Endere√ßo:** {person_data['endereco']}\n"
                f"üåÜ **Cidade:** {person_data['cidade']}\n"
                f"üåé **Estado:** {person_data['estado']}\n"
                f"üìÆ **CEP:** `{person_data['cep']}`\n\n"
                "üíº **DADOS PROFISSIONAIS:**\n"
                f"üëî **Profiss√£o:** {person_data['profissao']}\n"
                f"üè¢ **Setor:** {person_data['setor']}\n"
                f"üéì **Escolaridade:** {person_data['escolaridade']}\n"
                f"üí∞ **Sal√°rio:** {person_data['salario']}\n\n"
                f"üáßüá∑ **Nacionalidade:** {person_data['nacionalidade']}\n\n"
                "‚úÖ **Sistema v3.0 com dados f√≠sicos e profissionais**\n"
                "üìä **Baseado em dados reais brasileiros**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[
                    [Button.inline("üîÑ Gerar Nova Pessoa", data=f"fake_person:{id_user_btn}"),
                     Button.inline("üìã Copiar Dados", data=f"copy_person:{id_user_btn}")],
                    [Button.inline("üìä Estat√≠sticas", data=f"person_stats:{id_user_btn}"),
                     Button.inline("üé≤ Gerar 5 Pessoas", data=f"generate_multiple:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"geradores_menu:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await safe_edit_message(event,
                f"‚ùå **ERRO AO GERAR PESSOA**\n\n{str(e)[:100]}",
                buttons=[[Button.inline("üîô Voltar", data=f"geradores_menu:{id_user_btn}")]]
            )

    elif acao == "geradores_menu":
        await safe_edit_message(event,
            f"üé≤ **CATALYST GERADORES v4.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üõ†Ô∏è **FERRAMENTAS DE GERA√á√ÉO:**\n\n"
            "üë§ **GERADOR DE PESSOA FAKE v2.0**\n"
            "üí≥ **GERADOR DE CART√ïES DE CR√âDITO**\n"
            "üè¢ **GERADOR DE EMPRESAS FAKE**\n"
            "‚úÖ **VALIDADORES CPF/CNPJ**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üë§ Pessoa Fake v2.0", data=f"fake_person:{id_user_btn}"),
                 Button.inline("üí≥ Cart√µes de Cr√©dito", data=f"cartoes_credito:{id_user_btn}")],
                [Button.inline("üè¢ Empresas Fake", data=f"empresas_fake:{id_user_btn}"),
                 Button.inline("‚úÖ Validadores", data=f"validadores:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Cancelar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "escolher_bandeira":
        await safe_edit_message(event,
            f"üí≥ **ESCOLHER BANDEIRA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **Selecione a bandeira desejada:**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üí≥ Visa", data=f"gerar_cartao_visa:{id_user_btn}"),
                 Button.inline("üí≥ Mastercard", data=f"gerar_cartao_mastercard:{id_user_btn}")],
                [Button.inline("üí≥ Elo", data=f"gerar_cartao_elo:{id_user_btn}"),
                 Button.inline("üí≥ Hipercard", data=f"gerar_cartao_hipercard:{id_user_btn}")],
                [Button.inline("üí≥ American Express", data=f"gerar_cartao_amex:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"cartoes_credito:{id_user_btn}")]
            ]
        )

    elif acao.startswith("gerar_cartao_") and acao != "gerar_cartao_random":
        try:
            # Extrair bandeira do nome da a√ß√£o
            bandeira_map = {
                "gerar_cartao_visa": "Visa",
                "gerar_cartao_mastercard": "Mastercard",
                "gerar_cartao_elo": "Elo",
                "gerar_cartao_hipercard": "Hipercard",
                "gerar_cartao_amex": "American Express"
            }
            
            bandeira = bandeira_map.get(acao, "Visa")
            cartao = DataGenerator.gerar_cartao(bandeira)

            await safe_edit_message(event,
                f"üí≥ **CART√ÉO GERADO - {cartao['bandeira'].upper()}**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üî¢ **N√∫mero:** `{cartao['numero']}`\n"
                f"üõ°Ô∏è **CVV:** `{cartao['cvv']}`\n"
                f"üìÖ **Validade:** `{cartao['validade']}`\n"
                f"üè¶ **Bandeira:** `{cartao['bandeira']}`\n\n"
                "‚úÖ **V√°lido pelo algoritmo de Luhn**\n"
                "‚ö†Ô∏è **Apenas para fins educacionais**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[
                    [Button.inline(f"üîÑ Outro {bandeira}", data=f"{acao}:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"cartoes_credito:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await event.answer(f"‚ùå Erro ao gerar cart√£o: {str(e)}", alert=True)

    elif acao == "gerar_cartao_random":
        try:
            cartao = DataGenerator.gerar_cartao()

            await safe_edit_message(event,
                f"üí≥ **CART√ÉO GERADO - {cartao['bandeira'].upper()}**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üî¢ **N√∫mero:** `{cartao['numero']}`\n"
                f"üõ°Ô∏è **CVV:** `{cartao['cvv']}`\n"
                f"üìÖ **Validade:** `{cartao['validade']}`\n"
                f"üè¶ **Bandeira:** `{cartao['bandeira']}`\n\n"
                "‚úÖ **V√°lido pelo algoritmo de Luhn**\n"
                "‚ö†Ô∏è **Apenas para fins educacionais**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[
                    [Button.inline("üîÑ Outro Aleat√≥rio", data=f"gerar_cartao_random:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"cartoes_credito:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await event.answer(f"‚ùå Erro ao gerar cart√£o: {str(e)}", alert=True)

    elif acao == "gerar_empresa":
        try:
            empresa = DataGenerator.gerar_empresa_fake()

            await safe_edit_message(event,
                f"üè¢ **EMPRESA GERADA**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üè¢ **Raz√£o Social:** {empresa['razao_social']}\n"
                f"üìù **Nome Fantasia:** {empresa['nome_fantasia']}\n"
                f"üÜî **CNPJ:** `{empresa['cnpj']}`\n"
                f"üìã **Inscri√ß√£o Estadual:** `{empresa['inscricao_estadual']}`\n"
                f"üìä **Situa√ß√£o:** {empresa['situacao']}\n"
                f"üìÖ **Data de Abertura:** {empresa['data_abertura']}\n"
                f"üí∞ **Capital Social:** {empresa['capital_social']}\n"
                f"üéØ **Atividade Principal:** {empresa['atividade_principal']}\n"
                f"üìè **Porte:** {empresa['porte']}\n\n"
                "‚úÖ **CNPJ v√°lido matematicamente**\n"
                "‚ö†Ô∏è **Dados fict√≠cios para teste**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[
                    [Button.inline("üîÑ Outra Empresa", data=f"gerar_empresa:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"empresas_fake:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await event.answer(f"‚ùå Erro ao gerar empresa: {str(e)}", alert=True)

    elif acao == "start_support":
        # Simula√ß√£o de in√≠cio de suporte
        await event.answer("üí¨ Iniciando chat de suporte...", alert=True)

    elif acao == "support_faq":
        # Simula√ß√£o de FAQ
        await event.answer("üìã FAQ em breve...", alert=True)

    elif acao == "report_bug":
        # Simula√ß√£o de reporte de bug
        await event.answer("üêõ Reporte de bug em breve...", alert=True)

    elif acao == "validar_cpf":
        globals()[f'validar_cpf_state_{id_user_btn}'] = {'waiting': True}

        await safe_edit_message(event,
            f"üÜî **VALIDADOR DE CPF**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Digite o CPF para validar:**\n\n"
            "üí° **Formatos aceitos:**\n"
            "‚Ä¢ `123.456.789-01`\n"
            "‚Ä¢ `12345678901`\n\n"
            "üîç **Ser√° verificado:**\n"
            "‚Ä¢ Formato correto\n"
            "‚Ä¢ D√≠gitos verificadores\n"
            "‚Ä¢ Algoritmo da Receita Federal\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Digite o CPF no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"validadores:{id_user_btn}")]]
        )

    elif acao == "validar_cnpj":
        globals()[f'validar_cnpj_state_{id_user_btn}'] = {'waiting': True}

        await safe_edit_message(event,
            f"üè¢ **VALIDADOR DE CNPJ**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Digite o CNPJ para validar:**\n\n"
            "üí° **Formatos aceitos:**\n"
            "‚Ä¢ `12.345.678/0001-90`\n"
            "‚Ä¢ `12345678000190`\n\n"
            "üîç **Ser√° verificado:**\n"
            "‚Ä¢ Formato correto\n"
            "‚Ä¢ D√≠gitos verificadores\n"
            "‚Ä¢ Algoritmo da Receita Federal\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Digite o CNPJ no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"validadores:{id_user_btn}")]]
        )

    elif acao == "validar_cartao":
        await safe_edit_message(event,
            f"üí≥ **VALIDADOR DE CART√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üõ†Ô∏è **COMO VALIDAR:**\n\n"
            "1. Digite o n√∫mero do cart√£o\n"
            "2. Sistema verifica algoritmo de Luhn\n"
            "3. Resultado imediato\n\n"
            "‚úÖ **Suporta todas as bandeiras**\n"
            "üí≥ **Formatos aceitos:**\n"
            "‚Ä¢ `4532 1234 5678 9012`\n"
            "‚Ä¢ `4532123456789012`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üí≥ Inserir Cart√£o", data=f"validar_cartao_input:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"validadores:{id_user_btn}")]
            ]
        )

    elif acao == "validar_cartao_input":
        globals()[f'validar_cartao_state_{id_user_btn}'] = {'waiting': True}

        await safe_edit_message(event,
            f"üí≥ **VALIDADOR DE CART√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Digite o n√∫mero do cart√£o:**\n\n"
            "üí° **Formatos aceitos:**\n"
            "‚Ä¢ `4532 1234 5678 9012`\n"
            "‚Ä¢ `4532123456789012`\n\n"
            "üîç **Ser√° verificado:**\n"
            "‚Ä¢ Algoritmo de Luhn\n"
            "‚Ä¢ D√≠gito verificador\n"
            "‚Ä¢ Todas as bandeiras\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Digite o n√∫mero no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"validadores:{id_user_btn}")]]
        )

    elif acao == "copiar_empresa":
        try:
            empresa = DataGenerator.gerar_empresa_fake()

            # Criar texto formatado para c√≥pia
            copy_text = f"""üè¢ DADOS DA EMPRESA FAKE BRASILEIRA

üìã Raz√£o Social: {empresa['razao_social']}
üè™ Nome Fantasia: {empresa['nome_fantasia']}
üÜî CNPJ: {empresa['cnpj']}
üìã Inscri√ß√£o Estadual: {empresa['inscricao_estadual']}
üìä Situa√ß√£o: {empresa['situacao']}
üìÖ Data de Abertura: {empresa['data_abertura']}
üí∞ Capital Social: {empresa['capital_social']}
üéØ Atividade Principal: {empresa['atividade_principal']}
üìè Porte: {empresa['porte']}
‚öñÔ∏è Natureza Jur√≠dica: {empresa['natureza_juridica']}

‚úÖ CNPJ v√°lido pelo algoritmo da Receita Federal
‚ö†Ô∏è Dados fict√≠cios para fins de teste
ü§ñ @CatalystServerRobot"""

            await bot.send_message(
                event.chat_id,
                copy_text,
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user_btn}")]]
            )

            await event.answer("üìã Dados da empresa copiados!", alert=True)
        except Exception as e:
            await event.answer(f"‚ùå Erro ao copiar: {str(e)[:50]}", alert=True)

    elif acao == "gerar_5_empresas":
        try:
            await safe_edit_message(event, "üè¢ **Gerando 5 empresas...**", buttons=[])

            empresas = []
            for i in range(5):
                try:
                    empresa = DataGenerator.gerar_empresa_fake()
                    empresas.append(f"**EMPRESA {i+1}:**\nüè¢ {empresa['razao_social']}\nüÜî {empresa['cnpj']}\nüìä {empresa['situacao']}")
                except Exception as e:
                    empresas.append(f"**EMPRESA {i+1}:** ‚ùå Erro na gera√ß√£o")

            resultado = f"üè¢ **5 EMPRESAS GERADAS**\n\n" + "\n\n".join(empresas)
            resultado += f"\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nü§ñ @CatalystServerRobot"

            await safe_edit_message(event,
                resultado,
                buttons=[
                    [Button.inline("üîÑ Gerar Mais 5", data=f"gerar_5_empresas:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"empresas_fake:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await safe_edit_message(event,
                f"‚ùå **ERRO AO GERAR EMPRESAS**\n\n{str(e)[:100]}",
                buttons=[[Button.inline("üîô Voltar", data=f"empresas_fake:{id_user_btn}")]]
            )

    elif acao == "gerar_5_cartoes":
        try:
            await safe_edit_message(event, "üí≥ **Gerando 5 cart√µes...**", buttons=[])

            cartoes = []
            for i in range(5):
                try:
                    cartao = DataGenerator.gerar_cartao()
                    cartoes.append(f"**CART√ÉO {i+1} - {cartao['bandeira']}:**\nüí≥ {cartao['numero']}\nüõ°Ô∏è {cartao['cvv']} | üìÖ {cartao['validade']}")
                except Exception as e:
                    cartoes.append(f"**CART√ÉO {i+1}:** ‚ùå Erro na gera√ß√£o")

            resultado = f"üí≥ **5 CART√ïES GERADOS**\n\n" + "\n\n".join(cartoes)
            resultado += f"\n\n‚úÖ Todos v√°lidos pelo algoritmo de Luhn\n‚ö†Ô∏è Apenas para fins educacionais\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nü§ñ @CatalystServerRobot"

            await safe_edit_message(event,
                resultado,
                buttons=[
                    [Button.inline("üîÑ Gerar Mais 5", data=f"gerar_5_cartoes:{id_user_btn}")],
                    [Button.inline("üîô Voltar", data=f"cartoes_credito:{id_user_btn}")]
                ]
            )
        except Exception as e:
            await safe_edit_message(event,
                f"‚ùå **ERRO AO GERAR CART√ïES**\n\n{str(e)[:100]}",
                buttons=[[Button.inline("üîô Voltar", data=f"cartoes_credito:{id_user_btn}")]]
            )

    elif acao == "suggestion":
        # Simula√ß√£o de sugest√£o
        await event.answer("üí° Sugest√£o em breve...", alert=True)

    elif acao == "area_busca":
        await safe_edit_message(event,
            "üîç **COMANDOS DE BUSCA & EXTRA√á√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üîç `/search [url]` - Buscar logins em sites\n"
            "   üí° Exemplo: `/search facebook.com`\n"
            "   ‚ö° Encontra credenciais em vazamentos\n\n"
            "üåê `/webscraper [url]` - Extrair dados do site\n"
            "   üí° Exemplo: `/webscraper example.com`\n"
            "   üìß Extrai emails, telefones e links\n\n"
            "üë§ `/userinfo [user]` - Extrair info de usu√°rio\n"
            "   üí° Exemplo: `/userinfo @username`\n"
            "   üéØ Coleta dados p√∫blicos da conta\n\n"
            "üîç `/api [url]` - An√°lise completa de APIs\n"
            "   üí° Exemplo: `/api api.site.com`\n"
            "   üéØ Encontra endpoints, docs, GraphQL, etc\n\n"
            "üîë `/apikey [url]` - Buscar API Keys expostas\n"
            "   üí° Exemplo: `/apikey site.com`\n"
            "   üîë Procura chaves e tokens expostos\n\n"
            "üîí `/vulnerabilidades [url]` - Scanner de vulnerabilidades\n"
            "   üí° Exemplo: `/vulnerabilidades site.com`\n"
            "   üõ°Ô∏è Detecta falhas de seguran√ßa\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Dicas de uso:**\n"
            "‚Ä¢ URLs podem ser com ou sem https://\n"
            "‚Ä¢ Use `/reset` se algo der errado\n"
            "‚Ä¢ Resultados em formato TXT ou formatado\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üîç Usar /search", data=f"cmd_search:{id_user_btn}"),
                 Button.inline("üåê Usar /webscraper", data=f"cmd_webscraper:{id_user_btn}")],
                [Button.inline("üë§ Usar /userinfo", data=f"cmd_userinfo:{id_user_btn}"),
                 Button.inline("üîí Usar /vulnerabilidades", data=f"cmd_vulnerabilidades:{id_user_btn}")],
                [Button.inline("üîô Voltar √†s √Åreas", data=f"show_commands:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "area_reports":
        await safe_edit_message(event,
            "üì§ **COMANDOS DE REPORTS**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù `/report` - Reports Telegram (B√°sico)\n"
            "   üí° Sistema simples e r√°pido\n"
            "   üéØ Para canais, grupos e usu√°rios\n\n"
            "üì± `/reportwpp` - Reports WhatsApp\n"
            "   üí° Reportar n√∫meros suspeitos\n"
            "   üéØ Sistema automatizado\n\n"
            "‚ùå `/report2` - **INDISPON√çVEL**\n"
            "   ‚ö†Ô∏è Limita√ß√£o t√©cnica de bots\n"
            "   üí° Use /report como alternativa\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è **Importante:** Use com responsabilidade!\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üìù Usar /report", data=f"cmd_report:{id_user_btn}"),
                 Button.inline("üì± Usar /reportwpp", data=f"cmd_reportwpp:{id_user_btn}")],
                [Button.inline("üîô Voltar √†s √Åreas", data=f"show_commands:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "area_ferramentas":
        await safe_edit_message(event,
            "üõ†Ô∏è **COMANDOS DE FERRAMENTAS**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üõ†Ô∏è `/checker` - Catalyst Checker v3.0\n"
            "   üåê Sites Checker - Verificar status\n"
            "   üìä Verifica√ß√£o de sites populares\n"
            "   üéØ Sites customizados\n\n"
            "üé≤ `/geradores` - Ferramentas de Gera√ß√£o\n"
            "   üë§ Gerador de Pessoa Fake v2.0\n"
            "   üìä Banco de dados brasileiro real\n"
            "   ‚úÖ CPF e RG v√°lidos\n"
            "   üáßüá∑ Endere√ßos reais por estado\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **Recursos Dispon√≠veis:**\n"
            "‚Ä¢ Verifica√ß√£o de status de sites\n"
            "‚Ä¢ Gera√ß√£o de pessoas realistas\n"
            "‚Ä¢ Dados brasileiros aut√™nticos\n"
            "‚Ä¢ Milh√µes de combina√ß√µes poss√≠veis\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üõ†Ô∏è Usar /checker", data=f"cmd_checker:{id_user_btn}"),
                 Button.inline("üé≤ Usar /geradores", data=f"cmd_geradores:{id_user_btn}")],
                [Button.inline("üîô Voltar √†s √Åreas", data=f"show_commands:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "area_sistema":
        await safe_edit_message(event,
            "‚öôÔ∏è **COMANDOS DO SISTEMA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üè† `/start` - Iniciar o bot\n"
            "   üí° Comando inicial obrigat√≥rio\n"
            "   üìä Registra usu√°rio no sistema\n\n"
            "üîÑ `/reset` - Resetar todos os dados\n"
            "   üí° Limpa pesquisas em andamento\n"
            "   üõë Para reports em execu√ß√£o\n"
            "   üóÇÔ∏è Remove arquivos tempor√°rios\n\n"
            "üìã `/comandos` - Ver lista de comandos\n"
            "   üí° Menu interativo completo\n"
            "   üéØ Navega√ß√£o por categorias\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Dicas importantes:**\n"
            "‚Ä¢ Sempre use `/start` primeiro\n"
            "‚Ä¢ Use `/reset` se algo travar\n"
            "‚Ä¢ `/comandos` para ajuda r√°pida\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üè† Usar /start", data=f"cmd_start:{id_user_btn}"),
                 Button.inline("üîÑ Usar /reset", data=f"cmd_reset:{id_user_btn}")],
                [Button.inline("üìã Usar /comandos", data=f"cmd_comandos:{id_user_btn}")],
                [Button.inline("üîô Voltar √†s √Åreas", data=f"show_commands:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "lista_completa":
        await safe_edit_message(event,
            "üìã **LISTA COMPLETA DE COMANDOS**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üè† `/start` - Iniciar o bot\n"
            "üèì `/ping` - Verificar status do bot\n"
            "üîç `/search [url]` - Buscar logins em sites\n"
            "üåê `/webscraper [url]` - Extrair dados do site\n"
            "üë§ `/userinfo [user]` - Extrair info de usu√°rio\n"
            "üìù `/report` - Enviar reports Telegram\n"
            "‚ö° `/report2` - Sistema avan√ßado de reports\n"
            "üì± `/reportwpp` - Reportar n√∫meros WhatsApp\n"
            "üõ†Ô∏è `/checker` - Ferramentas Checker\n"
            "üé≤ `/geradores` - Ferramentas de Gera√ß√£o\n"
            "üîí `/vulnerabilidades [url]` - Scanner de vulnerabilidades\n"
            "üîÑ `/reset` - Resetar todos os dados\n"
            "üìã `/comandos` - Ver esta lista\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Como usar:**\n"
            "‚Ä¢ Digite o comando desejado\n"
            "‚Ä¢ Siga as instru√ß√µes do bot\n"
            "‚Ä¢ Use `/reset` se algo der errado\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üîô Voltar √†s √Åreas", data=f"show_commands:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "quick_check":
        # Verifica√ß√£o r√°pida de sites comuns
        quick_sites = ["https://google.com", "https://facebook.com", "https://youtube.com"]
        results = []
        for site in quick_sites:
            status_info = check_site_status(site)
            site_name = site.replace("https://", "")
            results.append(f"‚Ä¢ {site_name}: {status_info['status']}")

        await safe_edit_message(event,
            f"‚ö° **VERIFICA√á√ÉO R√ÅPIDA**\n\n" + "\n".join(results) + f"\n\nü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"sites_checker:{id_user_btn}")]]
        )

    elif acao == "full_status":
        # Status completo de v√°rios sites
        await safe_edit_message(event,
            "üìä **STATUS COMPLETO EM DESENVOLVIMENTO**\n\nü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"sites_checker:{id_user_btn}")]]
        )

    elif acao == "account_checker":
        await safe_edit_message(event,
            f"üîê **ACCOUNT CHECKER v3.0**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **CHECKERS DISPON√çVEIS:**\n\n"
            "üè• **ConsultCenter.com.br**\n"
            "   ‚Ä¢ Sistema de consultas m√©dicas\n"
            "   ‚Ä¢ Verifica√ß√£o de login v√°lido\n"
            "   ‚Ä¢ Multi-thread (15 threads)\n\n"
            "üè• **CREMERJ.org.br**\n"
            "   ‚Ä¢ Conselho Regional de Medicina RJ\n"
            "   ‚Ä¢ Verifica√ß√£o de m√©dicos\n"
            "   ‚Ä¢ Multi-thread (15 threads)\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Como usar:**\n"
            "1. Selecione o checker desejado\n"
            "2. Cole sua lista de combos (user:pass)\n"
            "3. Aguarde o resultado\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üè• ConsultCenter", data=f"check_consultcenter:{id_user_btn}"),
                 Button.inline("üè• CREMERJ", data=f"check_cremerj:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"checker_menu:{id_user_btn}")]
            ]
        )

    elif acao == "check_consultcenter":
        await safe_edit_message(event,
            f"üè• **CONSULTCENTER CHECKER**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **ESCOLHA O M√âTODO:**\n\n"
            "üîß **Checker Local**\n"
            "   ‚Ä¢ Verifica√ß√£o direta no site\n"
            "   ‚Ä¢ 15 threads simult√¢neas\n"
            "   ‚Ä¢ An√°lise detalhada\n\n"
            "üåê **Site Externo**\n"
            "   ‚Ä¢ Enviar para checker online\n"
            "   ‚Ä¢ Resultados j√° separados\n"
            "   ‚Ä¢ Mais r√°pido e eficiente\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üîß Checker Local", data=f"consultcenter_local:{id_user_btn}"),
                 Button.inline("üåê Site Externo", data=f"consultcenter_external:{id_user_btn}")],
                [Button.inline("üîô Voltar", data=f"account_checker:{id_user_btn}")]
            ]
        )

    elif acao == "consultcenter_local":
        # Criar estado para aguardar lista de combos (m√©todo local)
        globals()[f'consultcenter_state_{id_user_btn}'] = {'waiting_combos': True, 'method': 'local'}

        await safe_edit_message(event,
            f"üè• **CONSULTCENTER CHECKER - LOCAL**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Cole sua lista de combos:**\n\n"
            "üí° **Formato aceito:**\n"
            "```\n"
            "usuario1:senha1\n"
            "usuario2:senha2\n"
            "email@exemplo.com:senha123\n"
            "```\n\n"
            "üéØ **Sistema:** `sistema.consultcenter.com.br`\n"
            "‚ö° **Threads:** `15 simult√¢neas`\n"
            "üïê **Timeout:** `30 segundos`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Cole os combos no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"check_consultcenter:{id_user_btn}")]]
        )

    elif acao == "consultcenter_external":
        # Criar estado para aguardar URL do site e combos
        globals()[f'consultcenter_state_{id_user_btn}'] = {'waiting_site_url': True, 'method': 'external'}

        await safe_edit_message(event,
            f"üåê **CONSULTCENTER CHECKER - SITE EXTERNO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Digite a URL do site de checkers:**\n\n"
            "üí° **Exemplo:**\n"
            "`https://exemplo.com/checker`\n"
            "`https://site-checker.com`\n\n"
            "üéØ **O que acontece:**\n"
            "1. Bot acessa o site fornecido\n"
            "2. Encontra o formul√°rio de checker\n"
            "3. Envia seus combos automaticamente\n"
            "4. Retorna os resultados separados\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Digite a URL do site no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"check_consultcenter:{id_user_btn}")]]
        )

    elif acao == "check_cremerj":
                                    # Criar estado para aguardar lista de combos do CREMERJ
                                    globals()[f'cremerj_state_{id_user_btn}'] = {'waiting_combos': True}

                                    await safe_edit_message(event,
                                        f"üè• **CREMERJ CHECKER**\n\n"
                                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                                        "üìù **Cole sua lista de combos:**\n\n"
                                        "üí° **Formato aceito:**\n"
                                        "```\n"
                                        "crm12345:senha123\n"
                                        "medico@email.com:senha456\n"
                                        "usuario:password\n"
                                        "```\n\n"
                                        "üéØ **Sistema:** `cremerj.org.br`\n"
            "‚ö° **Threads:** `15 simult√¢neas`\n"
            "üïê **Timeout:** `30 segundos`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Cole os combos no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"account_checker:{id_user_btn}")]]
        )

    elif acao == "deletefile":
        id_user_btn = int(parts[1])
        if event.sender_id != id_user_btn:
            await event.answer("APENAS O USU√ÅRIO QUE RECEBEU O ARQUIVO PODE APAGAR.", alert=True)
            return
        await event.delete()

    elif acao == "cmd_search":
       await safe_edit_message(event, "Para usar o comando /search, digite /search [url] seguido do site que quer pesquisar.",
             buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_webscraper":
        await safe_edit_message(event, "Para usar o comando /webscraper, digite /webscraper [url] seguido do site que quer extrair os dados.",
              buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
          )

    elif acao == "cmd_report":
        await safe_edit_message(event, "Para usar o comando /report, basta digitar /report e seguir os passos do bot.",
               buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
           )

    elif acao == "cmd_reportwpp":
        await safe_edit_message(event, "Para usar o comando /reportwpp, basta digitar /reportwpp e seguir os passos do bot.",
                buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
            )

    elif acao == "cmd_checker":
        await safe_edit_message(event, "Para usar o comando /checker, basta digitar /checker e usar as ferramentas.",
                 buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
             )

    elif acao == "cmd_geradores":
        await safe_edit_message(event,
            "üé≤ **COMO USAR /geradores**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Uso simples:**\n"
            "Digite `/geradores` para acessar:\n\n"
            "üéØ **Funcionalidades:**\n"
            "‚Ä¢ üë§ Gerador de Pessoa Fake v2.0\n"
            "‚Ä¢ üìä Banco de dados brasileiro real\n"
            "‚Ä¢ ‚úÖ CPF e RG algoritmicamente v√°lidos\n"
            "‚Ä¢ üáßüá∑ Endere√ßos reais de todas as regi√µes\n"
            "‚Ä¢ üìû Telefones com DDDs v√°lidos\n"
            "‚Ä¢ üìß Emails com dom√≠nios brasileiros\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üé≤ **Milh√µes de combina√ß√µes poss√≠veis!**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_reset":
        await safe_edit_message(event, "Para usar o comando /reset, basta digitar /reset e os dados ser√£o resetados.",
                   buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
               )

    elif acao == "cmd_report2":
        await safe_edit_message(event,
            "‚ö° **COMO USAR /report2**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Passo a passo:**\n"
            "1. Digite `/report2`\n"
            "2. Escolha o tipo de den√∫ncia\n"
            "3. Selecione o tipo de alvo\n"
            "4. Informe o alvo (usu√°rio/canal/post)\n"
            "5. Escolha o motivo espec√≠fico\n"
            "6. Defina a quantidade (1-100)\n\n"
            "üéØ **Tipos de alvo:**\n"
            "‚Ä¢ üë§ Conta de usu√°rio\n"
            "‚Ä¢ üì¢ Canal p√∫blico\n"
            "‚Ä¢ üë• Grupo\n"
            "‚Ä¢ ü§ñ Bot\n"
            "‚Ä¢ üìù Post espec√≠fico\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è Use com responsabilidade!\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_start":
        await safe_edit_message(event,
            "üè† **COMO USAR /start**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Comando mais simples:**\n"
            "Basta digitar `/start` para iniciar o bot\n\n"
            "üéØ **O que acontece:**\n"
            "‚Ä¢ Registra voc√™ no sistema\n"
            "‚Ä¢ Mostra as funcionalidades\n"
            "‚Ä¢ Prepara o bot para uso\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚úÖ **Sempre use este comando primeiro!**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_comandos":
        await safe_edit_message(event,
            "üìã **COMO USAR /comandos**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Uso simples:**\n"
            "Digite `/comandos` para ver este menu\n\n"
            "üéØ **Funcionalidades:**\n"
            "‚Ä¢ Lista completa de comandos\n"
            "‚Ä¢ Navega√ß√£o por √°reas\n"
            "‚Ä¢ Bot√µes interativos\n"
            "‚Ä¢ Ajuda contextual\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Perfeito para iniciantes!**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_userinfo":
        await safe_edit_message(event,
            "üë§ **COMO USAR /userinfo**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Uso simples:**\n"
            "Digite `/userinfo [usu√°rio]` seguido do alvo\n\n"
            "üéØ **Formatos aceitos:**\n"
            "‚Ä¢ `/userinfo @username` - Por username\n"
            "‚Ä¢ `/userinfo username` - Sem @ tamb√©m funciona\n"
            "‚Ä¢ `/userinfo 123456789` - Por ID num√©rico\n\n"
            "üîç **Informa√ß√µes extra√≠das:**\n"
            "‚Ä¢ üìã Dados b√°sicos (nome, username, ID)\n"
            "‚Ä¢ üìû Telefone (se p√∫blico)\n"
            "‚Ä¢ üìù Biografia do perfil\n"
            "‚Ä¢ üñºÔ∏è Foto de perfil\n"
            "‚Ä¢ ‚öôÔ∏è Status e configura√ß√µes\n"
            "‚Ä¢ üë• Grupos em comum\n"
            "‚Ä¢ üõ°Ô∏è An√°lise de seguran√ßa\n"
            "‚Ä¢ ‚è∞ √öltima vez visto\n"
            "‚Ä¢ üîí Configura√ß√µes de privacidade\n\n"
            "üí° **Exemplo:**\n"
            "`/userinfo @telegram`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è **Importante:**\n"
            "‚Ä¢ Algumas informa√ß√µes podem estar ocultas\n"
            "‚Ä¢ Depende das configura√ß√µes de privacidade\n"
            "‚Ä¢ Use com responsabilidade!\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_vulnerabilidades":
        await safe_edit_message(event,
            "üîí **COMO USAR /vulnerabilidades**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Uso simples:**\n"
            "Digite `/vulnerabilidades [url]` seguido da URL do site\n\n"
            "üéØ **O que o scanner verifica:**\n"
            "‚Ä¢ üîê Cabe√ßalhos de seguran√ßa\n"
            "‚Ä¢ üîí Configura√ß√£o SSL/TLS\n"
            "‚Ä¢ üìÅ Arquivos sens√≠veis expostos\n"
            "‚Ä¢ üíâ SQL Injection\n"
            "‚Ä¢ üö® Cross-Site Scripting (XSS)\n"
            "‚Ä¢ üìÇ Directory Traversal\n"
            "‚Ä¢ üì∞ Information Disclosure\n"
            "‚Ä¢ üõ°Ô∏è Prote√ß√£o CSRF\n"
            "‚Ä¢ üåç Pol√≠tica CORS\n"
            "‚Ä¢ üîß Stack de tecnologias\n\n"
            "üí° **Exemplo:**\n"
            "`/vulnerabilidades https://example.com`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ö†Ô∏è **Use com responsabilidade e apenas em sites pr√≥prios!**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "cmd_ping":
        await safe_edit_message(event,
            "üèì **COMO USAR /ping**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **Uso simples:**\n"
            "Basta digitar `/ping` para verificar o status\n\n"
            "üéØ **Informa√ß√µes mostradas:**\n"
            "‚Ä¢ Status do bot (Online/Offline)\n"
            "‚Ä¢ Tempo de resposta em ms\n"
            "‚Ä¢ Uptime do sistema\n"
            "‚Ä¢ Usu√°rios registrados\n"
            "‚Ä¢ Vers√£o do Python e Telethon\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° **√ötil para verificar se o bot est√° funcionando!**\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    # Handlers para bot√µes de administrador
    elif acao == "admin_auth":
        if not eh_dono(id_user_btn):
            await event.answer("üö´ Acesso negado!", alert=True)
            return
            
        await safe_edit_message(event,
            "üîê **COMANDOS DE AUTORIZA√á√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Como usar:**\n\n"
            "üéØ **Autorizar permanente:**\n"
            "`/autorizar 123456789`\n\n"
            "‚è∞ **Autorizar tempor√°rio:**\n"
            "`/autorizar 123456789 30d` (30 dias)\n"
            "`/autorizar 123456789 12h` (12 horas)\n"
            "`/autorizar 123456789 60m` (60 minutos)\n\n"
            "‚ûï **Estender tempo:**\n"
            "`/estender 123456789 7d` (adicionar 7 dias)\n\n"
            "‚ùå **Remover autoriza√ß√£o:**\n"
            "`/desautorizar 123456789`\n\n"
            "üìã **Gerenciamento:**\n"
            "`/listautorizados` - Ver usu√°rios\n"
            "`/authstatus` - Status do sistema\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"comandos_voltar:{id_user_btn}")]]
        )

    elif acao == "admin_div":
        if not eh_dono(id_user_btn):
            await event.answer("üö´ Acesso negado!", alert=True)
            return
            
        await safe_edit_message(event,
            "üì¢ **COMANDOS DE DIVULGA√á√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Como usar:**\n\n"
            "üü¢ **Ativar/Desativar:**\n"
            "`/on` - Ativar divulga√ß√£o autom√°tica\n"
            "`/off` - Desativar divulga√ß√£o autom√°tica\n\n"
            "‚ûï **Adicionar chats:**\n"
            "`/addchat @canal` - Por username\n"
            "`/addchat -100123456789` - Por ID\n\n"
            "‚ûñ **Remover chats:**\n"
            "`/removechat @canal` - Por username\n"
            "`/removechat -100123456789` - Por ID\n\n"
            "üìã **Gerenciamento:**\n"
            "`/listchats` - Ver chats autorizados\n"
            "`/divconfig` - Configura√ß√µes\n"
            "`/testdiv` - Testar sistema\n\n"
            "‚è∞ **Intervalo:** 20 minutos autom√°tico\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"comandos_voltar:{id_user_btn}")]]
        )

    elif acao == "admin_broadcast":
        if not eh_dono(id_user_btn):
            await event.answer("üö´ Acesso negado!", alert=True)
            return
            
        await safe_edit_message(event,
            "üì∫ **COMANDOS DE BROADCAST**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Como usar:**\n\n"
            "üì¢ **Broadcast Geral:**\n"
            "`/broadcast [mensagem]` - Envia para todos os usu√°rios registrados\n\n"
            "üë• **Broadcast Autorizados:**\n"
            "`/broadcastauth [mensagem]` - Envia apenas para usu√°rios autorizados\n\n"
            "üí° **Exemplos:**\n"
            "`/broadcast üéâ Novidades no bot! Confira as novas funcionalidades.`\n"
            "`/broadcastauth ‚ö†Ô∏è Manuten√ß√£o programada para hoje √†s 20h.`\n\n"
            "‚ö†Ô∏è **Importante:**\n"
            "‚Ä¢ O sistema solicita confirma√ß√£o antes de enviar\n"
            "‚Ä¢ Mostra estat√≠sticas de envio em tempo real\n"
            "‚Ä¢ Ignora usu√°rios que bloquearam o bot\n"
            "‚Ä¢ Delay autom√°tico para evitar spam\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"comandos_voltar:{id_user_btn}")]]
        )

    elif acao == "admin_restart":
        if not eh_dono(id_user_btn):
            await event.answer("üö´ Acesso negado!", alert=True)
            return
            
        await safe_edit_message(event,
            "üîÑ **COMANDO RESTART BOT**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìù **Como usar:**\n"
            "`/restartbot`\n\n"
            "‚ö° **O que faz:**\n"
            "‚Ä¢ üóÇÔ∏è Limpa dados tempor√°rios\n"
            "‚Ä¢ üîÑ Reseta vari√°veis globais\n"
            "‚Ä¢ ‚èπÔ∏è Para reports em andamento\n"
            "‚Ä¢ üõë Cancela buscas ativas\n"
            "‚Ä¢ üíæ Otimiza mem√≥ria do sistema\n"
            "‚Ä¢ üöÄ Deixa o bot mais leve\n\n"
            "‚ö†Ô∏è **Importante:**\n"
            "‚Ä¢ Todos os processos em andamento ser√£o parados\n"
            "‚Ä¢ Usu√°rios ser√£o notificados\n"
            "‚Ä¢ O bot continuar√° funcionando normalmente\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"comandos_voltar:{id_user_btn}")]]
        )

    elif acao == "admin_status":
        if not eh_dono(id_user_btn):
            await event.answer("üö´ Acesso negado!", alert=True)
            return
            
        # Estat√≠sticas do sistema
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM usuarios WHERE admin = 'yes' OR data_expiracao IS NULL OR data_expiracao > datetime('now')")
        users_authorized = cursor.fetchone()[0]

        await safe_edit_message(event,
            f"üìä **STATUS DO SISTEMA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë• **Usu√°rios totais:** {total_users}\n"
            f"‚úÖ **Usu√°rios autorizados:** {users_authorized}\n"
            f"üì¢ **Chats de divulga√ß√£o:** {len(chats_autorizados)}\n"
            f"üîÑ **Divulga√ß√£o ativa:** {'üü¢ Sim' if divulgacao_ativa else 'üî¥ N√£o'}\n"
            f"üëë **ID do dono:** `{DONO_ID}`\n\n"
            "‚ö° **Estado dos servi√ßos:**\n"
            f"üóÑÔ∏è **Banco de dados:** ‚úÖ Conectado\n"
            f"ü§ñ **Bot:** ‚úÖ Online\n"
            f"üìä **Reports:** {'üü¢ Ativo' if not (report_data['running'] or whatsapp_report_data['running']) else 'üü° Em uso'}\n"
            f"üîç **Buscas:** {'üü¢ Dispon√≠vel' if not usuarios_bloqueados else 'üü° Em uso'}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"comandos_voltar:{id_user_btn}")]]
        )

    elif acao == "test_external_integration":
        # Iniciar teste de integra√ß√£o externa
        globals()[f'test_integration_state_{id_user_btn}'] = {'waiting_site_url': True}

        await safe_edit_message(event,
            f"üß™ **TESTE DE INTEGRA√á√ÉO - PASSO 1/2**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üåê **Digite a URL do site de checkers:**\n\n"
            "üí° **Exemplos:**\n"
            "`https://checker-site.com`\n"
            "`https://exemplo.com/checker`\n"
            "`https://tools.site.com/consultcenter`\n\n"
            "üéØ **O bot ir√°:**\n"
            "‚Ä¢ Acessar o site automaticamente\n"
            "‚Ä¢ Encontrar o formul√°rio de checker\n"
            "‚Ä¢ Analisar a estrutura da p√°gina\n"
            "‚Ä¢ Preparar para envio dos combos\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚å®Ô∏è Digite a URL no chat:",
            buttons=[[Button.inline("üîô Voltar", data=f"test_consultcenter_menu:{id_user_btn}")]]
        )

    elif acao == "show_integration_example":
        await safe_edit_message(event,
            f"üìã **EXEMPLO DE INTEGRA√á√ÉO**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **Cen√°rio:**\n"
            "Voc√™ tem um site de checkers online e quer que o bot envie os combos automaticamente.\n\n"
            "üîÑ **Processo:**\n"
            "1. **Usu√°rio clica em 'ConsultCenter'**\n"
            "2. **Escolhe 'Site Externo'**\n"
            "3. **Cola a URL: `https://seu-site.com/checker`**\n"
            "4. **Cola os combos:**\n"
            "   ```\n"
            "   user1:pass1\n"
            "   user2:pass2\n"
            "   user3:pass3\n"
            "   ```\n"
            "5. **Bot faz tudo sozinho:**\n"
            "   ‚Ä¢ Acessa o site\n"
            "   ‚Ä¢ Encontra o formul√°rio\n"
            "   ‚Ä¢ Envia os combos\n"
            "   ‚Ä¢ Extrai os resultados\n"
            "   ‚Ä¢ Separa LIVE/DIE\n"
            "   ‚Ä¢ Retorna organizado\n\n"
            "‚ú® **Resultado:** Checagem autom√°tica sem trabalho manual!\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üîô Voltar", data=f"test_consultcenter_menu:{id_user_btn}")]]
        )

    elif acao == "test_consultcenter_menu":
        # Voltar ao menu de teste
        await safe_edit_message(event,
            f"üß™ **TESTE DE INTEGRA√á√ÉO CONSULTCENTER**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **Este comando testa:**\n"
            "‚Ä¢ Integra√ß√£o com sites externos\n"
            "‚Ä¢ An√°lise autom√°tica de formul√°rios\n"
            "‚Ä¢ Extra√ß√£o de resultados\n"
            "‚Ä¢ Separa√ß√£o de LIVE/DIE\n\n"
            "üí° **Como usar:**\n"
            "1. Clique em 'Testar Integra√ß√£o'\n"
            "2. Cole a URL do site de checker\n"
            "3. Cole alguns combos de teste\n"
            "4. Veja a m√°gica acontecer! ‚ú®\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üß™ Testar Integra√ß√£o", data=f"test_external_integration:{id_user_btn}")],
                [Button.inline("üìã Ver Exemplo", data=f"show_integration_example:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "comandos_voltar":
        # Reexibir o menu de comandos
        await safe_edit_message(event,
            "üìã **Voltando ao menu de comandos...**",
            buttons=[]
        )
        # Simular o comando /comandos novamente
        await comandos_handler(event)

    elif acao == "confirm_broadcast":
        # Confirmar e executar broadcast geral
        if f'broadcast_message_{id_user_btn}' in globals() and f'broadcast_users_{id_user_btn}' in globals():
            mensagem = globals()[f'broadcast_message_{id_user_btn}']
            usuarios_lista = globals()[f'broadcast_users_{id_user_btn}']
            
            await safe_edit_message(event,
                "üì¢ **Broadcast confirmado! Iniciando envio...**",
                buttons=[]
            )
            
            # Executar broadcast em background
            asyncio.create_task(executar_broadcast(id_user_btn, usuarios_lista, mensagem, "geral"))
            
            # Limpar dados tempor√°rios
            del globals()[f'broadcast_message_{id_user_btn}']
            del globals()[f'broadcast_users_{id_user_btn}']
        else:
            await event.answer("‚ùå Dados do broadcast n√£o encontrados!", alert=True)

    elif acao == "confirm_broadcast_auth":
        # Confirmar e executar broadcast para autorizados
        if f'broadcast_message_{id_user_btn}' in globals() and f'broadcast_users_auth_{id_user_btn}' in globals():
            mensagem = globals()[f'broadcast_message_{id_user_btn}']
            usuarios_lista = globals()[f'broadcast_users_auth_{id_user_btn}']
            
            await safe_edit_message(event,
                "üì¢ **Broadcast para autorizados confirmado! Iniciando envio...**",
                buttons=[]
            )
            
            # Executar broadcast em background
            asyncio.create_task(executar_broadcast(id_user_btn, usuarios_lista, mensagem, "autorizados"))
            
            # Limpar dados tempor√°rios
            del globals()[f'broadcast_message_{id_user_btn}']
            del globals()[f'broadcast_users_auth_{id_user_btn}']
        else:
            await event.answer("‚ùå Dados do broadcast n√£o encontrados!", alert=True)

    elif acao == "cancel_broadcast":
        # Cancelar broadcast
        if f'broadcast_message_{id_user_btn}' in globals():
            del globals()[f'broadcast_message_{id_user_btn}']
        if f'broadcast_users_{id_user_btn}' in globals():
            del globals()[f'broadcast_users_{id_user_btn}']
        if f'broadcast_users_auth_{id_user_btn}' in globals():
            del globals()[f'broadcast_users_auth_{id_user_btn}']
            
        await safe_edit_message(event,
            "‚ùå **Broadcast cancelado pelo usu√°rio.**",
            buttons=[]
        )

    elif acao == "ping_again":
        # Recalcular ping
        start_time = time.time()
        response_time = round((time.time() - start_time) * 1000, 2)

        # Calcular uptime
        uptime_seconds = time.time() - bot_start_time if 'bot_start_time' in globals() else 0
        uptime_hours = int(uptime_seconds // 3600)
        uptime_minutes = int((uptime_seconds % 3600) // 60)
        uptime_secs = int(uptime_seconds % 60)

        # Contar usu√°rios
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_users = cursor.fetchone()[0]

        await safe_edit_message(event,
            f"üèì **PONG! BOT ONLINE**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"‚ö° **STATUS:** `üü¢ ONLINE`\n"
            f"üïê **Tempo de resposta:** `{response_time}ms`\n"
            f"‚è∞ **Uptime:** `{uptime_hours:02d}:{uptime_minutes:02d}:{uptime_secs:02d}`\n"
            f"üë• **Usu√°rios registrados:** `{total_users}`\n"
            f"üóÑÔ∏è **Banco de dados:** `‚úÖ Conectado`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí° **Informa√ß√µes do sistema:**\n"
            f"üêç **Python:** `{platform.python_version()}`\n"
            f"ü§ñ **Telethon:** `{telethon.__version__}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üîÑ Ping novamente", data=f"ping_again:{id_user_btn}"),
                 Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )

    elif acao == "use_command":
        # Extrair o comando sugerido
        comando_sugerido = parts[1]

        await event.answer(f"‚úÖ Usando comando: {comando_sugerido}", alert=True)

        # Simular o uso do comando enviando uma mensagem
        await safe_edit_message(event,
            f"‚úÖ **COMANDO CORRIGIDO**\n\n"
            f"üéØ **Comando selecionado:** `{comando_sugerido}`\n\n"
            f"üí° **Para usar, digite:** `{comando_sugerido}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]]
        )

    elif acao == "show_commands":
        await safe_edit_message(event,
            "üìã **√ÅREAS DE COMANDOS DISPON√çVEIS**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **Escolha uma √°rea para ver os comandos:**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot",
            buttons=[
                [Button.inline("üîç Busca & Extra√ß√£o", data=f"area_busca:{id_user_btn}"),
                 Button.inline("üì§ Reports", data=f"area_reports:{id_user_btn}")],
                [Button.inline("üõ†Ô∏è Ferramentas", data=f"area_ferramentas:{id_user_btn}"),
                 Button.inline("‚öôÔ∏è Sistema", data=f"area_sistema:{id_user_btn}")],
                [Button.inline("üìã Lista Completa", data=f"lista_completa:{id_user_btn}")],
                [Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{id_user_btn}")]
            ]
        )
@bot.on(events.CallbackQuery(pattern=r'^deletefile:(\d+)$'))
async def delete_file_handler(event):
    id_user_btn = int(event.pattern_match.group(1))
    if event.sender_id != id_user_btn:
        await event.answer("APENAS O USU√ÅRIO QUE RECEBEU O ARQUIVO PODE APAGAR.", alert=True)
        return
    await event.delete()

@bot.on(events.NewMessage(pattern=r'^/ping$'))
async def ping_handler(event):
    """Comando para verificar se o bot est√° online e mostrar informa√ß√µes b√°sicas"""
    try:
        # Verificar autoriza√ß√£o
        if not eh_autorizado(event.sender_id):
            await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
            return

        start_time = time.time()
        user_id = event.sender_id

        # Calcular tempo de resposta
        response_time = round((time.time() - start_time) * 1000, 2)

        # Calcular uptime do bot
        uptime_seconds = time.time() - bot_start_time if 'bot_start_time' in globals() else 0
        uptime_hours = int(uptime_seconds // 3600)
        uptime_minutes = int((uptime_seconds % 3600) // 60)
        uptime_secs = int(uptime_seconds % 60)

        # Contar usu√°rios no banco
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_users = cursor.fetchone()[0]

        ping_message = f"""üèì **PONG! BOT ONLINE**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° **STATUS:** `üü¢ ONLINE`
üïê **Tempo de resposta:** `{response_time}ms`
‚è∞ **Uptime:** `{uptime_hours:02d}:{uptime_minutes:02d}:{uptime_secs:02d}`
üë• **Usu√°rios registrados:** `{total_users}`
üóÑÔ∏è **Banco de dados:** `‚úÖ Conectado`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° **Informa√ß√µes do sistema:**
üêç **Python:** `{platform.python_version()}`
ü§ñ **Telethon:** `{telethon.__version__}`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü§ñ @CatalystServerRobot"""

        await event.reply(
            ping_message,
            buttons=[[Button.inline("üîÑ Ping novamente", data=f"ping_again:{user_id}"),
                     Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
        )

    except Exception as e:
        await event.reply(
            f"‚ùå **ERRO NO COMANDO PING**\n\n"
            f"‚ö†Ô∏è Erro: `{str(e)}`\n\n"
            "ü§ñ @CatalystServerRobot"
        )

# Comando /apikey (renomeado de /findkeys)  
@bot.on(events.NewMessage(pattern=r'^/apikey (.+)'))
async def find_api_keys_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    url = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    processing_msg = await event.reply(
        f"üîë **BUSCANDO API KEYS...**\n\n"
        f"üåê **URL:** `{url}`\n"
        f"‚è≥ **STATUS:** Analisando c√≥digo fonte...\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üîç **Procurando por:**\n"
        "‚Ä¢ API Keys expostas\n"
        "‚Ä¢ Tokens de acesso\n"
        "‚Ä¢ Chaves secretas\n"
        "‚Ä¢ Credenciais em JavaScript\n"
        "‚Ä¢ Headers de autentica√ß√£o\n\n"
        "‚è≥ **Aguarde, isso pode levar alguns minutos...**"
    )

    try:
        import requests
        from bs4 import BeautifulSoup
        import re

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(url, headers=headers, timeout=15)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Padr√µes para encontrar API keys
        api_key_patterns = [
            # API Keys gerais
            (r'["\']?api[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{10,})["\']', "API Key"),
            (r'["\']?apikey["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{10,})["\']', "API Key"),
            (r'["\']?access[_-]?token["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_\.]{10,})["\']', "Access Token"),
            (r'["\']?secret[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{10,})["\']', "Secret Key"),
            (r'["\']?private[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{10,})["\']', "Private Key"),
            
            # Tokens espec√≠ficos
            (r'Bearer\s+([A-Za-z0-9\-\._~\+\/]+)', "Bearer Token"),
            (r'["\']?token["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_\.]{15,})["\']', "Token"),
            
            # Servi√ßos espec√≠ficos
            (r'["\']?google[_-]?api[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{30,})["\']', "Google API Key"),
            (r'["\']?stripe[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{30,})["\']', "Stripe Key"),
            (r'["\']?aws[_-]?access[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9]{16,})["\']', "AWS Access Key"),
            (r'["\']?firebase[_-]?key["\']?\s*[:=]\s*["\']([A-Za-z0-9\-_]{30,})["\']', "Firebase Key"),
            
            # Outros padr√µes
            (r'Authorization\s*:\s*["\']([^"\']+)["\']', "Authorization Header"),
            (r'X-API-Key\s*:\s*["\']([^"\']+)["\']', "X-API-Key Header"),
        ]

        found_keys = []
        all_text = response.text

        # Buscar nos scripts JavaScript
        scripts = soup.find_all('script')
        for script in scripts:
            if script.string:
                all_text += script.string

        # Buscar patterns
        for pattern, key_type in api_key_patterns:
            matches = re.findall(pattern, all_text, re.IGNORECASE)
            for match in matches:
                if len(match) > 8 and match not in ['example', 'test', 'demo', 'placeholder']:
                    found_keys.append({
                        'type': key_type,
                        'value': match,
                        'length': len(match)
                    })

        # Remover duplicatas
        unique_keys = []
        seen = set()
        for key in found_keys:
            if key['value'] not in seen:
                unique_keys.append(key)
                seen.add(key['value'])

        if unique_keys:
            message = f"üîë **API KEYS ENCONTRADAS - {url}**\n\n"
            message += f"üìä **Total encontrado:** `{len(unique_keys)} keys`\n\n"
            message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

            for i, key in enumerate(unique_keys[:10], 1):  # Mostrar apenas as primeiras 10
                message += f"**{i}. {key['type']}**\n"
                message += f"üîë `{key['value'][:50]}{'...' if len(key['value']) > 50 else ''}`\n"
                message += f"üìè Tamanho: {key['length']} caracteres\n\n"

            if len(unique_keys) > 10:
                message += f"‚Ä¢ ... e mais {len(unique_keys) - 10} keys encontradas\n\n"

            message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            message += "‚ö†Ô∏è **IMPORTANTE:**\n"
            message += "‚Ä¢ Verifique se as keys s√£o v√°lidas\n"
            message += "‚Ä¢ Teste em ambiente controlado\n"
            message += "‚Ä¢ Use com responsabilidade\n\n"
            message += "ü§ñ @CatalystServerRobot"

            # Criar arquivo com todas as keys se houver muitas
            if len(unique_keys) > 5:
                filename = f"temp/api_keys_{user_id}.txt"
                os.makedirs("temp", exist_ok=True)
                
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(f"=== API KEYS ENCONTRADAS ===\n")
                    f.write(f"Site: {url}\n")
                    f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                    f.write(f"Total: {len(unique_keys)} keys\n\n")
                    
                    for i, key in enumerate(unique_keys, 1):
                        f.write(f"{i}. {key['type']}\n")
                        f.write(f"Key: {key['value']}\n")
                        f.write(f"Tamanho: {key['length']} caracteres\n\n")

                await processing_msg.edit(message)
                await bot.send_file(
                    user_id, 
                    file=filename,
                    caption=f"üîë **Todas as API Keys encontradas - {url}**\n\nü§ñ @CatalystServerRobot",
                    buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
                )

                # Limpar arquivo tempor√°rio
                try:
                    os.remove(filename)
                except:
                    pass
            else:
                await processing_msg.edit(message, 
                    buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
                )
        else:
            await processing_msg.edit(
                f"‚ùå **NENHUMA API KEY ENCONTRADA**\n\n"
                f"üåê **URL:** `{url}`\n\n"
                "üîç **Verifica√ß√µes realizadas:**\n"
                "‚Ä¢ C√≥digo fonte da p√°gina\n"
                "‚Ä¢ Scripts JavaScript\n"
                "‚Ä¢ Headers de resposta\n"
                "‚Ä¢ Padr√µes comuns de keys\n\n"
                "üí° **Dicas:**\n"
                "‚Ä¢ Tente URLs mais espec√≠ficas (ex: /js/app.js)\n"
                "‚Ä¢ Verifique se o site usa autentica√ß√£o\n"
                "‚Ä¢ Analise o c√≥digo fonte manualmente\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
            )

    except Exception as e:
        await processing_msg.edit(
            f"‚ùå **ERRO AO BUSCAR API KEYS**\n\n"
            f"‚ö†Ô∏è Erro: `{str(e)[:200]}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° Tente novamente ou verifique a URL.\n\n"
            "ü§ñ @CatalystServerRobot"
        )

# Comando /api (renomeado de /apianalyzer)
@bot.on(events.NewMessage(pattern=r'^/api (.+)'))
async def api_analyzer_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    url = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    if not API_ANALYZER_AVAILABLE:
        await event.reply(
            f"‚ùå **API ANALYZER INDISPON√çVEL**\n\n"
            "‚ö†Ô∏è O m√≥dulo de an√°lise de APIs n√£o est√° dispon√≠vel no momento.\n\n"
            "üí° Use `/webscraper {url}` como alternativa para extrair dados b√°sicos.\n\n"
            "ü§ñ @CatalystServerRobot"
        )
        return

    processing_msg = await event.reply(
        f"üîç **INICIANDO AN√ÅLISE COMPLETA DE APIs...**\n\n"
        f"üåê **URL:** `{url}`\n"
        f"‚è≥ **STATUS:** Analisando APIs...\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üéØ **An√°lises em andamento:**\n"
        "‚Ä¢ Endpoints JavaScript\n"
        "‚Ä¢ Formul√°rios e campos\n"
        "‚Ä¢ Documenta√ß√£o de APIs\n"
        "‚Ä¢ Swagger/OpenAPI\n"
        "‚Ä¢ GraphQL endpoints\n"
        "‚Ä¢ WebSocket endpoints\n"
        "‚Ä¢ M√©todos de autentica√ß√£o\n"
        "‚Ä¢ An√°lise de CORS\n"
        "‚Ä¢ Vulnerabilidades comuns\n\n"
        "‚è≥ **Aguarde, isso pode levar alguns minutos...**"
    )

    try:
        # Executar an√°lise completa
        results = await asyncio.to_thread(analyze_website_apis_comprehensive, url)

        if "error" in results:
            await processing_msg.edit(
                f"‚ùå **ERRO NA AN√ÅLISE DE APIs**\n\n"
                f"üåê URL: `{url}`\n"
                f"‚ö†Ô∏è Erro: `{results['error']}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üí° Verifique se a URL est√° correta e acess√≠vel.\n\n"
                "ü§ñ @CatalystServerRobot"
            )
            return

        # Formatar resultados resumidos
        message = f"üîç **AN√ÅLISE COMPLETA DE APIs - RESULTADO**\n\n"
        message += f"üåê **URL:** `{results['target_url']}`\n"
        message += f"üìÖ **Data:** `{results['analysis_timestamp']}`\n"
        message += f"üéØ **Total de endpoints:** `{results.get('total_endpoints_found', 0)}`\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # Resumo por categoria
        categories = [
            ("üìù Formul√°rios", "forms"),
            ("üîß APIs JavaScript", "javascript_apis"),
            ("üåê Endpoints", "endpoints"),
            ("üìö Documenta√ß√£o", "api_documentation"),
            ("üìã Swagger/OpenAPI", "swagger_openapi"),
            ("‚ö° GraphQL", "graphql_endpoints"),
            ("üîå WebSockets", "websocket_endpoints"),
            ("üîê Autentica√ß√£o", "authentication_methods"),
            ("üõ°Ô∏è Vulnerabilidades", "common_vulnerabilities")
        ]

        for name, key in categories:
            data = results.get(key, [])
            if data:
                message += f"{name}: `{len(data)}`\n"

        if results.get('cors_analysis', {}).get('cors_enabled'):
            message += f"üåç CORS: `Habilitado`\n"

        message += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        message += f"üìÑ **Relat√≥rio completo ser√° enviado como arquivo**\n\n"
        message += "ü§ñ @CatalystServerRobot"

        # Criar arquivo com resultados completos
        filename = f"temp/api_analysis_{user_id}.json"
        os.makedirs("temp", exist_ok=True)
        
        with open(filename, "w", encoding="utf-8") as f:
            import json
            json.dump(results, f, indent=2, ensure_ascii=False)

        await processing_msg.edit(message)
        await bot.send_file(
            user_id, 
            file=filename,
            caption=f"üìÑ **An√°lise Completa de APIs - {results['target_url']}**\n\nü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
        )

        # Limpar arquivo tempor√°rio
        try:
            os.remove(filename)
        except:
            pass

    except Exception as e:
        await processing_msg.edit(
            f"‚ùå **ERRO DURANTE AN√ÅLISE**\n\n"
            f"‚ö†Ô∏è Erro: `{str(e)[:200]}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° Tente novamente ou verifique a URL.\n\n"
            "ü§ñ @CatalystServerRobot"
        )

# Classe para scanner de vulnerabilidades
class VulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities_found = []
        self.scan_results = {}

    async def scan_website(self, url):
        """Scanner completo de vulnerabilidades"""
        self.vulnerabilities_found = []
        self.scan_results = {
            'url': url,
            'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'vulnerabilities': [],
            'security_headers': {},
            'ssl_info': {},
            'open_ports': [],
            'technology_stack': [],
            'sensitive_files': [],
            'sql_injection': [],
            'xss_vectors': [],
            'directory_traversal': [],
            'information_disclosure': [],
            'csrf_protection': 'unknown',
            'cors_policy': 'unknown'
        }

        try:
            # 1. Verificar cabe√ßalhos de seguran√ßa
            await self._check_security_headers(url)
            
            # 2. Verificar SSL/TLS
            await self._check_ssl_configuration(url)
            
            # 3. Verificar arquivos sens√≠veis
            await self._check_sensitive_files(url)
            
            # 4. Testar SQL Injection
            await self._test_sql_injection(url)
            
            # 5. Testar XSS
            await self._test_xss_vulnerabilities(url)
            
            # 6. Testar Directory Traversal
            await self._test_directory_traversal(url)
            
            # 7. Verificar Information Disclosure
            await self._check_information_disclosure(url)
            
            # 8. Verificar prote√ß√£o CSRF
            await self._check_csrf_protection(url)
            
            # 9. Verificar pol√≠tica CORS
            await self._check_cors_policy(url)
            
            # 10. Detectar tecnologias
            await self._detect_technologies(url)

            return self.scan_results

        except Exception as e:
            self.scan_results['error'] = str(e)
            return self.scan_results

    async def _check_security_headers(self, url):
        """Verificar cabe√ßalhos de seguran√ßa"""
        try:
            response = requests.get(url, timeout=10, verify=False)
            headers = response.headers

            security_headers = {
                'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
                'X-Frame-Options': headers.get('X-Frame-Options'),
                'X-XSS-Protection': headers.get('X-XSS-Protection'),
                'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
                'Content-Security-Policy': headers.get('Content-Security-Policy'),
                'Referrer-Policy': headers.get('Referrer-Policy'),
                'Permissions-Policy': headers.get('Permissions-Policy')
            }

            self.scan_results['security_headers'] = security_headers

            # Verificar vulnerabilidades relacionadas aos headers
            missing_headers = []
            for header, value in security_headers.items():
                if not value:
                    missing_headers.append(header)
                    self.vulnerabilities_found.append({
                        'type': 'Missing Security Header',
                        'severity': 'Medium',
                        'description': f'Header {header} n√£o encontrado',
                        'recommendation': f'Adicionar header {header} para melhor seguran√ßa'
                    })

            if 'Server' in headers:
                self.vulnerabilities_found.append({
                    'type': 'Information Disclosure',
                    'severity': 'Low',
                    'description': f'Server header exposto: {headers["Server"]}',
                    'recommendation': 'Ocultar ou modificar o header Server'
                })

        except Exception as e:
            self.scan_results['security_headers']['error'] = str(e)

    async def _check_ssl_configuration(self, url):
        """Verificar configura√ß√£o SSL/TLS"""
        try:
            if url.startswith('https://'):
                import ssl
                import socket
                from urllib.parse import urlparse

                parsed_url = urlparse(url)
                hostname = parsed_url.hostname
                port = parsed_url.port or 443

                context = ssl.create_default_context()
                
                with socket.create_connection((hostname, port), timeout=10) as sock:
                    with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                        cert = ssock.getpeercert()
                        
                        self.scan_results['ssl_info'] = {
                            'version': ssock.version(),
                            'cipher': ssock.cipher(),
                            'certificate': {
                                'subject': dict(x[0] for x in cert['subject']),
                                'issuer': dict(x[0] for x in cert['issuer']),
                                'version': cert['version'],
                                'notBefore': cert['notBefore'],
                                'notAfter': cert['notAfter']
                            }
                        }

                        # Verificar se o certificado est√° pr√≥ximo do vencimento
                        from datetime import datetime
                        not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                        days_until_expiry = (not_after - datetime.now()).days

                        if days_until_expiry < 30:
                            self.vulnerabilities_found.append({
                                'type': 'SSL Certificate',
                                'severity': 'High' if days_until_expiry < 7 else 'Medium',
                                'description': f'Certificado SSL expira em {days_until_expiry} dias',
                                'recommendation': 'Renovar certificado SSL'
                            })

        except Exception as e:
            self.scan_results['ssl_info']['error'] = str(e)

    async def _check_sensitive_files(self, url):
        """Verificar arquivos sens√≠veis expostos"""
        sensitive_paths = [
            '/robots.txt',
            '/.env',
            '/config.php',
            '/wp-config.php',
            '/.git/config',
            '/admin',
            '/administrator',
            '/phpmyadmin',
            '/mysql',
            '/database',
            '/backup',
            '/test',
            '/dev',
            '/api',
            '/debug',
            '/.htaccess',
            '/web.config',
            '/crossdomain.xml',
            '/clientaccesspolicy.xml',
            '/sitemap.xml',
            '/readme.txt',
            '/license.txt',
            '/changelog.txt'
        ]

        base_url = url.rstrip('/')
        found_files = []

        for path in sensitive_paths:
            try:
                test_url = base_url + path
                response = requests.get(test_url, timeout=5, verify=False)
                
                if response.status_code == 200:
                    found_files.append({
                        'path': path,
                        'status_code': response.status_code,
                        'content_length': len(response.content),
                        'content_type': response.headers.get('Content-Type', 'unknown')
                    })

                    severity = 'High' if path in ['/.env', '/config.php', '/.git/config'] else 'Medium'
                    
                    self.vulnerabilities_found.append({
                        'type': 'Sensitive File Exposure',
                        'severity': severity,
                        'description': f'Arquivo sens√≠vel exposto: {path}',
                        'recommendation': f'Restringir acesso ao arquivo {path}'
                    })

            except:
                continue

        self.scan_results['sensitive_files'] = found_files

    async def _test_sql_injection(self, url):
        """Testar SQL Injection"""
        sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "' UNION SELECT NULL--",
            "'; DROP TABLE users--",
            "' AND (SELECT COUNT(*) FROM information_schema.tables)>0--",
            "' OR SLEEP(5)--"
        ]

        sql_vulnerabilities = []
        
        try:
            # Primeiro, fazer uma requisi√ß√£o normal para compara√ß√£o
            normal_response = requests.get(url, timeout=10, verify=False)
            normal_time = normal_response.elapsed.total_seconds()
            normal_content = normal_response.text

            for payload in sql_payloads:
                try:
                    # Testar em par√¢metros GET
                    test_url = f"{url}?id={payload}"
                    response = requests.get(test_url, timeout=15, verify=False)
                    response_time = response.elapsed.total_seconds()

                    # Verificar indicadores de SQL Injection
                    error_indicators = [
                        'mysql_fetch_array',
                        'ORA-01756',
                        'Microsoft OLE DB Provider for ODBC Drivers',
                        'SQLServer JDBC Driver',
                        'postgresql',
                        'syntax error',
                        'mysql_num_rows',
                        'Warning: mysql',
                        'MySQLSyntaxErrorException'
                    ]

                    content_lower = response.text.lower()
                    
                    for indicator in error_indicators:
                        if indicator.lower() in content_lower:
                            sql_vulnerabilities.append({
                                'payload': payload,
                                'url': test_url,
                                'indicator': indicator,
                                'method': 'GET'
                            })

                            self.vulnerabilities_found.append({
                                'type': 'SQL Injection',
                                'severity': 'Critical',
                                'description': f'Poss√≠vel SQL Injection com payload: {payload}',
                                'recommendation': 'Implementar prepared statements e valida√ß√£o de entrada'
                            })
                            break

                    # Verificar time-based SQL injection
                    if 'SLEEP' in payload and response_time > normal_time + 4:
                        sql_vulnerabilities.append({
                            'payload': payload,
                            'url': test_url,
                            'indicator': f'Time delay: {response_time}s',
                            'method': 'GET (Time-based)'
                        })

                        self.vulnerabilities_found.append({
                            'type': 'Time-based SQL Injection',
                            'severity': 'Critical',
                            'description': f'Time-based SQL Injection detectado com delay de {response_time}s',
                            'recommendation': 'Implementar prepared statements e valida√ß√£o de entrada'
                        })

                except:
                    continue

        except Exception as e:
            sql_vulnerabilities.append({'error': str(e)})

        self.scan_results['sql_injection'] = sql_vulnerabilities

    async def _test_xss_vulnerabilities(self, url):
        """Testar XSS (Cross-Site Scripting)"""
        xss_payloads = [
            '<script>alert("XSS")</script>',
            '<img src=x onerror=alert("XSS")>',
            '<svg onload=alert("XSS")>',
            '"><script>alert("XSS")</script>',
            "javascript:alert('XSS')",
            '<iframe src="javascript:alert(\'XSS\')"></iframe>',
            '<body onload=alert("XSS")>',
            '<input type="text" onfocus="alert(\'XSS\')" autofocus>'
        ]

        xss_vulnerabilities = []

        try:
            for payload in xss_payloads:
                try:
                    # Testar em par√¢metros GET
                    test_url = f"{url}?search={payload}"
                    response = requests.get(test_url, timeout=10, verify=False)

                    # Verificar se o payload foi refletido na resposta
                    if payload in response.text:
                        xss_vulnerabilities.append({
                            'payload': payload,
                            'url': test_url,
                            'type': 'Reflected XSS',
                            'method': 'GET'
                        })

                        self.vulnerabilities_found.append({
                            'type': 'Cross-Site Scripting (XSS)',
                            'severity': 'High',
                            'description': f'XSS refletido encontrado com payload: {payload[:50]}...',
                            'recommendation': 'Implementar sanitiza√ß√£o e valida√ß√£o de entrada'
                        })

                except:
                    continue

        except Exception as e:
            xss_vulnerabilities.append({'error': str(e)})

        self.scan_results['xss_vectors'] = xss_vulnerabilities

    async def _test_directory_traversal(self, url):
        """Testar Directory Traversal"""
        traversal_payloads = [
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            '....//....//....//etc/passwd',
            '%2e%2e%2f%2e%2e%2f%2e%2e%2f%etc%2fpasswd',
            '..%252f..%252f..%252fetc%252fpasswd'
        ]

        traversal_vulnerabilities = []

        try:
            for payload in traversal_payloads:
                try:
                    test_url = f"{url}?file={payload}"
                    response = requests.get(test_url, timeout=10, verify=False)

                    # Verificar indicadores de directory traversal bem-sucedido
                    unix_indicators = ['root:x:0:0:', '/bin/bash', '/sbin/nologin']
                    windows_indicators = ['[drivers]', '# Copyright', 'localhost']

                    content_lower = response.text.lower()

                    for indicator in unix_indicators + windows_indicators:
                        if indicator.lower() in content_lower:
                            traversal_vulnerabilities.append({
                                'payload': payload,
                                'url': test_url,
                                'indicator': indicator
                            })

                            self.vulnerabilities_found.append({
                                'type': 'Directory Traversal',
                                'severity': 'Critical',
                                'description': f'Directory traversal encontrado com payload: {payload}',
                                'recommendation': 'Implementar valida√ß√£o de caminho de arquivo'
                            })
                            break

                except:
                    continue

        except Exception as e:
            traversal_vulnerabilities.append({'error': str(e)})

        self.scan_results['directory_traversal'] = traversal_vulnerabilities

    async def _check_information_disclosure(self, url):
        """Verificar vazamento de informa√ß√µes"""
        disclosure_checks = []

        try:
            response = requests.get(url, timeout=10, verify=False)
            content = response.text.lower()
            headers = response.headers

            # Verificar informa√ß√µes sens√≠veis no conte√∫do
            sensitive_patterns = [
                (r'password\s*[:=]\s*["\']?([^"\'\s]+)', 'Password in source'),
                (r'api[_-]?key\s*[:=]\s*["\']?([^"\'\s]+)', 'API Key in source'),
                (r'secret\s*[:=]\s*["\']?([^"\'\s]+)', 'Secret in source'),
                (r'token\s*[:=]\s*["\']?([^"\'\s]+)', 'Token in source'),
                (r'mysql://[^"\'\s]+', 'Database connection string'),
                (r'mongodb://[^"\'\s]+', 'MongoDB connection string'),
                (r'postgresql://[^"\'\s]+', 'PostgreSQL connection string')
            ]

            for pattern, description in sensitive_patterns:
                import re
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    disclosure_checks.append({
                        'type': description,
                        'matches': len(matches),
                        'sample': matches[0][:20] + '...' if matches[0] else ''
                    })

                    self.vulnerabilities_found.append({
                        'type': 'Information Disclosure',
                        'severity': 'High',
                        'description': f'{description} encontrado no c√≥digo fonte',
                        'recommendation': 'Remover informa√ß√µes sens√≠veis do c√≥digo fonte'
                    })

            # Verificar headers que podem vazar informa√ß√µes
            revealing_headers = ['Server', 'X-Powered-By', 'X-AspNet-Version', 'X-Generator']
            for header in revealing_headers:
                if header in headers:
                    disclosure_checks.append({
                        'type': f'Header {header}',
                        'value': headers[header]
                    })

        except Exception as e:
            disclosure_checks.append({'error': str(e)})

        self.scan_results['information_disclosure'] = disclosure_checks

    async def _check_csrf_protection(self, url):
        """Verificar prote√ß√£o CSRF"""
        try:
            response = requests.get(url, timeout=10, verify=False)
            content = response.text.lower()

            # Procurar por tokens CSRF
            csrf_indicators = [
                'csrf_token',
                '_token',
                'authenticity_token',
                'anti-forgery-token',
                '__requestverificationtoken'
            ]

            csrf_found = any(indicator in content for indicator in csrf_indicators)
            
            if csrf_found:
                self.scan_results['csrf_protection'] = 'Protected'
            else:
                self.scan_results['csrf_protection'] = 'Not Protected'
                self.vulnerabilities_found.append({
                    'type': 'CSRF Protection',
                    'severity': 'Medium',
                    'description': 'Nenhum token CSRF encontrado',
                    'recommendation': 'Implementar prote√ß√£o CSRF com tokens'
                })

        except Exception as e:
            self.scan_results['csrf_protection'] = f'Error: {str(e)}'

    async def _check_cors_policy(self, url):
        """Verificar pol√≠tica CORS"""
        try:
            headers = {
                'Origin': 'https://evil.com'
            }
            response = requests.get(url, headers=headers, timeout=10, verify=False)
            
            cors_header = response.headers.get('Access-Control-Allow-Origin')
            
            if cors_header == '*':
                self.scan_results['cors_policy'] = 'Wildcard (*)'
                self.vulnerabilities_found.append({
                    'type': 'CORS Misconfiguration',
                    'severity': 'Medium',
                    'description': 'CORS configurado para aceitar qualquer origem (*)',
                    'recommendation': 'Configurar CORS para origens espec√≠ficas'
                })
            elif cors_header:
                self.scan_results['cors_policy'] = f'Specific: {cors_header}'
            else:
                self.scan_results['cors_policy'] = 'Not Set'

        except Exception as e:
            self.scan_results['cors_policy'] = f'Error: {str(e)}'

    async def _detect_technologies(self, url):
        """Detectar tecnologias utilizadas"""
        try:
            response = requests.get(url, timeout=10, verify=False)
            headers = response.headers
            content = response.text.lower()

            technologies = []

            # Detectar atrav√©s de headers
            tech_headers = {
                'X-Powered-By': 'Framework/Language',
                'Server': 'Web Server',
                'X-AspNet-Version': 'ASP.NET Version',
                'X-Generator': 'CMS/Generator'
            }

            for header, tech_type in tech_headers.items():
                if header in headers:
                    technologies.append({
                        'name': headers[header],
                        'type': tech_type,
                        'detection_method': 'Header'
                    })

            # Detectar atrav√©s de conte√∫do
            content_patterns = [
                ('wordpress', 'WordPress', 'CMS'),
                ('drupal', 'Drupal', 'CMS'),
                ('joomla', 'Joomla', 'CMS'),
                ('jquery', 'jQuery', 'JavaScript Library'),
                ('bootstrap', 'Bootstrap', 'CSS Framework'),
                ('angular', 'Angular', 'JavaScript Framework'),
                ('react', 'React', 'JavaScript Library'),
                ('vue', 'Vue.js', 'JavaScript Framework')
            ]

            for pattern, name, tech_type in content_patterns:
                if pattern in content:
                    technologies.append({
                        'name': name,
                        'type': tech_type,
                        'detection_method': 'Content Analysis'
                    })

            self.scan_results['technology_stack'] = technologies

        except Exception as e:
            self.scan_results['technology_stack'] = [{'error': str(e)}]

@bot.on(events.NewMessage(pattern=r'^/userinfo (.+)'))
async def userinfo_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_input = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar entrada (pode ser @username, username, ou ID num√©rico)
    if not user_input:
        await event.reply(
            "‚ùå **FORMATO INV√ÅLIDO**\n\n"
            "üí° **Exemplos corretos:**\n"
            "`/userinfo @username`\n"
            "`/userinfo username`\n"
            "`/userinfo 123456789`\n\n"
            "ü§ñ @CatalystServerRobot"
        )
        return

    processing_msg = await event.reply(
        f"üîç **EXTRAINDO INFORMA√á√ïES DO USU√ÅRIO...**\n\n"
        f"üéØ **Alvo:** `{user_input}`\n"
        f"‚è≥ **STATUS:** Coletando dados...\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üîç **Informa√ß√µes sendo coletadas:**\n"
        "‚Ä¢ Dados b√°sicos do perfil\n"
        "‚Ä¢ Hist√≥rico de atividade\n"
        "‚Ä¢ Grupos em comum\n"
        "‚Ä¢ Foto de perfil\n"
        "‚Ä¢ Bio e informa√ß√µes p√∫blicas\n"
        "‚Ä¢ Status online\n"
        "‚Ä¢ Configura√ß√µes de privacidade\n\n"
        "‚è≥ **Aguarde...**"
    )

    try:
        # Tentar obter o usu√°rio
        target_user = None
        
        # Se for um ID num√©rico
        if user_input.isdigit():
            try:
                target_user = await bot.get_entity(int(user_input))
            except:
                pass
        
        # Se n√£o conseguiu como ID ou se √© username
        if target_user is None:
            # Remover @ se houver
            username = user_input.lstrip('@')
            try:
                target_user = await bot.get_entity(username)
            except:
                await processing_msg.edit(
                    f"‚ùå **USU√ÅRIO N√ÉO ENCONTRADO**\n\n"
                    f"üéØ **Busca:** `{user_input}`\n\n"
                    "‚ö†Ô∏è **Poss√≠veis causas:**\n"
                    "‚Ä¢ Usu√°rio n√£o existe\n"
                    "‚Ä¢ Username incorreto\n"
                    "‚Ä¢ ID inv√°lido\n"
                    "‚Ä¢ Usu√°rio bloqueou o bot\n"
                    "‚Ä¢ Conta deletada\n\n"
                    "ü§ñ @CatalystServerRobot"
                )
                return

        # Obter informa√ß√µes completas
        full_user = await bot(GetFullUserRequest(target_user.id))
        user = full_user.users[0]
        user_full = full_user.full_user

        # Coletar informa√ß√µes b√°sicas
        user_info = {
            'id': user.id,
            'first_name': getattr(user, 'first_name', None),
            'last_name': getattr(user, 'last_name', None),
            'username': getattr(user, 'username', None),
            'phone': getattr(user, 'phone', None),
            'is_bot': getattr(user, 'bot', False),
            'is_verified': getattr(user, 'verified', False),
            'is_premium': getattr(user, 'premium', False),
            'is_scam': getattr(user, 'scam', False),
            'is_fake': getattr(user, 'fake', False),
            'is_support': getattr(user, 'support', False),
            'is_restricted': getattr(user, 'restricted', False),
            'restriction_reason': getattr(user, 'restriction_reason', None),
            'lang_code': getattr(user, 'lang_code', None),
            'dc_id': getattr(user_full, 'profile_photo', {}).get('dc_id') if hasattr(user_full, 'profile_photo') and user_full.profile_photo else None,
        }

        # Informa√ß√µes do perfil completo
        profile_info = {
            'bio': getattr(user_full, 'about', None),
            'common_chats_count': getattr(user_full, 'common_chats_count', 0),
            'can_pin_message': getattr(user_full, 'can_pin_message', False),
            'pinned_msg_id': getattr(user_full, 'pinned_msg_id', None),
            'blocked': getattr(user_full, 'blocked', False),
            'phone_calls_available': getattr(user_full, 'phone_calls_available', False),
            'phone_calls_private': getattr(user_full, 'phone_calls_private', False),
            'video_calls_available': getattr(user_full, 'video_calls_available', False),
        }

        # Tentar obter status online (pode falhar dependendo das configura√ß√µes de privacidade)
        try:
            from telethon.tl.functions.users import GetUsersRequest
            users_result = await bot(GetUsersRequest([user.id]))
            if users_result:
                target_user_status = users_result[0]
                if hasattr(target_user_status, 'status'):
                    status = target_user_status.status
                    if hasattr(status, '__class__'):
                        status_type = status.__class__.__name__
                        if hasattr(status, 'was_online'):
                            last_seen = status.was_online.strftime("%d/%m/%Y %H:%M:%S") if status.was_online else "Nunca"
                        else:
                            last_seen = "Desconhecido"
                    else:
                        status_type = "Desconhecido"
                        last_seen = "Desconhecido"
                else:
                    status_type = "Desconhecido"
                    last_seen = "Desconhecido"
        except:
            status_type = "Privado"
            last_seen = "Privado"

        # Tentar obter foto de perfil
        profile_photo_info = None
        try:
            if user_full.profile_photo:
                profile_photo_info = {
                    'has_photo': True,
                    'photo_id': getattr(user_full.profile_photo, 'id', None),
                    'dc_id': getattr(user_full.profile_photo, 'dc_id', None)
                }
            else:
                profile_photo_info = {'has_photo': False}
        except:
            profile_photo_info = {'has_photo': False}

        # Construir relat√≥rio detalhado
        report = f"üë§ **RELAT√ìRIO DETALHADO DO USU√ÅRIO**\n\n"
        report += f"üéØ **Alvo analisado:** `{user_input}`\n"
        report += f"üìÖ **Data da an√°lise:** `{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}`\n\n"
        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # Informa√ß√µes b√°sicas
        report += "üìã **INFORMA√á√ïES B√ÅSICAS:**\n"
        report += f"üÜî **ID:** `{user_info['id']}`\n"
        if user_info['first_name']:
            report += f"üë§ **Nome:** `{user_info['first_name']}`\n"
        if user_info['last_name']:
            report += f"üë• **Sobrenome:** `{user_info['last_name']}`\n"
        if user_info['username']:
            report += f"üìõ **Username:** `@{user_info['username']}`\n"
        
        # An√°lise detalhada do telefone
        if user_info['phone']:
            report += f"üìû **Telefone:** `{user_info['phone']}`\n"
            report += f"üìç **Pa√≠s do telefone:** `{user_info['phone'][:3] if len(user_info['phone']) > 3 else 'N/A'}`\n"
        else:
            report += f"üìû **Telefone:** `‚ùå PRIVADO/OCULTO`\n"
            report += f"üîí **Privacidade:** Usu√°rio ocultou o n√∫mero\n"
            
            # Tentar m√©todos alternativos para detectar informa√ß√µes
            try:
                # Verificar se existe indica√ß√£o de pa√≠s atrav√©s de outros m√©todos
                if user_info.get('lang_code'):
                    country_hints = {
                        'pt': 'Possivelmente Brasil/Portugal',
                        'pt-br': 'Brasil',
                        'en': 'Pa√≠s angl√≥fono',
                        'es': 'Pa√≠s hispan√≥fono',
                        'ru': 'R√∫ssia/pa√≠ses ex-URSS'
                    }
                    hint = country_hints.get(user_info['lang_code'], 'Desconhecido')
                    report += f"üåç **Poss√≠vel regi√£o:** `{hint}`\n"
            except:
                pass
                
        if user_info['lang_code']:
            report += f"üåç **Idioma:** `{user_info['lang_code']}`\n"
        if user_info['dc_id']:
            report += f"üåê **Data Center:** `DC{user_info['dc_id']}`\n"
            # Adicionar informa√ß√£o sobre localiza√ß√£o baseada no DC
            dc_locations = {
                1: "Miami, EUA (Am√©rica)",
                2: "Amsterdam, Holanda (Europa)",
                3: "Miami, EUA (Am√©rica)",
                4: "Amsterdam, Holanda (Europa)",
                5: "Singapura (√Åsia-Pac√≠fico)"
            }
            if user_info['dc_id'] in dc_locations:
                report += f"üìç **Regi√£o do DC:** `{dc_locations[user_info['dc_id']]}`\n"
        report += "\n"

        # Status e configura√ß√µes
        report += "‚öôÔ∏è **STATUS E CONFIGURA√á√ïES:**\n"
        report += f"ü§ñ **√â Bot:** `{'Sim' if user_info['is_bot'] else 'N√£o'}`\n"
        report += f"‚úÖ **Verificado:** `{'Sim' if user_info['is_verified'] else 'N√£o'}`\n"
        report += f"üíé **Premium:** `{'Sim' if user_info['is_premium'] else 'N√£o'}`\n"
        report += f"‚ö†Ô∏è **Scam:** `{'Sim' if user_info['is_scam'] else 'N√£o'}`\n"
        report += f"üî¥ **Fake:** `{'Sim' if user_info['is_fake'] else 'N√£o'}`\n"
        report += f"üõ†Ô∏è **Suporte:** `{'Sim' if user_info['is_support'] else 'N√£o'}`\n"
        report += f"üö´ **Restrito:** `{'Sim' if user_info['is_restricted'] else 'N√£o'}`\n"
        if user_info['restriction_reason']:
            report += f"‚ö†Ô∏è **Motivo da Restri√ß√£o:** `{user_info['restriction_reason']}`\n"
        report += f"üîÑ **Status Online:** `{status_type}`\n"
        report += f"üëÄ **√öltima vez visto:** `{last_seen}`\n\n"

        # Informa√ß√µes do perfil
        if profile_info['bio']:
            report += f"üìù **BIO:**\n`{profile_info['bio'][:200]}{'...' if len(profile_info['bio']) > 200 else ''}`\n\n"

        report += "üîó **INTERA√á√ïES:**\n"
        report += f"üë• **Grupos em comum:** `{profile_info['common_chats_count']}`\n"
        report += f"üìå **Pode fixar mensagens:** `{'Sim' if profile_info['can_pin_message'] else 'N√£o'}`\n"
        if profile_info['pinned_msg_id']:
            report += f"üìç **Mensagem fixada:** `ID {profile_info['pinned_msg_id']}`\n"
        report += f"üö´ **Bloqueado:** `{'Sim' if profile_info['blocked'] else 'N√£o'}`\n\n"

        report += "üìû **CHAMADAS:**\n"
        report += f"üìû **Chamadas dispon√≠veis:** `{'Sim' if profile_info['phone_calls_available'] else 'N√£o'}`\n"
        report += f"üîí **Chamadas privadas:** `{'Sim' if profile_info['phone_calls_private'] else 'N√£o'}`\n"
        report += f"üìπ **V√≠deo chamadas:** `{'Sim' if profile_info['video_calls_available'] else 'N√£o'}`\n\n"

        report += "üñºÔ∏è **FOTO DE PERFIL:**\n"
        if profile_photo_info['has_photo']:
            report += f"üì∏ **Tem foto:** `Sim`\n"
            if profile_photo_info.get('photo_id'):
                report += f"üÜî **ID da foto:** `{profile_photo_info['photo_id']}`\n"
            if profile_photo_info.get('dc_id'):
                report += f"üåê **DC da foto:** `DC{profile_photo_info['dc_id']}`\n"
        else:
            report += f"üì∏ **Tem foto:** `N√£o`\n"

        report += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # Tentar baixar foto de perfil
        photo_file = None
        if profile_photo_info['has_photo']:
            try:
                os.makedirs("temp", exist_ok=True)
                photo_file = f"temp/profile_{user_info['id']}.jpg"
                await bot.download_profile_photo(user.id, file=photo_file)
                report += "üì∏ **Foto de perfil salva com sucesso**\n\n"
            except Exception as e:
                report += f"‚ùå **Erro ao baixar foto:** `{str(e)[:50]}...`\n\n"

        # An√°lise avan√ßada de privacidade
        report += "üîí **AN√ÅLISE DE PRIVACIDADE:**\n"
        privacy_score = 0
        privacy_info = []

        if not user_info['phone']:
            privacy_score += 25
            privacy_info.append("üìû Telefone oculto")
        if not user_info['username']:
            privacy_score += 15  
            privacy_info.append("üìõ Sem username p√∫blico")
        if not profile_info['bio']:
            privacy_score += 10
            privacy_info.append("üìù Bio vazia/oculta")
        if profile_info.get('phone_calls_private', True):
            privacy_score += 20
            privacy_info.append("üìû Chamadas privadas")
        if status_type == "Privado":
            privacy_score += 30
            privacy_info.append("üëÄ Status online privado")

        if privacy_info:
            report += "\n".join(privacy_info) + "\n"
            report += f"üîí **N√≠vel de Privacidade:** `{privacy_score}/100`\n"
            if privacy_score >= 70:
                report += "üîí **PRIVACIDADE ALTA** - Usu√°rio muito reservado\n"
            elif privacy_score >= 40:
                report += "üîê **PRIVACIDADE M√âDIA** - Algumas informa√ß√µes ocultas\n"
            else:
                report += "üìñ **PRIVACIDADE BAIXA** - Usu√°rio relativamente aberto\n"
        else:
            report += "üìñ **Usu√°rio com perfil p√∫blico**\n"

        report += "\n"

        # Informa√ß√µes adicionais de seguran√ßa
        report += "üõ°Ô∏è **AN√ÅLISE DE SEGURAN√áA:**\n"
        risk_score = 0
        warnings = []

        if user_info['is_scam']:
            risk_score += 50
            warnings.append("‚ö†Ô∏è Conta marcada como SCAM")
        if user_info['is_fake']:
            risk_score += 40
            warnings.append("‚ö†Ô∏è Conta marcada como FAKE")
        if user_info['is_restricted']:
            risk_score += 30
            warnings.append("‚ö†Ô∏è Conta com restri√ß√µes")
        if not user_info['username'] and not user_info['phone']:
            risk_score += 20
            warnings.append("‚ö†Ô∏è Sem username ou telefone p√∫blico")
        if user_info['is_bot'] and not user_info['is_verified']:
            risk_score += 15
            warnings.append("‚ö†Ô∏è Bot n√£o verificado")

        if warnings:
            report += "\n".join(warnings) + "\n"
        else:
            report += "‚úÖ Nenhum alerta de seguran√ßa detectado\n"

        report += f"üìä **Score de Risco:** `{risk_score}/100`\n"
        if risk_score >= 70:
            report += "üî¥ **RISCO ALTO**\n"
        elif risk_score >= 40:
            report += "üü° **RISCO M√âDIO**\n"
        else:
            report += "üü¢ **RISCO BAIXO**\n"

        report += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        report += "‚ö†Ô∏è **IMPORTANTE:**\n"
        report += "‚Ä¢ Algumas informa√ß√µes podem estar ocultas por configura√ß√µes de privacidade\n"
        report += "‚Ä¢ Este relat√≥rio √© baseado em dados p√∫blicos do Telegram\n"
        report += "‚Ä¢ Use estas informa√ß√µes com responsabilidade\n\n"
        report += "ü§ñ @CatalystServerRobot"

        # Salvar relat√≥rio em arquivo
        filename = f"temp/userinfo_{user_info['id']}.txt"
        os.makedirs("temp", exist_ok=True)
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"RELAT√ìRIO DETALHADO DO USU√ÅRIO TELEGRAM\n")
            f.write(f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Alvo: {user_input}\n\n")
            f.write(f"ID: {user_info['id']}\n")
            f.write(f"Nome: {user_info['first_name'] or 'N/A'} {user_info['last_name'] or ''}\n")
            f.write(f"Username: @{user_info['username']}\n" if user_info['username'] else "Username: N/A\n")
            f.write(f"Telefone: {user_info['phone'] or 'N/A'}\n")
            f.write(f"Bio: {profile_info['bio'] or 'N/A'}\n")
            f.write(f"Grupos em comum: {profile_info['common_chats_count']}\n")
            f.write(f"Status: {status_type}\n")
            f.write(f"√öltima vez visto: {last_seen}\n")
            f.write(f"√â Bot: {'Sim' if user_info['is_bot'] else 'N√£o'}\n")
            f.write(f"Verificado: {'Sim' if user_info['is_verified'] else 'N√£o'}\n")
            f.write(f"Premium: {'Sim' if user_info['is_premium'] else 'N√£o'}\n")
            f.write(f"Score de Risco: {risk_score}/100\n")
            if warnings:
                f.write(f"\nAlertas de Seguran√ßa:\n")
                for warning in warnings:
                    f.write(f"- {warning}\n")

        await processing_msg.edit(report[:4000] + ("..." if len(report) > 4000 else ""))

        # Enviar arquivo com relat√≥rio completo
        files_to_send = [filename]
        if photo_file and os.path.exists(photo_file):
            files_to_send.append(photo_file)

        if len(files_to_send) == 1:
            await bot.send_file(
                user_id,
                file=filename,
                caption=f"üìÑ **Relat√≥rio completo - @{user_info['username'] or user_info['id']}**\n\nü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
            )
        else:
            # Enviar m√∫ltiplos arquivos
            await bot.send_file(
                user_id,
                file=files_to_send,
                caption=f"üìÑ **Relat√≥rio + Foto de perfil - @{user_info['username'] or user_info['id']}**\n\nü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
            )

        # Limpar arquivos tempor√°rios
        try:
            os.remove(filename)
            if photo_file and os.path.exists(photo_file):
                os.remove(photo_file)
        except:
            pass

    except Exception as e:
        await processing_msg.edit(
            f"‚ùå **ERRO AO EXTRAIR INFORMA√á√ïES**\n\n"
            f"‚ö†Ô∏è Erro: `{str(e)[:200]}...`\n\n"
            "üîç **Poss√≠veis causas:**\n"
            "‚Ä¢ Usu√°rio com configura√ß√µes de privacidade rigorosas\n"
            "‚Ä¢ Conta deletada ou suspensa\n"
            "‚Ä¢ Erro de conex√£o com o Telegram\n"
            "‚Ä¢ Bot bloqueado pelo usu√°rio\n\n"
            "üí° Tente novamente ou verifique se o usu√°rio existe.\n\n"
            "ü§ñ @CatalystServerRobot"
        )

@bot.on(events.NewMessage(pattern=r'^/clonar (.+)'))
async def clonar_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    url = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    processing_msg = await event.reply(
        f"üåê **CLONANDO WEBSITE...**\n\n"
        f"üéØ **URL:** `{url}`\n"
        f"‚è≥ **STATUS:** Iniciando clonagem...\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üîÑ **Processo:**\n"
        "‚Ä¢ Baixando p√°gina principal\n"
        "‚Ä¢ Extraindo recursos (CSS, JS, imagens)\n"
        "‚Ä¢ Corrigindo caminhos para uso offline\n"
        "‚Ä¢ Criando arquivo ZIP\n\n"
        "‚è≥ **Aguarde, isso pode levar alguns minutos...**"
    )

    try:
        # Importar o sistema de clonagem
        from website_cloner import clone_website_professional

        # Executar clonagem
        result = await asyncio.to_thread(clone_website_professional, url, max_depth=2)

        if result.get('success'):
            stats = result['statistics']
            
            await processing_msg.edit(
                f"‚úÖ **CLONAGEM CONCLU√çDA!**\n\n"
                f"üéØ **URL clonada:** `{result['original_url']}`\n"
                f"üì¶ **Arquivo ZIP:** `{result['zip_size_mb']} MB`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìä **Estat√≠sticas:**\n"
                f"‚Ä¢ üìÑ **Arquivos HTML:** `{stats['html_files']}`\n"
                f"‚Ä¢ üé® **Arquivos CSS:** `{stats['css_files']}`\n"
                f"‚Ä¢ ‚ö° **Arquivos JS:** `{stats['js_files']}`\n"
                f"‚Ä¢ üñºÔ∏è **Imagens:** `{stats['images']}`\n"
                f"‚Ä¢ üî§ **Fontes:** `{stats['fonts']}`\n"
                f"‚Ä¢ üìÅ **Outros:** `{stats['other_files']}`\n"
                f"‚Ä¢ üìã **Total:** `{stats['total_files']} arquivos`\n"
                f"‚Ä¢ ‚ùå **Falhas:** `{stats['failed_downloads']}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üì• **O arquivo ZIP est√° sendo enviado...**\n\n"
                "ü§ñ @CatalystServerRobot"
            )

            # Enviar arquivo ZIP
            await bot.send_file(
                user_id,
                file=result['zip_file'],
                caption=f"üåê **Site Clonado:** `{result['original_url']}`\n"
                       f"üìä **{stats['total_files']} arquivos** - **{result['zip_size_mb']} MB**\n\n"
                       f"üí° **Para usar:** Extraia o ZIP e abra `index.html` no navegador\n\n"
                       f"ü§ñ @CatalystServerRobot",
                buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
            )

            # Limpar arquivo tempor√°rio
            try:
                os.remove(result['zip_file'])
            except:
                pass

        else:
            await processing_msg.edit(
                f"‚ùå **ERRO NA CLONAGEM**\n\n"
                f"üéØ **URL:** `{url}`\n"
                f"‚ö†Ô∏è **Erro:** {result.get('error', 'Erro desconhecido')}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üí° **Poss√≠veis causas:**\n"
                "‚Ä¢ Site bloqueou o acesso\n"
                "‚Ä¢ URL incorreta ou inacess√≠vel\n"
                "‚Ä¢ Conte√∫do protegido por JavaScript\n"
                "‚Ä¢ Erro de conex√£o\n\n"
                "ü§ñ @CatalystServerRobot"
            )

    except Exception as e:
        await processing_msg.edit(
            f"‚ùå **ERRO DURANTE CLONAGEM**\n\n"
            f"‚ö†Ô∏è **Erro:** `{str(e)[:200]}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° Tente novamente ou verifique a URL.\n\n"
            "ü§ñ @CatalystServerRobot"
        )

@bot.on(events.NewMessage(pattern=r'^/vulnerabilidades (.+)'))
async def vulnerabilidades_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    url = event.pattern_match.group(1).strip()
    user_id = event.sender_id

    # Validar URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    # Mensagem inicial
    processing_msg = await event.reply(
        f"üîí **SCANNER DE VULNERABILIDADES v4.0**\n\n"
        f"üéØ **URL:** `{url}`\n"
        f"‚è≥ **STATUS:** Iniciando varredura completa...\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üïµÔ∏è **AN√ÅLISES EM ANDAMENTO:**\n"
        "‚Ä¢ Cabe√ßalhos de seguran√ßa\n"
        "‚Ä¢ Configura√ß√£o SSL/TLS\n"
        "‚Ä¢ Arquivos sens√≠veis expostos\n"
        "‚Ä¢ SQL Injection\n"
        "‚Ä¢ Cross-Site Scripting (XSS)\n"
        "‚Ä¢ Directory Traversal\n"
        "‚Ä¢ Information Disclosure\n"
        "‚Ä¢ Prote√ß√£o CSRF\n"
        "‚Ä¢ Pol√≠tica CORS\n"
        "‚Ä¢ Stack de tecnologias\n\n"
        "‚è≥ **AGUARDE, ISSO PODE LEVAR ALGUNS MINUTOS...**"
    )

    try:
        # Executar scanner de vulnerabilidades
        scanner = VulnerabilityScanner()
        results = await scanner.scan_website(url)

        if "error" in results:
            await processing_msg.edit(
                f"‚ùå **ERRO NO SCANNER DE VULNERABILIDADES**\n\n"
                f"üéØ URL: `{url}`\n"
                f"‚ö†Ô∏è Erro: `{results['error']}`\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üí° Verifique se a URL est√° correta e acess√≠vel.\n\n"
                "ü§ñ @CatalystServerRobot"
            )
            return

        # Formatar resultados
        vulns = results['vulnerabilities']
        total_vulns = len(vulns)
        
        # Contar por severidade
        critical = len([v for v in vulns if v.get('severity') == 'Critical'])
        high = len([v for v in vulns if v.get('severity') == 'High'])
        medium = len([v for v in vulns if v.get('severity') == 'Medium'])
        low = len([v for v in vulns if v.get('severity') == 'Low'])

        # Determinar n√≠vel de risco
        if critical > 0:
            risk_level = "üö® CR√çTICO"
            risk_color = "üî¥"
        elif high > 0:
            risk_level = "‚ö†Ô∏è ALTO"
            risk_color = "üü†"
        elif medium > 0:
            risk_level = "‚ö° M√âDIO"
            risk_color = "üü°"
        elif low > 0:
            risk_level = "üìù BAIXO"
            risk_color = "üü¢"
        else:
            risk_level = "‚úÖ SEGURO"
            risk_color = "üü¢"

        message = f"üîí **RELAT√ìRIO DE VULNERABILIDADES**\n\n"
        message += f"üéØ **URL:** `{results['url']}`\n"
        message += f"üìÖ **Data:** `{results['timestamp']}`\n"
        message += f"üõ°Ô∏è **N√≠vel de Risco:** {risk_level}\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        message += f"üìä **RESUMO DAS VULNERABILIDADES:**\n"
        message += f"‚Ä¢ üö® **Cr√≠ticas:** `{critical}`\n"
        message += f"‚Ä¢ ‚ö†Ô∏è **Altas:** `{high}`\n"
        message += f"‚Ä¢ ‚ö° **M√©dias:** `{medium}`\n"
        message += f"‚Ä¢ üìù **Baixas:** `{low}`\n"
        message += f"‚Ä¢ üìã **Total:** `{total_vulns}`\n\n"

        if total_vulns > 0:
            message += f"üîç **TOP 5 VULNERABILIDADES:**\n"
            for i, vuln in enumerate(vulns[:5], 1):
                severity_icon = {
                    'Critical': 'üö®',
                    'High': '‚ö†Ô∏è',
                    'Medium': '‚ö°',
                    'Low': 'üìù'
                }.get(vuln.get('severity', 'Unknown'), '‚ùì')
                
                message += f"{i}. {severity_icon} **{vuln.get('type', 'Unknown')}**\n"
                message += f"   {vuln.get('description', 'Sem descri√ß√£o')[:60]}...\n\n"

            if total_vulns > 5:
                message += f"‚Ä¢ ... e mais {total_vulns - 5} vulnerabilidades\n\n"
        else:
            message += f"‚úÖ **NENHUMA VULNERABILIDADE ENCONTRADA!**\n\n"

        message += f"üìÑ **Relat√≥rio completo ser√° enviado como arquivo**\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        message += "ü§ñ @CatalystServerRobot"

        # Criar relat√≥rio completo em arquivo
        filename = f"temp/vulnerability_report_{user_id}.txt"
        os.makedirs("temp", exist_ok=True)
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write("=" * 60 + "\n")
            f.write("RELAT√ìRIO COMPLETO DE VULNERABILIDADES\n")
            f.write("=" * 60 + "\n\n")
            f.write(f"URL: {results['url']}\n")
            f.write(f"Data da an√°lise: {results['timestamp']}\n")
            f.write(f"Total de vulnerabilidades: {total_vulns}\n")
            f.write(f"N√≠vel de risco: {risk_level}\n\n")
            
            f.write("RESUMO POR SEVERIDADE:\n")
            f.write("-" * 30 + "\n")
            f.write(f"Cr√≠ticas: {critical}\n")
            f.write(f"Altas: {high}\n")
            f.write(f"M√©dias: {medium}\n")
            f.write(f"Baixas: {low}\n\n")
            
            if vulns:
                f.write("DETALHES DAS VULNERABILIDADES:\n")
                f.write("=" * 50 + "\n\n")
                
                for i, vuln in enumerate(vulns, 1):
                    f.write(f"{i}. {vuln.get('type', 'Tipo desconhecido')}\n")
                    f.write(f"   Severidade: {vuln.get('severity', 'Desconhecida')}\n")
                    f.write(f"   Descri√ß√£o: {vuln.get('description', 'Sem descri√ß√£o')}\n")
                    f.write(f"   Recomenda√ß√£o: {vuln.get('recommendation', 'Sem recomenda√ß√£o')}\n\n")
            
            # Adicionar detalhes t√©cnicos
            f.write("\nDETALHES T√âCNICOS:\n")
            f.write("=" * 30 + "\n\n")
            
            f.write("CABE√áALHOS DE SEGURAN√áA:\n")
            for header, value in results.get('security_headers', {}).items():
                status = "‚úì Presente" if value else "‚úó Ausente"
                f.write(f"  {header}: {status}\n")
            
            f.write(f"\nSSL/TLS: {results.get('ssl_info', {}).get('version', 'N/A')}\n")
            f.write(f"Prote√ß√£o CSRF: {results.get('csrf_protection', 'Desconhecido')}\n")
            f.write(f"Pol√≠tica CORS: {results.get('cors_policy', 'Desconhecido')}\n\n")
            
            if results.get('sensitive_files'):
                f.write("ARQUIVOS SENS√çVEIS EXPOSTOS:\n")
                for file_info in results['sensitive_files']:
                    f.write(f"  {file_info['path']} (HTTP {file_info['status_code']})\n")
                f.write("\n")
            
            if results.get('technology_stack'):
                f.write("TECNOLOGIAS DETECTADAS:\n")
                for tech in results['technology_stack']:
                    if 'name' in tech:
                        f.write(f"  {tech['name']} ({tech.get('type', 'N/A')})\n")
                f.write("\n")
            
            f.write("=" * 60 + "\n")
            f.write("Relat√≥rio gerado por CATALYST SERVER\n")
            f.write("@CatalystServerRobot\n")

        await processing_msg.edit(message)
        await bot.send_file(
            user_id, 
            file=filename,
            caption=f"üîí **Relat√≥rio Completo de Vulnerabilidades - {results['url']}**\n\nü§ñ @CatalystServerRobot",
            buttons=[[Button.inline("üóëÔ∏è Apagar", data=f"apagarmensagem:{user_id}")]]
        )

        # Limpar arquivo tempor√°rio
        try:
            os.remove(filename)
        except:
            pass

    except Exception as e:
        await processing_msg.edit(
            f"‚ùå **ERRO DURANTE AN√ÅLISE DE VULNERABILIDADES**\n\n"
            f"‚ö†Ô∏è Erro: `{str(e)[:200]}`\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí° Tente novamente ou verifique a URL.\n\n"
            "ü§ñ @CatalystServerRobot"
        )

@bot.on(events.NewMessage(pattern=r'^/geradores$'))
async def geradores_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_id = event.sender_id

    await event.reply(
        f"üé≤ **CATALYST GERADORES v4.0**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üõ†Ô∏è **FERRAMENTAS DE GERA√á√ÉO:**\n\n"
        "üë§ **GERADOR DE PESSOA FAKE v2.0**\n"
        "üí≥ **GERADOR DE CART√ïES DE CR√âDITO**\n"
        "üè¢ **GERADOR DE EMPRESAS FAKE**\n"
        "‚úÖ **VALIDADORES CPF/CNPJ**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üéØ **RECURSOS AVAN√áADOS:**\n"
        "‚Ä¢ Algoritmos de valida√ß√£o oficiais\n"
        "‚Ä¢ Cart√µes v√°lidos por algoritmo Luhn\n"
        "‚Ä¢ Empresas com dados realistas\n"
        "‚Ä¢ Valida√ß√£o em tempo real\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üë§ Pessoa Fake v2.0", data=f"fake_person:{user_id}"),
             Button.inline("üí≥ Cart√µes de Cr√©dito", data=f"cartoes_credito:{user_id}")],
            [Button.inline("üè¢ Empresas Fake", data=f"empresas_fake:{user_id}"),
             Button.inline("‚úÖ Validadores", data=f"validadores:{user_id}")],
            [Button.inline("üóëÔ∏è Cancelar", data=f"apagarmensagem:{user_id}")]
        ]
    )

@bot.on(events.NewMessage(pattern=r'^/restartbot$'))
async def restart_bot_handler(event):
    """Comando para reiniciar o bot - apenas para administradores"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **ACESSO NEGADO** - Apenas administradores podem usar este comando.")
        return

    await event.reply(
        "üîÑ **REINICIANDO BOT...**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "‚ö° **Reinicializando sistema...**\n"
        "üóÇÔ∏è **Limpando dados tempor√°rios...**\n"
        "üíæ **Salvando configura√ß√µes...**\n\n"
        "‚è≥ **Aguarde alguns segundos...**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot"
    )

    try:
        # Limpar dados tempor√°rios e resetar vari√°veis globais
        global report_data, whatsapp_report_data, usuarios_bloqueados, usuarios_autorizados
        global mensagens_origem, urls_busca, tasks_canceladas, divulgacao_ativa

        print("üîÑ Comando /restartbot executado pelo administrador")
        print("üóÇÔ∏è Limpando dados tempor√°rios...")

        # Parar todos os reports em andamento
        report_data["running"] = False
        whatsapp_report_data["running"] = False

        # Cancelar todas as tarefas de busca
        for hash_nome in tasks_canceladas:
            tasks_canceladas[hash_nome]['cancelled'] = True

        # Limpar todos os diret√≥rios tempor√°rios
        import shutil
        if os.path.exists("temp"):
            try:
                shutil.rmtree("temp")
                os.makedirs("temp", exist_ok=True)
                print("‚úÖ Diret√≥rio temp limpo")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao limpar temp: {e}")

        # Resetar vari√°veis globais
        usuarios_bloqueados.clear()
        usuarios_autorizados.clear()
        mensagens_origem.clear()
        urls_busca.clear()
        tasks_canceladas.clear()

        # Parar divulga√ß√£o se estiver ativa
        divulgacao_ativa = False

        # Resetar dados de report
        report_data = {
            "text": "",
            "link": "",
            "quantity": 0,
            "running": False,
            "counter": 0,
            "start_time": None,
            "user_id": None
        }

        whatsapp_report_data = {
            "phone": "",
            "quantity": 0,
            "running": False,
            "counter": 0,
            "start_time": None,
            "user_id": None
        }

        # Limpar estados de report2 e validadores
        globals_to_remove = []
        for key in globals():
            if key.startswith(('report2_data_', 'validar_cpf_state_', 'validar_cnpj_state_', 
                             'validar_cartao_state_', 'sites_state_')):
                globals_to_remove.append(key)

        for key in globals_to_remove:
            try:
                del globals()[key]
            except:
                pass

        print("‚úÖ Dados tempor√°rios limpos")
        print("‚úÖ Vari√°veis globais resetadas")

        # Aguardar um pouco antes de enviar confirma√ß√£o
        await asyncio.sleep(2)

        await bot.send_message(
            user_id,
            "‚úÖ **BOT REINICIADO COM SUCESSO!**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéØ **A√ß√µes realizadas:**\n"
            "‚Ä¢ üóÇÔ∏è Dados tempor√°rios limpos\n"
            "‚Ä¢ üîÑ Vari√°veis resetadas\n"
            "‚Ä¢ ‚èπÔ∏è Reports interrompidos\n"
            "‚Ä¢ üõë Buscas canceladas\n"
            "‚Ä¢ üíæ Sistema otimizado\n\n"
            "üöÄ **Bot mais leve e pronto para uso!**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot"
        )

        print("‚úÖ Bot reiniciado com sucesso pelo administrador")

    except Exception as e:
        print(f"‚ùå Erro durante reinicializa√ß√£o: {e}")
        try:
            await bot.send_message(
                user_id,
                f"‚ùå **ERRO DURANTE REINICIALIZA√á√ÉO**\n\n"
                f"‚ö†Ô∏è Erro: `{str(e)[:100]}`\n\n"
                "üí° O bot ainda est√° funcionando normalmente.\n\n"
                "ü§ñ @CatalystServerRobot"
            )
        except:
            pass

@bot.on(events.NewMessage(pattern=r'^/comandos$'))
async def comandos_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_id = event.sender_id

    # Comandos b√°sicos para todos os membros
    comandos_membros = (
        f"üë• **COMANDOS PARA MEMBROS**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üîß **SISTEMA B√ÅSICO:**\n"
        "‚Ä¢ `/start` - Iniciar o bot\n"
        "‚Ä¢ `/ping` - Verificar status do bot\n"
        "‚Ä¢ `/reset` - Resetar todos os dados\n"
        "‚Ä¢ `/comandos` - Ver esta lista\n\n"
        "üîç **BUSCA & EXTRA√á√ÉO:**\n"
        "‚Ä¢ `/search [url]` - Buscar logins em sites\n"
        "‚Ä¢ `/webscraper [url]` - Extrair dados do site\n"
        "‚Ä¢ `/api [url]` - An√°lise completa de APIs\n"
        "‚Ä¢ `/apikey [url]` - Buscar API Keys expostas\n"
        "‚Ä¢ `/vulnerabilidades [url]` - Scanner de vulnerabilidades\n\n"
        "üì§ **SISTEMA DE REPORTS:**\n"
        "‚Ä¢ `/report` - Reports Telegram (b√°sico)\n"
        "‚Ä¢ `/report2` - Sistema avan√ßado de reports\n"
        "‚Ä¢ `/reportwpp` - Reportar n√∫meros WhatsApp\n\n"
        "üõ†Ô∏è **FERRAMENTAS:**\n"
        "‚Ä¢ `/checker` - Sites Checker e Fake Person\n"
        "‚Ä¢ `/geradores` - Gerador de pessoas, cart√µes, empresas\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    )

    # Comandos do administrador
    comandos_admin = ""
    if eh_dono(user_id):
        comandos_admin = (
            "üëë **COMANDOS DE ADMINISTRADOR**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üîê **GERENCIAMENTO DE USU√ÅRIOS:**\n"
            "‚Ä¢ `/autorizar [ID]` - Autorizar usu√°rio permanente\n"
            "‚Ä¢ `/autorizar [ID] [tempo][d/h/m]` - Autorizar tempor√°rio\n"
            "‚Ä¢ `/estender [ID] [tempo][d/h/m]` - Estender tempo\n"
            "‚Ä¢ `/desautorizar [ID]` - Remover autoriza√ß√£o\n"
            "‚Ä¢ `/listautorizados` - Listar usu√°rios autorizados\n"
            "‚Ä¢ `/authstatus` - Status do sistema de autoriza√ß√£o\n\n"
            "üí° **Exemplos de autoriza√ß√£o:**\n"
            "‚Ä¢ `/autorizar 123456789` - Permanente\n"
            "‚Ä¢ `/autorizar 123456789 30d` - 30 dias\n"
            "‚Ä¢ `/autorizar 123456789 12h` - 12 horas\n"
            "‚Ä¢ `/autorizar 123456789 60m` - 60 minutos\n"
            "‚Ä¢ `/estender 123456789 7d` - Adicionar 7 dias\n\n"
            "üì¢ **SISTEMA DE DIVULGA√á√ÉO:**\n"
            "‚Ä¢ `/on` - Ativar divulga√ß√£o autom√°tica\n"
            "‚Ä¢ `/off` - Desativar divulga√ß√£o autom√°tica\n"
            "‚Ä¢ `/addchat @canal` - Adicionar chat √† divulga√ß√£o\n"
            "‚Ä¢ `/addchat -100123456789` - Adicionar por ID\n"
            "‚Ä¢ `/removechat @canal` - Remover chat da divulga√ß√£o\n"
            "‚Ä¢ `/removechat -100123456789` - Remover por ID\n"
            "‚Ä¢ `/listchats` - Listar chats autorizados\n"
            "‚Ä¢ `/divconfig` - Configura√ß√µes de divulga√ß√£o\n"
            "‚Ä¢ `/testdiv` - Testar sistema de divulga√ß√£o\n\n"
            "üì∫ **SISTEMA DE BROADCAST:**\n"
            "‚Ä¢ `/broadcast [mensagem]` - Enviar para todos os usu√°rios\n"
            "‚Ä¢ `/broadcastauth [mensagem]` - Enviar apenas para autorizados\n\n"
            "üîÑ **CONTROLE DO SISTEMA:**\n"
            "‚Ä¢ `/restartbot` - Reiniciar e otimizar o bot\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        )

    # Mensagem final
    mensagem_final = (
        "üí° **INSTRU√á√ïES DE USO:**\n"
        "‚Ä¢ Digite o comando desejado no chat\n"
        "‚Ä¢ Siga as instru√ß√µes do bot\n"
        "‚Ä¢ Use `/reset` se algo der errado\n"
        "‚Ä¢ Use os bot√µes abaixo para acesso r√°pido\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot"
    )

    # Montar mensagem completa
    mensagem_completa = comandos_membros + comandos_admin + mensagem_final

    # Criar bot√µes baseados no tipo de usu√°rio
    botoes = []
    
    # Bot√µes b√°sicos para todos
    botoes.extend([
        [Button.inline("üîç Search", data=f"cmd_search:{user_id}"),
         Button.inline("üåê WebScraper", data=f"cmd_webscraper:{user_id}")],
        [Button.inline("üìù Report TG", data=f"cmd_report:{user_id}"),
         Button.inline("üì± Report WPP", data=f"cmd_reportwpp:{user_id}")],
        [Button.inline("üõ†Ô∏è Checker", data=f"cmd_checker:{user_id}"),
         Button.inline("üé≤ Geradores", data=f"cmd_geradores:{user_id}")],
        [Button.inline("‚ö° Report2", data=f"cmd_report2:{user_id}"),
         Button.inline("üèì Ping", data=f"cmd_ping:{user_id}")],
        [Button.inline("üîÑ Reset", data=f"cmd_reset:{user_id}"),
         Button.inline("üè† Start", data=f"cmd_start:{user_id}")]
    ])
    
    # Bot√µes adicionais para administradores
    if eh_dono(user_id):
        botoes.extend([
            [Button.inline("üîê Autoriza√ß√£o", data=f"admin_auth:{user_id}"),
             Button.inline("üì¢ Divulga√ß√£o", data=f"admin_div:{user_id}")],
            [Button.inline("üì∫ Broadcast", data=f"admin_broadcast:{user_id}"),
             Button.inline("üìä Status Sistema", data=f"admin_status:{user_id}")],
            [Button.inline("üîÑ Restart Bot", data=f"admin_restart:{user_id}")]
        ])
    
    # Bot√£o de fechar
    botoes.append([Button.inline("üóëÔ∏è Fechar", data=f"apagarmensagem:{user_id}")])

    await event.reply(
        mensagem_completa,
        buttons=botoes
    )

@bot.on(events.NewMessage(pattern=r'^/checker$'))
async def checker_handler(event):
    # Verificar autoriza√ß√£o
    if not eh_autorizado(event.sender_id):
        await event.reply("üö´ **ACESSO NEGADO** - Voc√™ n√£o tem autoriza√ß√£o para usar este bot.")
        return

    user_id = event.sender_id

    await event.reply(
        f"üîç **CATALYST CHECKER v3.0**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üõ†Ô∏è **FUNCIONALIDADES DISPON√çVEIS:**\n\n"
        "üåê **SITES UPANDO**\n"
        "üë§ **GERADOR DE PESSOA FAKE v2.0**\n"
            "üîê **ACCOUNT CHECKER**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "ü§ñ @CatalystServerRobot",
        buttons=[
            [Button.inline("üåê Sites Checker", data=f"sites_checker:{user_id}"),
             Button.inline("üë§ Fake Person v2.0", data=f"fake_person:{user_id}")],
            [Button.inline("üîê Account Checker", data=f"account_checker:{user_id}")],
            [Button.inline("üóëÔ∏è Cancelar", data=f"apagarmensagem:{user_id}")]
        ]
    )

# Handlers do sistema de divulga√ß√£o (apenas para o dono)
@bot.on(events.NewMessage(pattern=r'^/on$'))
async def ativar_divulgacao(event):
    """Ativa o sistema de divulga√ß√£o autom√°tica"""
    global divulgacao_ativa
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    if not divulgacao_ativa and chats_autorizados:
        divulgacao_ativa = True
        # Criar task para divulga√ß√£o em background
        asyncio.create_task(enviar_divulgacao())

        await event.reply(
            f"‚úÖ **DIVULGA√á√ÉO AUTOM√ÅTICA ATIVADA!**\n\n"
            f"üìä **Configura√ß√£o:**\n"
            f"‚Ä¢ Chats autorizados: {len(chats_autorizados)}\n"
            f"‚Ä¢ Intervalo: 20 minutos\n"
            f"‚Ä¢ Status: Ativo\n\n"
            "üîÑ Mensagens ser√£o enviadas automaticamente."
        )
    elif divulgacao_ativa:
        await event.reply("‚ö†Ô∏è **A divulga√ß√£o autom√°tica j√° est√° ativa.**")
    else:
        await event.reply("‚ùå **Nenhum chat autorizado!** Use `/addchat` primeiro.")

@bot.on(events.NewMessage(pattern=r'^/off$'))
async def desativar_divulgacao(event):
    """Desativa o sistema de divulga√ß√£o autom√°tica"""
    global divulgacao_ativa
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    if divulgacao_ativa:
        divulgacao_ativa = False
        await event.reply("‚úÖ **DIVULGA√á√ÉO AUTOM√ÅTICA DESATIVADA.**")
    else:
        await event.reply("‚ö†Ô∏è **A divulga√ß√£o autom√°tica j√° est√° desativada.**")

@bot.on(events.NewMessage(pattern=r'^/addchat (.+)'))
async def adicionar_chat(event):
    """Adiciona um chat √† lista de divulga√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    chat_input = event.pattern_match.group(1)

    try:
        # Tentar obter informa√ß√µes do chat
        if chat_input.startswith('@'):
            chat_entity = await bot.get_entity(chat_input)
        elif chat_input.lstrip('-').isdigit():
            chat_entity = await bot.get_entity(int(chat_input))
        else:
            await event.reply("‚ùå **Formato inv√°lido!** Use `@username` ou `ID num√©rico`")
            return

        chat_id = chat_entity.id
        chat_name = getattr(chat_entity, 'title', getattr(chat_entity, 'username', 'N/A'))

        # Verificar se o bot √© admin (apenas para grupos/canais)
        if hasattr(chat_entity, 'broadcast') or hasattr(chat_entity, 'megagroup'):
            if not await bot_eh_admin(chat_id):
                await event.reply(f"‚ö†Ô∏è **Aviso:** O bot pode n√£o ter permiss√£o para enviar mensagens em **{chat_name}**")

        if chat_id not in chats_autorizados:
            chats_autorizados.append(chat_id)
            await event.reply(
                f"‚úÖ **CHAT ADICIONADO COM SUCESSO!**\n\n"
                f"üìã **Informa√ß√µes:**\n"
                f"‚Ä¢ Nome: {chat_name}\n"
                f"‚Ä¢ ID: `{chat_id}`\n"
                f"‚Ä¢ Total de chats: {len(chats_autorizados)}\n\n"
                "üí° Use `/on` para ativar a divulga√ß√£o."
            )
        else:
            await event.reply(f"‚ö†Ô∏è **O chat {chat_name} j√° est√° na lista!**")

    except Exception as e:
        await event.reply(f"‚ùå **Erro ao adicionar chat:**\n`{str(e)[:100]}`")

@bot.on(events.NewMessage(pattern=r'^/removechat (.+)'))
async def remover_chat(event):
    """Remove um chat da lista de divulga√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    chat_input = event.pattern_match.group(1)

    try:
        if chat_input.startswith('@'):
            chat_entity = await bot.get_entity(chat_input)
            chat_id = chat_entity.id
        elif chat_input.lstrip('-').isdigit():
            chat_id = int(chat_input)
        else:
            await event.reply("‚ùå **Formato inv√°lido!** Use `@username` ou `ID num√©rico`")
            return

        if chat_id in chats_autorizados:
            chats_autorizados.remove(chat_id)
            await event.reply(
                f"‚úÖ **CHAT REMOVIDO COM SUCESSO!**\n\n"
                f"‚Ä¢ ID removido: `{chat_id}`\n"
                f"‚Ä¢ Chats restantes: {len(chats_autorizados)}"
            )
        else:
            await event.reply("‚ùå **Chat n√£o encontrado na lista!**")

    except Exception as e:
        await event.reply(f"‚ùå **Erro ao remover chat:**\n`{str(e)[:100]}`")

@bot.on(events.NewMessage(pattern=r'^/listchats$'))
async def listar_chats(event):
    """Lista todos os chats autorizados para divulga√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    if not chats_autorizados:
        await event.reply("üìã **Lista vazia!** Nenhum chat autorizado para divulga√ß√£o.")
        return

    message = f"üìã **CHATS AUTORIZADOS ({len(chats_autorizados)}):**\n\n"

    for i, chat_id in enumerate(chats_autorizados, 1):
        try:
            chat_info = await bot.get_entity(chat_id)
            chat_name = getattr(chat_info, 'title', getattr(chat_info, 'username', 'N/A'))
            message += f"{i}. **{chat_name}**\n   ID: `{chat_id}`\n\n"
        except:
            message += f"{i}. **Chat Desconhecido**\n   ID: `{chat_id}`\n\n"

    message += f"üîÑ **Status:** {'üü¢ Ativo' if divulgacao_ativa else 'üî¥ Inativo'}\n"
    message += f"‚è∞ **Intervalo:** 20 minutos"

    await event.reply(message)

@bot.on(events.NewMessage(pattern=r'^/divconfig$'))
async def config_divulgacao(event):
    """Mostra configura√ß√µes do sistema de divulga√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    await event.reply(
        f"‚öôÔ∏è **CONFIGURA√á√ïES DE DIVULGA√á√ÉO**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üîÑ **Status:** {'üü¢ Ativo' if divulgacao_ativa else 'üî¥ Inativo'}\n"
        f"üìä **Chats autorizados:** {len(chats_autorizados)}\n"
        f"‚è∞ **Intervalo:** 20 minutos\n"
        f"üë§ **Dono ID:** `{DONO_ID}`\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üõ†Ô∏è **COMANDOS DISPON√çVEIS:**\n"
        "‚Ä¢ `/on` - Ativar divulga√ß√£o\n"
        "‚Ä¢ `/off` - Desativar divulga√ß√£o\n"
        "‚Ä¢ `/addchat @canal` - Adicionar chat\n"
        "‚Ä¢ `/removechat @canal` - Remover chat\n"
        "‚Ä¢ `/listchats` - Listar chats\n"
        "‚Ä¢ `/testdiv` - Teste de divulga√ß√£o\n\n"
        "ü§ñ @CatalystServerRobot"
    )

@bot.on(events.NewMessage(pattern=r'^/testdiv$'))
async def testar_divulgacao(event):
    """Envia uma mensagem de teste para todos os chats"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    if not chats_autorizados:
        await event.reply("‚ùå **Nenhum chat autorizado para teste!**")
        return

    await event.reply(f"üß™ **Iniciando teste em {len(chats_autorizados)} chats...**")

    sucessos = 0
    falhas = 0

    mensagem_teste = f"üß™ **TESTE DE DIVULGA√á√ÉO - CATALYST SERVER**\n\n‚úÖ Sistema funcionando perfeitamente!\nü§ñ @CatalystServerRobot"

    for chat_id in chats_autorizados:
        try:
            await bot.send_message(chat_id, mensagem_teste, parse_mode='md')
            sucessos += 1
        except Exception as e:
            falhas += 1
            print(f"‚ùå Erro no teste para {chat_id}: {e}")

    await event.reply(
        f"üìä **RESULTADO DO TESTE:**\n\n"
        f"‚úÖ **Sucessos:** {sucessos}\n"
        f"‚ùå **Falhas:** {falhas}\n"
        f"üìä **Total:** {len(chats_autorizados)}\n\n"
        f"üéØ **Taxa de sucesso:** {(sucessos/len(chats_autorizados)*100):.1f}%"
    )

# Comandos de gerenciamento de autoriza√ß√£o (apenas para o dono)
@bot.on(events.NewMessage(pattern=r'^/autorizar (\d+)$'))
async def autorizar_usuario(event):
    """Autoriza um usu√°rio a usar o bot permanentemente"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    target_id = int(event.pattern_match.group(1))

    if target_id in usuarios_autorizados_sistema:
        await event.reply(f"‚ö†Ô∏è **Usu√°rio {target_id} j√° est√° autorizado!**")
        return

    usuarios_autorizados_sistema.add(target_id)

    # Atualizar/inserir no banco sem data de expira√ß√£o (permanente)
    try:
        cursor.execute("SELECT id FROM usuarios WHERE id = ?", (target_id,))
        if cursor.fetchone():
            cursor.execute("UPDATE usuarios SET data_expiracao = NULL, admin = 'yes' WHERE id = ?", (target_id,))
        else:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                "INSERT INTO usuarios (id, nome, sobrenome, hash, data_criada, data_expiracao, admin) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (target_id, "N/A", "N/A", hashlib.md5(str(target_id).encode()).hexdigest()[:8], now, None, "yes")
            )
        conn.commit()
    except Exception as e:
        print(f"‚ùå Erro ao atualizar banco: {e}")

    try:
        # Tentar obter informa√ß√µes do usu√°rio
        user_info = await bot.get_entity(target_id)
        user_name = getattr(user_info, 'first_name', 'Usu√°rio')

        await event.reply(
            f"‚úÖ **USU√ÅRIO AUTORIZADO COM SUCESSO!**\n\n"
            f"üë§ **Nome:** {user_name}\n"
            f"üÜî **ID:** `{target_id}`\n"
            f"‚è∞ **Tempo:** Permanente\n"
            f"üìä **Total de autorizados:** {len(usuarios_autorizados_sistema)}"
        )

        # Notificar o usu√°rio autorizado
        try:
            await bot.send_message(
                target_id,
                "üéâ **PARAB√âNS! VOC√ä FOI AUTORIZADO!**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "‚úÖ Agora voc√™ pode usar todas as funcionalidades do bot!\n\n"
                "‚è∞ **Acesso:** Permanente\n\n"
                "üöÄ **Digite /start para come√ßar**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot"
            )
        except:
            pass

    except Exception as e:
        await event.reply(f"‚úÖ **Usu√°rio {target_id} autorizado!** (N√£o foi poss√≠vel obter mais informa√ß√µes)")

@bot.on(events.NewMessage(pattern=r'^/autorizar (\d+) (\d+)([dhm])$'))
async def autorizar_usuario_tempo(event):
    """Autoriza um usu√°rio a usar o bot por um tempo espec√≠fico"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    target_id = int(event.pattern_match.group(1))
    quantidade = int(event.pattern_match.group(2))
    unidade = event.pattern_match.group(3)

    # Calcular data de expira√ß√£o
    agora = datetime.now()

    if unidade == 'm':  # minutos
        data_expiracao = agora + timedelta(minutes=quantidade)
        tempo_texto = f"{quantidade} minuto{'s' if quantidade > 1 else ''}"
    elif unidade == 'h':  # horas
        data_expiracao = agora + timedelta(hours=quantidade)
        tempo_texto = f"{quantidade} hora{'s' if quantidade > 1 else ''}"
    elif unidade == 'd':  # dias
        data_expiracao = agora + timedelta(days=quantidade)
        tempo_texto = f"{quantidade} dia{'s' if quantidade > 1 else ''}"

    usuarios_autorizados_sistema.add(target_id)

    # Atualizar/inserir no banco com data de expira√ß√£o
    try:
        cursor.execute("SELECT id FROM usuarios WHERE id = ?", (target_id,))
        if cursor.fetchone():
            cursor.execute("UPDATE usuarios SET data_expiracao = ? WHERE id = ?", 
                         (data_expiracao.strftime("%Y-%m-%d %H:%M:%S"), target_id))
        else:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(
                "INSERT INTO usuarios (id, nome, sobrenome, hash, data_criada, data_expiracao) VALUES (?, ?, ?, ?, ?, ?)",
                (target_id, "N/A", "N/A", hashlib.md5(str(target_id).encode()).hexdigest()[:8], now, data_expiracao.strftime("%Y-%m-%d %H:%M:%S"))
            )
        conn.commit()
    except Exception as e:
        print(f"‚ùå Erro ao atualizar banco: {e}")

    try:
        #  obter informa√ß√µes do usu√°rio
        user_info = await bot.get_entity(target_id)
        user_name = getattr(user_info, 'first_name', 'Usu√°rio')

        await event.reply(
            f"‚úÖ **USU√ÅRIO AUTORIZADO COM TEMPO!**\n\n"
            f"üë§ **Nome:** {user_name}\n"
            f"üÜî **ID:** `{target_id}`\n"
            f"‚è∞ **Tempo:** {tempo_texto}\n"
            f"üìÖ **Expira em:** {data_expiracao.strftime('%d/%m/%Y √†s %H:%M')}\n"
            f"üìä **Total de autorizados:** {len(usuarios_autorizados_sistema)}"
        )

        # Notificar o usu√°rio autorizado
        try:
            await bot.send_message(
                target_id,
                f"üéâ **PARAB√âNS! VOC√ä FOI AUTORIZADO!**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "‚úÖ Agora voc√™ pode usar todas as funcionalidades do bot!\n\n"
                f"‚è∞ **Tempo de acesso:** {tempo_texto}\n"
                f"üìÖ **Expira em:** {data_expiracao.strftime('%d/%m/%Y √†s %H:%M')}\n\n"
                "üöÄ **Digite /start para come√ßar**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot"
            )
        except:
            pass

    except Exception as e:
        await event.reply(f"‚úÖ **Usu√°rio {target_id} autorizado por {tempo_texto}!**")

@bot.on(events.NewMessage(pattern=r'^/desautorizar (\d+)$'))
async def desautorizar_usuario(event):
    """Remove autoriza√ß√£o de um usu√°rio"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    target_id = int(event.pattern_match.group(1))

    if target_id == DONO_ID:
        await event.reply("‚ùå **N√£o √© poss√≠vel remover autoriza√ß√£o do dono!**")
        return

    if target_id not in usuarios_autorizados_sistema:
        await event.reply(f"‚ö†Ô∏è **Usu√°rio {target_id} n√£o est√° autorizado!**")
        return

    usuarios_autorizados_sistema.remove(target_id)

    # Atualizar banco de dados
    try:
        cursor.execute("UPDATE usuarios SET admin = 'no', data_expiracao = datetime('now', '-1 day') WHERE id = ?", (target_id,))
        conn.commit()
    except Exception as e:
        print(f"‚ùå Erro ao atualizar banco: {e}")

    await event.reply(
        f"‚úÖ **AUTORIZA√á√ÉO REMOVIDA!**\n\n"
        f"üÜî **ID removido:** `{target_id}`\n"
        f"üìä **Total de autorizados:** {len(usuarios_autorizados_sistema)}"
    )

    # Notificar o usu√°rio desautorizado
    try:
        await bot.send_message(
            target_id,
            "üö´ **SUA AUTORIZA√á√ÉO FOI REMOVIDA**\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚ùå Voc√™ n√£o pode mais usar este bot.\n\n"
            "üí° Entre em contato com o administrador se precisar de acesso novamente.\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot"
        )
    except:
        pass

@bot.on(events.NewMessage(pattern=r'^/listautorizados$'))
async def listar_autorizados(event):
    """Lista todos os usu√°rios autorizados com tempo de expira√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    if not usuarios_autorizados_sistema:
        await event.reply("üìã **Lista vazia!** Nenhum usu√°rio autorizado.")
        return

    message = f"üë• **USU√ÅRIOS AUTORIZADOS ({len(usuarios_autorizados_sistema)}):**\n\n"

    for i, user_id_auth in enumerate(usuarios_autorizados_sistema, 1):
        try:
            user_info = await bot.get_entity(user_id_auth)
            user_name = getattr(user_info, 'first_name', 'N/A')
            username = getattr(user_info, 'username', None)

            # Buscar data de expira√ß√£o no banco
            cursor.execute("SELECT data_expiracao FROM usuarios WHERE id = ?", (user_id_auth,))
            result = cursor.fetchone()

            message += f"{i}. **{user_name}**"
            if username:
                message += f" (@{username})"
            message += f"\n   ID: `{user_id_auth}`"

            if result and result[0]:
                data_expiracao = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
                agora = datetime.now()

                if agora > data_expiracao:
                    message += "\n   ‚è∞ **Status:** üî¥ EXPIRADO"
                else:
                    tempo_restante = data_expiracao - agora
                    dias = tempo_restante.days
                    horas = tempo_restante.seconds // 3600
                    minutos = (tempo_restante.seconds % 3600) // 60

                    if dias > 0:
                        message += f"\n   ‚è∞ **Expira em:** {dias}d {horas}h {minutos}m"
                    elif horas > 0:
                        message += f"\n   ‚è∞ **Expira em:** {horas}h {minutos}m"
                    else:
                        message += f"\n   ‚è∞ **Expira em:** {minutos}m"
            else:
                message += "\n   ‚è∞ **Status:** ‚ôæÔ∏è PERMANENTE"

            if user_id_auth == DONO_ID:
                message += " üëë"
            message += "\n\n"
        except Exception as e:
            message += f"{i}. **Usu√°rio Desconhecido**\n   ID: `{user_id_auth}`"
            if user_id_auth == DONO_ID:
                message += " üëë"
            message += "\n\n"

    await event.reply(message)

@bot.on(events.NewMessage(pattern=r'^/estender (\d+) (\d+)([dhm])$'))
async def estender_tempo_usuario(event):
    """Estende o tempo de autoriza√ß√£o de um usu√°rio"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    target_id = int(event.pattern_match.group(1))
    quantidade = int(event.pattern_match.group(2))
    unidade = event.pattern_match.group(3)

    if target_id not in usuarios_autorizados_sistema:
        await event.reply(f"‚ùå **Usu√°rio {target_id} n√£o est√° autorizado!**")
        return

    # Buscar data de expira√ß√£o atual
    cursor.execute("SELECT data_expiracao FROM usuarios WHERE id = ?", (target_id,))
    result = cursor.fetchone()

    if not result or not result[0]:
        await event.reply(f"‚ö†Ô∏è **Usu√°rio {target_id} tem acesso permanente!** Use `/autorizar {target_id} [tempo]` para definir tempo.")
        return

    # Calcular nova data de expira√ß√£o
    data_atual = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
    agora = datetime.now()

    # Se j√° expirou, estender a partir de agora
    if data_atual < agora:
        base_data = agora
    else:
        base_data = data_atual

    if unidade == 'm':  # minutos
        nova_data = base_data + timedelta(minutes=quantidade)
        tempo_texto = f"{quantidade} minuto{'s' if quantidade > 1 else ''}"
    elif unidade == 'h':  # horas
        nova_data = base_data + timedelta(hours=quantidade)
        tempo_texto = f"{quantidade} hora{'s' if quantidade > 1 else ''}"
    elif unidade == 'd':  # dias
        nova_data = base_data + timedelta(days=quantidade)
        tempo_texto = f"{quantidade} dia{'s' if quantidade > 1 else ''}"

    # Atualizar banco
    try:
        cursor.execute("UPDATE usuarios SET data_expiracao = ? WHERE id = ?", 
                     (nova_data.strftime("%Y-%m-%d %H:%M:%S"), target_id))
        conn.commit()

        # Readicionar √† lista de autorizados se estava expirado
        usuarios_autorizados_sistema.add(target_id)

        await event.reply(
            f"‚úÖ **TEMPO ESTENDIDO COM SUCESSO!**\n\n"
            f"üÜî **ID:** `{target_id}`\n"
            f"‚è∞ **Tempo adicionado:** {tempo_texto}\n"
            f"üìÖ **Nova expira√ß√£o:** {nova_data.strftime('%d/%m/%Y √†s %H:%M')}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot"
        )

        # Notificar o usu√°rio
        try:
            await bot.send_message(
                target_id,
                f"‚è∞ **SEU TEMPO FOI ESTENDIDO!**\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"‚ûï **Tempo adicionado:** {tempo_texto}\n"
                f"üìÖ **Nova expira√ß√£o:** {nova_data.strftime('%d/%m/%Y √†s %H:%M')}\n\n"
                "‚úÖ Continue aproveitando o bot!\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "ü§ñ @CatalystServerRobot"
            )
        except:
            pass

    except Exception as e:
        await event.reply(f"‚ùå **Erro ao estender tempo:** {str(e)}")

@bot.on(events.NewMessage(pattern=r'^/authstatus$'))
async def status_autorizacao(event):
    """Mostra status do sistema de autoriza√ß√£o"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    # Contar usu√°rios com diferentes tipos de acesso
    permanentes = 0
    temporarios = 0
    expirados = 0

    for user_id_auth in usuarios_autorizados_sistema:
        cursor.execute("SELECT data_expiracao FROM usuarios WHERE id = ?", (user_id_auth,))
        result = cursor.fetchone()

        if not result or not result[0]:
            permanentes += 1
        else:
            data_expiracao = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() > data_expiracao:
                expirados += 1
            else:
                temporarios += 1

    await event.reply(
        f"üîê **STATUS DO SISTEMA DE AUTORIZA√á√ÉO**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üë• **Total de usu√°rios:** {len(usuarios_autorizados_sistema)}\n"
        f"‚ôæÔ∏è **Permanentes:** {permanentes}\n"
        f"‚è∞ **Tempor√°rios ativos:** {temporarios}\n"
        f"üî¥ **Expirados:** {expirados}\n"
        f"üëë **Dono ID:** `{DONO_ID}`\n"
        f"‚úÖ **Sistema ativo:** Sim\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üõ†Ô∏è **COMANDOS DISPON√çVEIS:**\n"
        "‚Ä¢ `/autorizar [ID]` - Autorizar permanente\n"
        "‚Ä¢ `/autorizar [ID] [tempo][d/h/m]` - Autorizar tempor√°rio\n"
        "‚Ä¢ `/estender [ID] [tempo][d/h/m]` - Estender tempo\n"
        "‚Ä¢ `/desautorizar [ID]` - Remover autoriza√ß√£o\n"
        "‚Ä¢ `/listautorizados` - Listar autorizados\n"
        "‚Ä¢ `/authstatus` - Ver este status\n\n"
        "üí° **Exemplos:**\n"
        "‚Ä¢ `/autorizar 123456789 30d` - 30 dias\n"
        "‚Ä¢ `/autorizar 123456789 12h` - 12 horas\n"
        "‚Ä¢ `/autorizar 123456789 60m` - 60 minutos\n"
        "‚Ä¢ `/estender 123456789 7d` - Adicionar 7 dias\n\n"
        "ü§ñ @CatalystServerRobot"
    )

@bot.on(events.NewMessage(pattern=r'^/broadcast (.+)'))
async def broadcast_handler(event):
    """Envia mensagem para todos os usu√°rios registrados"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    mensagem = event.pattern_match.group(1)

    # Obter todos os usu√°rios do banco
    cursor.execute("SELECT id FROM usuarios")
    usuarios = cursor.fetchall()

    if not usuarios:
        await event.reply("‚ùå **Nenhum usu√°rio encontrado no banco de dados!**")
        return

    # Confirmar antes de enviar
    await event.reply(
        f"üì¢ **CONFIRMA√á√ÉO DE BROADCAST**\n\n"
        f"üìù **Mensagem:**\n{mensagem[:200]}{'...' if len(mensagem) > 200 else ''}\n\n"
        f"üë• **Destinat√°rios:** {len(usuarios)} usu√°rios\n\n"
        "‚ö†Ô∏è **Tem certeza que deseja enviar?**",
        buttons=[
            [Button.inline("‚úÖ Confirmar Envio", data=f"confirm_broadcast:{user_id}")],
            [Button.inline("‚ùå Cancelar", data=f"cancel_broadcast:{user_id}")]
        ]
    )

    # Armazenar mensagem temporariamente
    globals()[f'broadcast_message_{user_id}'] = mensagem
    globals()[f'broadcast_users_{user_id}'] = usuarios

@bot.on(events.NewMessage(pattern=r'^/broadcastauth (.+)'))
async def broadcast_auth_handler(event):
    """Envia mensagem apenas para usu√°rios autorizados"""
    user_id = event.sender_id

    if not eh_dono(user_id):
        await event.reply("üö´ **Acesso negado!** Apenas o dono pode usar este comando.")
        return

    mensagem = event.pattern_match.group(1)

    # Obter apenas usu√°rios autorizados
    usuarios_auth = list(usuarios_autorizados_sistema)

    if not usuarios_auth:
        await event.reply("‚ùå **Nenhum usu√°rio autorizado encontrado!**")
        return

    # Confirmar antes de enviar
    await event.reply(
        f"üì¢ **CONFIRMA√á√ÉO DE BROADCAST (AUTORIZADOS)**\n\n"
        f"üìù **Mensagem:**\n{mensagem[:200]}{'...' if len(mensagem) > 200 else ''}\n\n"
        f"üë• **Destinat√°rios:** {len(usuarios_auth)} usu√°rios autorizados\n\n"
        "‚ö†Ô∏è **Tem certeza que deseja enviar?**",
        buttons=[
            [Button.inline("‚úÖ Confirmar Envio", data=f"confirm_broadcast_auth:{user_id}")],
            [Button.inline("‚ùå Cancelar", data=f"cancel_broadcast:{user_id}")]
        ]
    )

    # Armazenar dados temporariamente
    globals()[f'broadcast_message_{user_id}'] = mensagem
    globals()[f'broadcast_users_auth_{user_id}'] = [(user_id,) for user_id in usuarios_auth]

async def executar_broadcast(user_id, usuarios_lista, mensagem, tipo="geral"):
    """Executa o envio do broadcast"""
    enviados = 0
    falhas = 0
    bloqueados = 0

    # Mensagem de status inicial
    status_msg = await bot.send_message(
        user_id,
        f"üì¢ **INICIANDO BROADCAST {tipo.upper()}**\n\n"
        f"üë• **Total de usu√°rios:** {len(usuarios_lista)}\n"
        f"üì§ **Enviados:** 0\n"
        f"‚ùå **Falhas:** 0\n"
        f"üö´ **Bloqueados:** 0\n\n"
        "‚è≥ **Enviando mensagens...**"
    )

    for i, (target_user_id,) in enumerate(usuarios_lista):
        try:
            # Pular o pr√≥prio dono
            if target_user_id == user_id:
                continue

            await bot.send_message(target_user_id, mensagem, parse_mode='md')
            enviados += 1

            # Atualizar status a cada 10 mensagens
            if (i + 1) % 10 == 0:
                try:
                    await status_msg.edit(
                        f"üì¢ **BROADCAST {tipo.upper()} EM ANDAMENTO**\n\n"
                        f"üë• **Total de usu√°rios:** {len(usuarios_lista)}\n"
                        f"üì§ **Enviados:** {enviados}\n"
                        f"‚ùå **Falhas:** {falhas}\n"
                        f"üö´ **Bloqueados:** {bloqueados}\n\n"
                        f"üìä **Progresso:** {i+1}/{len(usuarios_lista)} ({((i+1)/len(usuarios_lista)*100):.1f}%)\n\n"
                        "‚è≥ **Enviando mensagens...**"
                    )
                except:
                    pass

            # Delay para evitar spam
            await asyncio.sleep(0.1)

        except Exception as e:
            if "blocked" in str(e).lower() or "user is deactivated" in str(e).lower():
                bloqueados += 1
            else:
                falhas += 1
            
            print(f"‚ùå Erro ao enviar para {target_user_id}: {e}")

    # Mensagem final
    try:
        await status_msg.edit(
            f"‚úÖ **BROADCAST {tipo.upper()} CONCLU√çDO!**\n\n"
            f"üë• **Total de usu√°rios:** {len(usuarios_lista)}\n"
            f"üì§ **Enviados com sucesso:** {enviados}\n"
            f"‚ùå **Falhas de envio:** {falhas}\n"
            f"üö´ **Usu√°rios bloqueados:** {bloqueados}\n\n"
            f"üéØ **Taxa de sucesso:** {(enviados/len(usuarios_lista)*100):.1f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "ü§ñ @CatalystServerRobot"
        )
    except:
        pass

# Fun√ß√£o principal
async def main():
    print("ü§ñ Iniciando bot...")

    # Inicializar banco de dados de pessoas
    print("üîÑ Inicializando banco de dados...")
    init_pessoa_database()
    print("‚úÖ Banco de dados inicializado!")

    try:
        # Inicializar o cliente com o token do bot
        await bot.start(bot_token=bot_token)
        print("‚úÖ Bot conectado com sucesso!")

        print(
            f"ü§ñ Funcionalidades dispon√≠veis:\n"
            f"‚Ä¢ /start - Iniciar bot\n"
            f"‚Ä¢ /ping - Verificar status do bot\n"
            f"‚Ä¢ /search [url] - Buscar logins\n"
            f"‚Ä¢ /webscraper [url] - Extrair dados do site\n"
            f"‚Ä¢ /report - Enviar reports Telegram\n"
            f"‚Ä¢ /report2 - Sistema avan√ßado de reports\n"
            f"‚Ä¢ /reportwpp - Reportar n√∫meros WhatsApp\n"
            f"‚Ä¢ /reset - Resetar dados\n"
            f"‚Ä¢ /checker - Ferramentas Checker v3.0\n"
            f"‚Ä¢ /geradores - Ferramentas de Gera√ß√£o v3.0\n"
            f"‚Ä¢ /comandos - Ver todos os comandos\n\n"
        )
        print("üéØ NOVO: Gerador de pessoas com banco de dados real!")
        print("üìä Milh√µes de combina√ß√µes poss√≠veis!")
        print("\n‚ö° Bot aguardando mensagens...")

        # Manter o bot rodando
        await bot.run_until_disconnected()

    except KeyboardInterrupt:
        print("\nüëã Bot finalizado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
    finally:
        try:
            await bot.disconnect()
        except:
            pass
        
        # Fechar conex√µes do banco
        try:
            if 'cursor' in globals():
                cursor.close()
            if 'conn' in globals():
                conn.close()
            print("‚úÖ Conex√µes do banco fechadas")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao fechar banco: {e}")

if __name__ == "__main__":
    asyncio.run(main())
